
RTOSsecondTask.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00006404  00006498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000658  0080007a  0080007a  000064b2  2**0
                  ALLOC
  3 .stab         00009498  00000000  00000000  000064b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004a71  00000000  00000000  0000f94c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000143bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000144fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0001466d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000162b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000171a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00017f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000180b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0001833d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00018b0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3d       	cpi	r26, 0xD2	; 210
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1f 12 	call	0x243e	; 0x243e <main>
      8a:	0c 94 00 32 	jmp	0x6400	; 0x6400 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 31 	jmp	0x62e8	; 0x62e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 31 	jmp	0x6320	; 0x6320 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 31 	jmp	0x6338	; 0x6338 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 31 	jmp	0x6338	; 0x6338 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 31 	jmp	0x62e8	; 0x62e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 31 	jmp	0x6320	; 0x6320 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9c 31 	jmp	0x6338	; 0x6338 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9c 31 	jmp	0x6338	; 0x6338 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9c 31 	jmp	0x6338	; 0x6338 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a0 31 	jmp	0x6340	; 0x6340 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_WritePin>:
 */

#include "DIO_operations.h"
#include "Memory_map.h"
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_WritePin+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
if(PinValue==1)
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <DIO_WritePin+0x16>
     b5a:	70 c0       	rjmp	.+224    	; 0xc3c <DIO_WritePin+0xf6>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	88 30       	cpi	r24, 0x08	; 8
     b60:	a0 f4       	brcc	.+40     	; 0xb8a <DIO_WritePin+0x44>
	{
		Set_Bit(PORTA,PinNum);
     b62:	ab e3       	ldi	r26, 0x3B	; 59
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	eb e3       	ldi	r30, 0x3B	; 59
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	48 2f       	mov	r20, r24
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	02 2e       	mov	r0, r18
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_WritePin+0x3a>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_WritePin+0x36>
     b84:	84 2b       	or	r24, r20
     b86:	8c 93       	st	X, r24
     b88:	ce c0       	rjmp	.+412    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	d0 f0       	brcs	.+52     	; 0xbc4 <DIO_WritePin+0x7e>
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	80 31       	cpi	r24, 0x10	; 16
     b94:	b8 f4       	brcc	.+46     	; 0xbc4 <DIO_WritePin+0x7e>
	{
		Set_Bit(PORTB,(PinNum-8));
     b96:	a8 e3       	ldi	r26, 0x38	; 56
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e8 e3       	ldi	r30, 0x38	; 56
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	9c 01       	movw	r18, r24
     baa:	28 50       	subi	r18, 0x08	; 8
     bac:	30 40       	sbci	r19, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 2e       	mov	r0, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_WritePin+0x74>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_WritePin+0x70>
     bbe:	84 2b       	or	r24, r20
     bc0:	8c 93       	st	X, r24
     bc2:	b1 c0       	rjmp	.+354    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	80 31       	cpi	r24, 0x10	; 16
     bc8:	d0 f0       	brcs	.+52     	; 0xbfe <DIO_WritePin+0xb8>
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	88 31       	cpi	r24, 0x18	; 24
     bce:	b8 f4       	brcc	.+46     	; 0xbfe <DIO_WritePin+0xb8>
	{
		Set_Bit(PORTC,(PinNum-16));
     bd0:	a5 e3       	ldi	r26, 0x35	; 53
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e5 e3       	ldi	r30, 0x35	; 53
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9c 01       	movw	r18, r24
     be4:	20 51       	subi	r18, 0x10	; 16
     be6:	30 40       	sbci	r19, 0x00	; 0
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 2e       	mov	r0, r18
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_WritePin+0xae>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_WritePin+0xaa>
     bf8:	84 2b       	or	r24, r20
     bfa:	8c 93       	st	X, r24
     bfc:	94 c0       	rjmp	.+296    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	88 31       	cpi	r24, 0x18	; 24
     c02:	08 f4       	brcc	.+2      	; 0xc06 <DIO_WritePin+0xc0>
     c04:	90 c0       	rjmp	.+288    	; 0xd26 <DIO_WritePin+0x1e0>
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	80 32       	cpi	r24, 0x20	; 32
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <DIO_WritePin+0xc8>
     c0c:	8c c0       	rjmp	.+280    	; 0xd26 <DIO_WritePin+0x1e0>
	{
		Set_Bit(PORTD,(PinNum-24));
     c0e:	a2 e3       	ldi	r26, 0x32	; 50
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e2 e3       	ldi	r30, 0x32	; 50
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9c 01       	movw	r18, r24
     c22:	28 51       	subi	r18, 0x18	; 24
     c24:	30 40       	sbci	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_WritePin+0xec>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_WritePin+0xe8>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	75 c0       	rjmp	.+234    	; 0xd26 <DIO_WritePin+0x1e0>
	}
}
else if(PinValue==0)
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <DIO_WritePin+0xfe>
     c42:	71 c0       	rjmp	.+226    	; 0xd26 <DIO_WritePin+0x1e0>
{
	if(PinNum>=PinA0&&PinNum<=PinA7)
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	88 30       	cpi	r24, 0x08	; 8
     c48:	a8 f4       	brcc	.+42     	; 0xc74 <DIO_WritePin+0x12e>
	{
		Clear_Bit(PORTA,PinNum);
     c4a:	ab e3       	ldi	r26, 0x3B	; 59
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e3       	ldi	r30, 0x3B	; 59
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_WritePin+0x122>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_WritePin+0x11e>
     c6c:	80 95       	com	r24
     c6e:	84 23       	and	r24, r20
     c70:	8c 93       	st	X, r24
     c72:	59 c0       	rjmp	.+178    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	d8 f0       	brcs	.+54     	; 0xcb0 <DIO_WritePin+0x16a>
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	80 31       	cpi	r24, 0x10	; 16
     c7e:	c0 f4       	brcc	.+48     	; 0xcb0 <DIO_WritePin+0x16a>
	{
		Clear_Bit(PORTB,(PinNum-8));
     c80:	a8 e3       	ldi	r26, 0x38	; 56
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e8 e3       	ldi	r30, 0x38	; 56
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	48 2f       	mov	r20, r24
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9c 01       	movw	r18, r24
     c94:	28 50       	subi	r18, 0x08	; 8
     c96:	30 40       	sbci	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_WritePin+0x15e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_WritePin+0x15a>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	3b c0       	rjmp	.+118    	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	80 31       	cpi	r24, 0x10	; 16
     cb4:	d8 f0       	brcs	.+54     	; 0xcec <DIO_WritePin+0x1a6>
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	88 31       	cpi	r24, 0x18	; 24
     cba:	c0 f4       	brcc	.+48     	; 0xcec <DIO_WritePin+0x1a6>
	{
		Clear_Bit(PORTC,(PinNum-16));
     cbc:	a5 e3       	ldi	r26, 0x35	; 53
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e5 e3       	ldi	r30, 0x35	; 53
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9c 01       	movw	r18, r24
     cd0:	20 51       	subi	r18, 0x10	; 16
     cd2:	30 40       	sbci	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_WritePin+0x19a>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_WritePin+0x196>
     ce4:	80 95       	com	r24
     ce6:	84 23       	and	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	1d c0       	rjmp	.+58     	; 0xd26 <DIO_WritePin+0x1e0>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	88 31       	cpi	r24, 0x18	; 24
     cf0:	d0 f0       	brcs	.+52     	; 0xd26 <DIO_WritePin+0x1e0>
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	80 32       	cpi	r24, 0x20	; 32
     cf6:	b8 f4       	brcc	.+46     	; 0xd26 <DIO_WritePin+0x1e0>
	{
		Clear_Bit(PORTD,(PinNum-24));
     cf8:	a2 e3       	ldi	r26, 0x32	; 50
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e2 e3       	ldi	r30, 0x32	; 50
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9c 01       	movw	r18, r24
     d0c:	28 51       	subi	r18, 0x18	; 24
     d0e:	30 40       	sbci	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_WritePin+0x1d6>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_WritePin+0x1d2>
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8c 93       	st	X, r24
	}
}
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <DIO_ReadPin+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Pin_Value;
	if(PinNum>=PinA0&&PinNum<=PinA7)
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	88 30       	cpi	r24, 0x08	; 8
     d40:	90 f4       	brcc	.+36     	; 0xd66 <DIO_ReadPin+0x36>
	{
		Pin_Value=Get_Bit(PINA,PinNum);
     d42:	e9 e3       	ldi	r30, 0x39	; 57
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_ReadPin+0x2c>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_ReadPin+0x28>
     d60:	84 23       	and	r24, r20
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	50 c0       	rjmp	.+160    	; 0xe06 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinB0&&PinNum<=PinB7)
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	88 30       	cpi	r24, 0x08	; 8
     d6a:	c0 f0       	brcs	.+48     	; 0xd9c <DIO_ReadPin+0x6c>
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	80 31       	cpi	r24, 0x10	; 16
     d70:	a8 f4       	brcc	.+42     	; 0xd9c <DIO_ReadPin+0x6c>
	{
		Pin_Value=Get_Bit(PINB,(PinNum-8));
     d72:	e6 e3       	ldi	r30, 0x36	; 54
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	9c 01       	movw	r18, r24
     d82:	28 50       	subi	r18, 0x08	; 8
     d84:	30 40       	sbci	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_ReadPin+0x62>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_ReadPin+0x5e>
     d96:	84 23       	and	r24, r20
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	35 c0       	rjmp	.+106    	; 0xe06 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinC0&&PinNum<=PinC7)
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	80 31       	cpi	r24, 0x10	; 16
     da0:	c0 f0       	brcs	.+48     	; 0xdd2 <DIO_ReadPin+0xa2>
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	88 31       	cpi	r24, 0x18	; 24
     da6:	a8 f4       	brcc	.+42     	; 0xdd2 <DIO_ReadPin+0xa2>
	{
		Pin_Value=Get_Bit(PINC,(PinNum-16));
     da8:	e3 e3       	ldi	r30, 0x33	; 51
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9c 01       	movw	r18, r24
     db8:	20 51       	subi	r18, 0x10	; 16
     dba:	30 40       	sbci	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_ReadPin+0x98>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_ReadPin+0x94>
     dcc:	84 23       	and	r24, r20
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	1a c0       	rjmp	.+52     	; 0xe06 <DIO_ReadPin+0xd6>
	}
	else if(PinNum>=PinD0&&PinNum<=PinD7)
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	88 31       	cpi	r24, 0x18	; 24
     dd6:	b8 f0       	brcs	.+46     	; 0xe06 <DIO_ReadPin+0xd6>
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	80 32       	cpi	r24, 0x20	; 32
     ddc:	a0 f4       	brcc	.+40     	; 0xe06 <DIO_ReadPin+0xd6>
	{
		Pin_Value=Get_Bit(PIND,(PinNum-24));
     dde:	e0 e3       	ldi	r30, 0x30	; 48
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9c 01       	movw	r18, r24
     dee:	28 51       	subi	r18, 0x18	; 24
     df0:	30 40       	sbci	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_ReadPin+0xce>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_ReadPin+0xca>
     e02:	84 23       	and	r24, r20
     e04:	89 83       	std	Y+1, r24	; 0x01
	}
	return Pin_Value;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <DIO_SetPinDirection+0x6>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==1)
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <DIO_SetPinDirection+0x16>
     e26:	70 c0       	rjmp	.+224    	; 0xf08 <DIO_SetPinDirection+0xf6>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	88 30       	cpi	r24, 0x08	; 8
     e2c:	a0 f4       	brcc	.+40     	; 0xe56 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     e2e:	aa e3       	ldi	r26, 0x3A	; 58
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ea e3       	ldi	r30, 0x3A	; 58
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_SetPinDirection+0x3a>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_SetPinDirection+0x36>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	ce c0       	rjmp	.+412    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 30       	cpi	r24, 0x08	; 8
     e5a:	d0 f0       	brcs	.+52     	; 0xe90 <DIO_SetPinDirection+0x7e>
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	80 31       	cpi	r24, 0x10	; 16
     e60:	b8 f4       	brcc	.+46     	; 0xe90 <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
     e62:	a7 e3       	ldi	r26, 0x37	; 55
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e3       	ldi	r30, 0x37	; 55
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9c 01       	movw	r18, r24
     e76:	28 50       	subi	r18, 0x08	; 8
     e78:	30 40       	sbci	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_SetPinDirection+0x74>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_SetPinDirection+0x70>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	b1 c0       	rjmp	.+354    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	80 31       	cpi	r24, 0x10	; 16
     e94:	d0 f0       	brcs	.+52     	; 0xeca <DIO_SetPinDirection+0xb8>
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	88 31       	cpi	r24, 0x18	; 24
     e9a:	b8 f4       	brcc	.+46     	; 0xeca <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
     e9c:	a4 e3       	ldi	r26, 0x34	; 52
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e4 e3       	ldi	r30, 0x34	; 52
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9c 01       	movw	r18, r24
     eb0:	20 51       	subi	r18, 0x10	; 16
     eb2:	30 40       	sbci	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_SetPinDirection+0xae>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_SetPinDirection+0xaa>
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	94 c0       	rjmp	.+296    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	88 31       	cpi	r24, 0x18	; 24
     ece:	08 f4       	brcc	.+2      	; 0xed2 <DIO_SetPinDirection+0xc0>
     ed0:	90 c0       	rjmp	.+288    	; 0xff2 <DIO_SetPinDirection+0x1e0>
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	80 32       	cpi	r24, 0x20	; 32
     ed6:	08 f0       	brcs	.+2      	; 0xeda <DIO_SetPinDirection+0xc8>
     ed8:	8c c0       	rjmp	.+280    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRC,(PinNum-24));
     eda:	a4 e3       	ldi	r26, 0x34	; 52
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e4 e3       	ldi	r30, 0x34	; 52
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9c 01       	movw	r18, r24
     eee:	28 51       	subi	r18, 0x18	; 24
     ef0:	30 40       	sbci	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_SetPinDirection+0xec>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_SetPinDirection+0xe8>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	75 c0       	rjmp	.+234    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==0)
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	88 23       	and	r24, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <DIO_SetPinDirection+0xfe>
     f0e:	71 c0       	rjmp	.+226    	; 0xff2 <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=PinA0&&PinNum<=PinA7)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	88 30       	cpi	r24, 0x08	; 8
     f14:	a8 f4       	brcc	.+42     	; 0xf40 <DIO_SetPinDirection+0x12e>
		{
			Clear_Bit(PORTA,PinNum);
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_SetPinDirection+0x122>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_SetPinDirection+0x11e>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	59 c0       	rjmp	.+178    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinB0&&PinNum<=PinB7)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	88 30       	cpi	r24, 0x08	; 8
     f44:	d8 f0       	brcs	.+54     	; 0xf7c <DIO_SetPinDirection+0x16a>
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	80 31       	cpi	r24, 0x10	; 16
     f4a:	c0 f4       	brcc	.+48     	; 0xf7c <DIO_SetPinDirection+0x16a>
		{
			Clear_Bit(DDRB,(PinNum-8));
     f4c:	a7 e3       	ldi	r26, 0x37	; 55
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e3       	ldi	r30, 0x37	; 55
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9c 01       	movw	r18, r24
     f60:	28 50       	subi	r18, 0x08	; 8
     f62:	30 40       	sbci	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_SetPinDirection+0x15e>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_SetPinDirection+0x15a>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	3b c0       	rjmp	.+118    	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinC0&&PinNum<=PinC7)
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	80 31       	cpi	r24, 0x10	; 16
     f80:	d8 f0       	brcs	.+54     	; 0xfb8 <DIO_SetPinDirection+0x1a6>
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	88 31       	cpi	r24, 0x18	; 24
     f86:	c0 f4       	brcc	.+48     	; 0xfb8 <DIO_SetPinDirection+0x1a6>
		{
			Clear_Bit(DDRC,(PinNum-16));
     f88:	a4 e3       	ldi	r26, 0x34	; 52
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c 01       	movw	r18, r24
     f9c:	20 51       	subi	r18, 0x10	; 16
     f9e:	30 40       	sbci	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_SetPinDirection+0x19a>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_SetPinDirection+0x196>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	1d c0       	rjmp	.+58     	; 0xff2 <DIO_SetPinDirection+0x1e0>
		}
		else if(PinNum>=PinD0&&PinNum<=PinD7)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	88 31       	cpi	r24, 0x18	; 24
     fbc:	d0 f0       	brcs	.+52     	; 0xff2 <DIO_SetPinDirection+0x1e0>
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	b8 f4       	brcc	.+46     	; 0xff2 <DIO_SetPinDirection+0x1e0>
		{
			Clear_Bit(DDRD,(PinNum-24));
     fc4:	a1 e3       	ldi	r26, 0x31	; 49
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e1 e3       	ldi	r30, 0x31	; 49
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9c 01       	movw	r18, r24
     fd8:	28 51       	subi	r18, 0x18	; 24
     fda:	30 40       	sbci	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_SetPinDirection+0x1d6>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_SetPinDirection+0x1d2>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
		}
	}
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <LCD_INIT>:
#include "LCD.h"



void LCD_INIT(void)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_4_BIT_2_LINES_COMMAND);
	LCD_sendCommand(CURSOR_OFF);
	LCD_Clear();

#elif defined HIGHER_BITS
	DATA_DDR = 0xF0;
    1004:	ea e3       	ldi	r30, 0x3A	; 58
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 ef       	ldi	r24, 0xF0	; 240
    100a:	80 83       	st	Z, r24
	Set_Bit(CONTROL_DDR,RS);
    100c:	aa e3       	ldi	r26, 0x3A	; 58
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea e3       	ldi	r30, 0x3A	; 58
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	8c 93       	st	X, r24
	Set_Bit(CONTROL_DDR,RW);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	8c 93       	st	X, r24
	Set_Bit(CONTROL_DDR,E);
    1028:	aa e3       	ldi	r26, 0x3A	; 58
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e3       	ldi	r30, 0x3A	; 58
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 60       	ori	r24, 0x08	; 8
    1034:	8c 93       	st	X, r24
	LCD_sendCommand(LCD_4_BIT_MODE);
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
	LCD_sendCommand(LCD_4_BIT_2_LINES_COMMAND);
    103c:	88 e2       	ldi	r24, 0x28	; 40
    103e:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF);
    1042:	8c e0       	ldi	r24, 0x0C	; 12
    1044:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
	LCD_Clear();
    1048:	0e 94 24 09 	call	0x1248	; 0x1248 <LCD_Clear>

#endif

#endif
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <LCD_sendCommand>:


void LCD_sendCommand(const uint8 Command)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	89 83       	std	Y+1, r24	; 0x01
	Clear_Bit(CONTROL_PORT,E);
	vTaskDelay(1);;


#elif defined FOUR_BIT_MODE
	Clear_Bit(CONTROL_PORT,RS);
    105e:	ab e3       	ldi	r26, 0x3B	; 59
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	eb e3       	ldi	r30, 0x3B	; 59
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8d 7f       	andi	r24, 0xFD	; 253
    106a:	8c 93       	st	X, r24
	Clear_Bit(CONTROL_PORT,RW);
    106c:	ab e3       	ldi	r26, 0x3B	; 59
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	eb e3       	ldi	r30, 0x3B	; 59
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8b 7f       	andi	r24, 0xFB	; 251
    1078:	8c 93       	st	X, r24
	vTaskDelay(2);
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
	Set_Bit(CONTROL_PORT,E);
    1082:	ab e3       	ldi	r26, 0x3B	; 59
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e3       	ldi	r30, 0x3B	; 59
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 60       	ori	r24, 0x08	; 8
    108e:	8c 93       	st	X, r24
	vTaskDelay(2);
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | ((0xF0 & Command)>>4);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | (0xF0 & Command);
    1098:	ab e3       	ldi	r26, 0x3B	; 59
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	98 2f       	mov	r25, r24
    10a4:	9f 70       	andi	r25, 0x0F	; 15
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	80 7f       	andi	r24, 0xF0	; 240
    10aa:	89 2b       	or	r24, r25
    10ac:	8c 93       	st	X, r24
#endif
	vTaskDelay(2);
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
	Clear_Bit(CONTROL_PORT,E);
    10b6:	ab e3       	ldi	r26, 0x3B	; 59
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	eb e3       	ldi	r30, 0x3B	; 59
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	87 7f       	andi	r24, 0xF7	; 247
    10c2:	8c 93       	st	X, r24
	vTaskDelay(2);
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
	Set_Bit(CONTROL_PORT,E);
    10cc:	ab e3       	ldi	r26, 0x3B	; 59
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 60       	ori	r24, 0x08	; 8
    10d8:	8c 93       	st	X, r24
	vTaskDelay(2);
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | (0x0F & Command);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | ((0x0F & Command)<<4);
    10e2:	ab e3       	ldi	r26, 0x3B	; 59
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	eb e3       	ldi	r30, 0x3B	; 59
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	28 2f       	mov	r18, r24
    10ee:	2f 70       	andi	r18, 0x0F	; 15
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	82 95       	swap	r24
    10f8:	92 95       	swap	r25
    10fa:	90 7f       	andi	r25, 0xF0	; 240
    10fc:	98 27       	eor	r25, r24
    10fe:	80 7f       	andi	r24, 0xF0	; 240
    1100:	98 27       	eor	r25, r24
    1102:	82 2b       	or	r24, r18
    1104:	8c 93       	st	X, r24
#endif
	Clear_Bit(CONTROL_PORT,E);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	87 7f       	andi	r24, 0xF7	; 247
    1112:	8c 93       	st	X, r24
	vTaskDelay(2);
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>

#endif
}
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <LCD_sendChar>:


void LCD_sendChar(const char Char)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	89 83       	std	Y+1, r24	; 0x01
	Clear_Bit(CONTROL_PORT,E);
	vTaskDelay(1);;


#elif defined FOUR_BIT_MODE
	Set_Bit(CONTROL_PORT,RS);
    1130:	ab e3       	ldi	r26, 0x3B	; 59
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e3       	ldi	r30, 0x3B	; 59
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	82 60       	ori	r24, 0x02	; 2
    113c:	8c 93       	st	X, r24
	Clear_Bit(CONTROL_PORT,RW);
    113e:	ab e3       	ldi	r26, 0x3B	; 59
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8b 7f       	andi	r24, 0xFB	; 251
    114a:	8c 93       	st	X, r24
	vTaskDelay(2);
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
	Set_Bit(CONTROL_PORT,E);
    1154:	ab e3       	ldi	r26, 0x3B	; 59
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	eb e3       	ldi	r30, 0x3B	; 59
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 60       	ori	r24, 0x08	; 8
    1160:	8c 93       	st	X, r24
	vTaskDelay(2);
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | ((0xF0 & Char) >> 4);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | (0xF0 & Char);
    116a:	ab e3       	ldi	r26, 0x3B	; 59
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	98 2f       	mov	r25, r24
    1176:	9f 70       	andi	r25, 0x0F	; 15
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	80 7f       	andi	r24, 0xF0	; 240
    117c:	89 2b       	or	r24, r25
    117e:	8c 93       	st	X, r24
#endif
	vTaskDelay(2);
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
	Clear_Bit(CONTROL_PORT,E);
    1188:	ab e3       	ldi	r26, 0x3B	; 59
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	eb e3       	ldi	r30, 0x3B	; 59
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	87 7f       	andi	r24, 0xF7	; 247
    1194:	8c 93       	st	X, r24
	vTaskDelay(2);
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
	Set_Bit(CONTROL_PORT,E);
    119e:	ab e3       	ldi	r26, 0x3B	; 59
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	eb e3       	ldi	r30, 0x3B	; 59
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	88 60       	ori	r24, 0x08	; 8
    11aa:	8c 93       	st	X, r24
	vTaskDelay(2);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
#ifdef LOWER_BITS
	DATA_PORT = (DATA_PORT & 0xF0) | (0x0F & Char);
#elif defined HIGHER_BITS
	DATA_PORT = (DATA_PORT & 0x0F) | ((0x0F & Char) << 4);
    11b4:	ab e3       	ldi	r26, 0x3B	; 59
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	eb e3       	ldi	r30, 0x3B	; 59
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	2f 70       	andi	r18, 0x0F	; 15
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	82 95       	swap	r24
    11ca:	92 95       	swap	r25
    11cc:	90 7f       	andi	r25, 0xF0	; 240
    11ce:	98 27       	eor	r25, r24
    11d0:	80 7f       	andi	r24, 0xF0	; 240
    11d2:	98 27       	eor	r25, r24
    11d4:	82 2b       	or	r24, r18
    11d6:	8c 93       	st	X, r24
#endif
	Clear_Bit(CONTROL_PORT,E);
    11d8:	ab e3       	ldi	r26, 0x3B	; 59
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	eb e3       	ldi	r30, 0x3B	; 59
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	87 7f       	andi	r24, 0xF7	; 247
    11e4:	8c 93       	st	X, r24
	vTaskDelay(2);
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>

#endif

}
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <LCD_sendString>:


void LCD_sendString(const char *str)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <LCD_sendString+0x6>
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9b 83       	std	Y+3, r25	; 0x03
    1204:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	0e c0       	rjmp	.+28     	; 0x1226 <LCD_sendString+0x30>
	while(str[i]!= '\0')
	{
		LCD_sendChar(str[i]);
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	fc 01       	movw	r30, r24
    1216:	e2 0f       	add	r30, r18
    1218:	f3 1f       	adc	r31, r19
    121a:	80 81       	ld	r24, Z
    121c:	0e 94 92 08 	call	0x1124	; 0x1124 <LCD_sendChar>
		i++;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	89 83       	std	Y+1, r24	; 0x01


void LCD_sendString(const char *str)
{
	uint8 i =0;
	while(str[i]!= '\0')
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	9b 81       	ldd	r25, Y+3	; 0x03
    1230:	fc 01       	movw	r30, r24
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	80 81       	ld	r24, Z
    1238:	88 23       	and	r24, r24
    123a:	39 f7       	brne	.-50     	; 0x120a <LCD_sendString+0x14>
	{
		LCD_sendChar(str[i]);
		i++;
	}
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <LCD_Clear>:


void LCD_Clear(void)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR); 
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <LCD_IntToStr>:


void LCD_IntToStr(const uint16 data)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	62 97       	sbiw	r28, 0x12	; 18
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	9a 8b       	std	Y+18, r25	; 0x12
    1272:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* 10 for decimal */
    1274:	89 89       	ldd	r24, Y+17	; 0x11
    1276:	9a 89       	ldd	r25, Y+18	; 0x12
    1278:	9e 01       	movw	r18, r28
    127a:	2f 5f       	subi	r18, 0xFF	; 255
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	b9 01       	movw	r22, r18
    1280:	4a e0       	ldi	r20, 0x0A	; 10
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	0e 94 bb 31 	call	0x6376	; 0x6376 <itoa>
	LCD_sendString(buff);
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD_sendString>
}
    1290:	62 96       	adiw	r28, 0x12	; 18
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <LCD_goToRowColumn>:


void LCD_goToRowColumn(uint8 row,uint8 col)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <LCD_goToRowColumn+0x6>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <LCD_goToRowColumn+0x8>
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	8a 83       	std	Y+2, r24	; 0x02
    12b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	3d 83       	std	Y+5, r19	; 0x05
    12bc:	2c 83       	std	Y+4, r18	; 0x04
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	91 05       	cpc	r25, r1
    12c6:	c1 f0       	breq	.+48     	; 0x12f8 <LCD_goToRowColumn+0x56>
    12c8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ca:	3d 81       	ldd	r19, Y+5	; 0x05
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	2c f4       	brge	.+10     	; 0x12dc <LCD_goToRowColumn+0x3a>
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <LCD_goToRowColumn+0x50>
    12da:	19 c0       	rjmp	.+50     	; 0x130e <LCD_goToRowColumn+0x6c>
    12dc:	2c 81       	ldd	r18, Y+4	; 0x04
    12de:	3d 81       	ldd	r19, Y+5	; 0x05
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	69 f0       	breq	.+26     	; 0x1300 <LCD_goToRowColumn+0x5e>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	91 05       	cpc	r25, r1
    12ee:	61 f0       	breq	.+24     	; 0x1308 <LCD_goToRowColumn+0x66>
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	0b c0       	rjmp	.+22     	; 0x130e <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	80 5c       	subi	r24, 0xC0	; 192
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	80 5f       	subi	r24, 0xF0	; 240
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	03 c0       	rjmp	.+6      	; 0x130e <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	80 5b       	subi	r24, 0xB0	; 176
    130c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	80 68       	ori	r24, 0x80	; 128
    1312:	0e 94 29 08 	call	0x1052	; 0x1052 <LCD_sendCommand>
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *Str)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <LCD_displayStringRowColumn+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <LCD_displayStringRowColumn+0x8>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	6a 83       	std	Y+2, r22	; 0x02
    1336:	5c 83       	std	Y+4, r21	; 0x04
    1338:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	6a 81       	ldd	r22, Y+2	; 0x02
    133e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <LCD_goToRowColumn>
	LCD_sendString(Str); /* display the string */
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <LCD_sendString>
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <BUTTON_Init>:
 */
#include "FreeRTOS.h"
#include "task.h"
#include "button.h"
void BUTTON_Init(uint8 button_num)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
	if(button_num==1)
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	49 f4       	brne	.+18     	; 0x137c <BUTTON_Init+0x24>
	{
	DIO_SetPinDirection(PinA0,INPUT);
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_SetPinDirection>
	DIO_WritePin(PinA0,HIGH);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
    137a:	0b c0       	rjmp	.+22     	; 0x1392 <BUTTON_Init+0x3a>
	}
	else if(button_num==2)
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	41 f4       	brne	.+16     	; 0x1392 <BUTTON_Init+0x3a>
	{
	DIO_SetPinDirection(PinA1,INPUT);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_SetPinDirection>
	DIO_WritePin(PinA1,HIGH);
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
	}
}
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <BUTTON_GitButtonState>:
uint8 BUTTON_GitButtonState(uint8 button_num)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <BUTTON_GitButtonState+0x6>
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01
	if(button_num==1)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	29 f4       	brne	.+10     	; 0x13b8 <BUTTON_GitButtonState+0x1e>
	{
	return DIO_ReadPin(PinA0);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 98 06 	call	0xd30	; 0xd30 <DIO_ReadPin>
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <BUTTON_GitButtonState+0x30>
	}
	else if(button_num==2)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <BUTTON_GitButtonState+0x2e>
	{
	return DIO_ReadPin(PinA1);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 98 06 	call	0xd30	; 0xd30 <DIO_ReadPin>
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <BUTTON_GitButtonState+0x30>
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <BUTTON_GitButtonState+0x34>
	}
}
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <xEventGroupCreate+0x6>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    13e6:	8b e0       	ldi	r24, 0x0B	; 11
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	49 f0       	breq	.+18     	; 0x140c <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    13fa:	e9 81       	ldd	r30, Y+1	; 0x01
    13fc:	fa 81       	ldd	r31, Y+2	; 0x02
    13fe:	11 82       	std	Z+1, r1	; 0x01
    1400:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	02 96       	adiw	r24, 0x02	; 2
    1408:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	60 97       	sbiw	r28, 0x10	; 16
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	9a 87       	std	Y+10, r25	; 0x0a
    1430:	89 87       	std	Y+9, r24	; 0x09
    1432:	7c 87       	std	Y+12, r23	; 0x0c
    1434:	6b 87       	std	Y+11, r22	; 0x0b
    1436:	5e 87       	std	Y+14, r21	; 0x0e
    1438:	4d 87       	std	Y+13, r20	; 0x0d
    143a:	38 8b       	std	Y+16, r19	; 0x10
    143c:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    1446:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1448:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    144c:	eb 81       	ldd	r30, Y+3	; 0x03
    144e:	fc 81       	ldd	r31, Y+4	; 0x04
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	98 87       	std	Y+8, r25	; 0x08
    1456:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	2b 85       	ldd	r18, Y+11	; 0x0b
    145e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1466:	2f 81       	ldd	r18, Y+7	; 0x07
    1468:	38 85       	ldd	r19, Y+8	; 0x08
    146a:	8b 85       	ldd	r24, Y+11	; 0x0b
    146c:	9c 85       	ldd	r25, Y+12	; 0x0c
    146e:	28 2b       	or	r18, r24
    1470:	39 2b       	or	r19, r25
    1472:	8d 85       	ldd	r24, Y+13	; 0x0d
    1474:	9e 85       	ldd	r25, Y+14	; 0x0e
    1476:	28 23       	and	r18, r24
    1478:	39 23       	and	r19, r25
    147a:	8d 85       	ldd	r24, Y+13	; 0x0d
    147c:	9e 85       	ldd	r25, Y+14	; 0x0e
    147e:	28 17       	cp	r18, r24
    1480:	39 07       	cpc	r19, r25
    1482:	c9 f4       	brne	.+50     	; 0x14b6 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    1484:	2f 81       	ldd	r18, Y+7	; 0x07
    1486:	38 85       	ldd	r19, Y+8	; 0x08
    1488:	8b 85       	ldd	r24, Y+11	; 0x0b
    148a:	9c 85       	ldd	r25, Y+12	; 0x0c
    148c:	82 2b       	or	r24, r18
    148e:	93 2b       	or	r25, r19
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	20 81       	ld	r18, Z
    149a:	31 81       	ldd	r19, Z+1	; 0x01
    149c:	8d 85       	ldd	r24, Y+13	; 0x0d
    149e:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a0:	80 95       	com	r24
    14a2:	90 95       	com	r25
    14a4:	82 23       	and	r24, r18
    14a6:	93 23       	and	r25, r19
    14a8:	eb 81       	ldd	r30, Y+3	; 0x03
    14aa:	fc 81       	ldd	r31, Y+4	; 0x04
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	80 83       	st	Z, r24

			xTicksToWait = 0;
    14b0:	18 8a       	std	Y+16, r1	; 0x10
    14b2:	1f 86       	std	Y+15, r1	; 0x0f
    14b4:	1e c0       	rjmp	.+60     	; 0x14f2 <xEventGroupSync+0xd8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    14b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b8:	98 89       	ldd	r25, Y+16	; 0x10
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	91 f0       	breq	.+36     	; 0x14e2 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	bc 01       	movw	r22, r24
    14c4:	6e 5f       	subi	r22, 0xFE	; 254
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    14cc:	9c 01       	movw	r18, r24
    14ce:	35 60       	ori	r19, 0x05	; 5
    14d0:	4f 85       	ldd	r20, Y+15	; 0x0f
    14d2:	58 89       	ldd	r21, Y+16	; 0x10
    14d4:	cb 01       	movw	r24, r22
    14d6:	b9 01       	movw	r22, r18
    14d8:	0e 94 b6 2a 	call	0x556c	; 0x556c <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    14dc:	1e 82       	std	Y+6, r1	; 0x06
    14de:	1d 82       	std	Y+5, r1	; 0x05
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <xEventGroupSync+0xd8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
				xTimeoutOccurred = pdTRUE;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    14f2:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    14f6:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    14f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fa:	98 89       	ldd	r25, Y+16	; 0x10
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	09 f4       	brne	.+2      	; 0x1502 <xEventGroupSync+0xe8>
    1500:	3a c0       	rjmp	.+116    	; 0x1576 <xEventGroupSync+0x15c>
	{
		if( xAlreadyYielded == pdFALSE )
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	88 23       	and	r24, r24
    1506:	11 f4       	brne	.+4      	; 0x150c <xEventGroupSync+0xf2>
		{
			portYIELD_WITHIN_API();
    1508:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    150c:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <uxTaskResetEventItemValue>
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	80 70       	andi	r24, 0x00	; 0
    151a:	92 70       	andi	r25, 0x02	; 2
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	31 f5       	brne	.+76     	; 0x156c <xEventGroupSync+0x152>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    1526:	eb 81       	ldd	r30, Y+3	; 0x03
    1528:	fc 81       	ldd	r31, Y+4	; 0x04
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1532:	2d 81       	ldd	r18, Y+5	; 0x05
    1534:	3e 81       	ldd	r19, Y+6	; 0x06
    1536:	8d 85       	ldd	r24, Y+13	; 0x0d
    1538:	9e 85       	ldd	r25, Y+14	; 0x0e
    153a:	28 23       	and	r18, r24
    153c:	39 23       	and	r19, r25
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	9e 85       	ldd	r25, Y+14	; 0x0e
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	71 f4       	brne	.+28     	; 0x1564 <xEventGroupSync+0x14a>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1548:	eb 81       	ldd	r30, Y+3	; 0x03
    154a:	fc 81       	ldd	r31, Y+4	; 0x04
    154c:	20 81       	ld	r18, Z
    154e:	31 81       	ldd	r19, Z+1	; 0x01
    1550:	8d 85       	ldd	r24, Y+13	; 0x0d
    1552:	9e 85       	ldd	r25, Y+14	; 0x0e
    1554:	80 95       	com	r24
    1556:	90 95       	com	r25
    1558:	82 23       	and	r24, r18
    155a:	93 23       	and	r25, r19
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	90 70       	andi	r25, 0x00	; 0
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
}
    157a:	60 96       	adiw	r28, 0x10	; 16
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	63 97       	sbiw	r28, 0x13	; 19
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	9d 87       	std	Y+13, r25	; 0x0d
    15a6:	8c 87       	std	Y+12, r24	; 0x0c
    15a8:	7f 87       	std	Y+15, r23	; 0x0f
    15aa:	6e 87       	std	Y+14, r22	; 0x0e
    15ac:	48 8b       	std	Y+16, r20	; 0x10
    15ae:	29 8b       	std	Y+17, r18	; 0x11
    15b0:	1b 8b       	std	Y+19, r17	; 0x13
    15b2:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = xEventGroup;
    15b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b8:	9b 87       	std	Y+11, r25	; 0x0b
    15ba:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    15bc:	1f 82       	std	Y+7, r1	; 0x07
    15be:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    15c0:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    15c2:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    15c6:	ea 85       	ldd	r30, Y+10	; 0x0a
    15c8:	fb 85       	ldd	r31, Y+11	; 0x0b
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	2e 85       	ldd	r18, Y+14	; 0x0e
    15d8:	3f 85       	ldd	r19, Y+15	; 0x0f
    15da:	b9 01       	movw	r22, r18
    15dc:	49 89       	ldd	r20, Y+17	; 0x11
    15de:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <prvTestWaitCondition>
    15e2:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	88 23       	and	r24, r24
    15e8:	c1 f0       	breq	.+48     	; 0x161a <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	99 87       	std	Y+9, r25	; 0x09
    15f0:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    15f2:	1b 8a       	std	Y+19, r1	; 0x13
    15f4:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    15f6:	88 89       	ldd	r24, Y+16	; 0x10
    15f8:	88 23       	and	r24, r24
    15fa:	e9 f1       	breq	.+122    	; 0x1676 <xEventGroupWaitBits+0xea>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    15fc:	ea 85       	ldd	r30, Y+10	; 0x0a
    15fe:	fb 85       	ldd	r31, Y+11	; 0x0b
    1600:	20 81       	ld	r18, Z
    1602:	31 81       	ldd	r19, Z+1	; 0x01
    1604:	8e 85       	ldd	r24, Y+14	; 0x0e
    1606:	9f 85       	ldd	r25, Y+15	; 0x0f
    1608:	80 95       	com	r24
    160a:	90 95       	com	r25
    160c:	82 23       	and	r24, r18
    160e:	93 23       	and	r25, r19
    1610:	ea 85       	ldd	r30, Y+10	; 0x0a
    1612:	fb 85       	ldd	r31, Y+11	; 0x0b
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
    1618:	2e c0       	rjmp	.+92     	; 0x1676 <xEventGroupWaitBits+0xea>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    161a:	8a 89       	ldd	r24, Y+18	; 0x12
    161c:	9b 89       	ldd	r25, Y+19	; 0x13
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	39 f4       	brne	.+14     	; 0x1630 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	99 87       	std	Y+9, r25	; 0x09
    1628:	88 87       	std	Y+8, r24	; 0x08
			xTimeoutOccurred = pdTRUE;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	23 c0       	rjmp	.+70     	; 0x1676 <xEventGroupWaitBits+0xea>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    1630:	88 89       	ldd	r24, Y+16	; 0x10
    1632:	88 23       	and	r24, r24
    1634:	29 f0       	breq	.+10     	; 0x1640 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    1636:	8e 81       	ldd	r24, Y+6	; 0x06
    1638:	9f 81       	ldd	r25, Y+7	; 0x07
    163a:	91 60       	ori	r25, 0x01	; 1
    163c:	9f 83       	std	Y+7, r25	; 0x07
    163e:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    1640:	89 89       	ldd	r24, Y+17	; 0x11
    1642:	88 23       	and	r24, r24
    1644:	29 f0       	breq	.+10     	; 0x1650 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	9f 81       	ldd	r25, Y+7	; 0x07
    164a:	94 60       	ori	r25, 0x04	; 4
    164c:	9f 83       	std	Y+7, r25	; 0x07
    164e:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1650:	8a 85       	ldd	r24, Y+10	; 0x0a
    1652:	9b 85       	ldd	r25, Y+11	; 0x0b
    1654:	bc 01       	movw	r22, r24
    1656:	6e 5f       	subi	r22, 0xFE	; 254
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	2e 85       	ldd	r18, Y+14	; 0x0e
    165c:	3f 85       	ldd	r19, Y+15	; 0x0f
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	28 2b       	or	r18, r24
    1664:	39 2b       	or	r19, r25
    1666:	4a 89       	ldd	r20, Y+18	; 0x12
    1668:	5b 89       	ldd	r21, Y+19	; 0x13
    166a:	cb 01       	movw	r24, r22
    166c:	b9 01       	movw	r22, r18
    166e:	0e 94 b6 2a 	call	0x556c	; 0x556c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    1672:	19 86       	std	Y+9, r1	; 0x09
    1674:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    1676:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    167a:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    167c:	8a 89       	ldd	r24, Y+18	; 0x12
    167e:	9b 89       	ldd	r25, Y+19	; 0x13
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	09 f4       	brne	.+2      	; 0x1686 <xEventGroupWaitBits+0xfa>
    1684:	3c c0       	rjmp	.+120    	; 0x16fe <xEventGroupWaitBits+0x172>
	{
		if( xAlreadyYielded == pdFALSE )
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	88 23       	and	r24, r24
    168a:	11 f4       	brne	.+4      	; 0x1690 <xEventGroupWaitBits+0x104>
		{
			portYIELD_WITHIN_API();
    168c:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1690:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <uxTaskResetEventItemValue>
    1694:	99 87       	std	Y+9, r25	; 0x09
    1696:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1698:	88 85       	ldd	r24, Y+8	; 0x08
    169a:	99 85       	ldd	r25, Y+9	; 0x09
    169c:	80 70       	andi	r24, 0x00	; 0
    169e:	92 70       	andi	r25, 0x02	; 2
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	41 f5       	brne	.+80     	; 0x16f4 <xEventGroupWaitBits+0x168>
		{
			taskENTER_CRITICAL();
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    16aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    16ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	99 87       	std	Y+9, r25	; 0x09
    16b4:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    16b6:	88 85       	ldd	r24, Y+8	; 0x08
    16b8:	99 85       	ldd	r25, Y+9	; 0x09
    16ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    16bc:	3f 85       	ldd	r19, Y+15	; 0x0f
    16be:	b9 01       	movw	r22, r18
    16c0:	49 89       	ldd	r20, Y+17	; 0x11
    16c2:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <prvTestWaitCondition>
    16c6:	88 23       	and	r24, r24
    16c8:	89 f0       	breq	.+34     	; 0x16ec <xEventGroupWaitBits+0x160>
				{
					if( xClearOnExit != pdFALSE )
    16ca:	88 89       	ldd	r24, Y+16	; 0x10
    16cc:	88 23       	and	r24, r24
    16ce:	71 f0       	breq	.+28     	; 0x16ec <xEventGroupWaitBits+0x160>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    16d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    16d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    16d4:	20 81       	ld	r18, Z
    16d6:	31 81       	ldd	r19, Z+1	; 0x01
    16d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16da:	9f 85       	ldd	r25, Y+15	; 0x0f
    16dc:	80 95       	com	r24
    16de:	90 95       	com	r25
    16e0:	82 23       	and	r24, r18
    16e2:	93 23       	and	r25, r19
    16e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    16e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	8b 83       	std	Y+3, r24	; 0x03
			}
			taskEXIT_CRITICAL();
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    16f4:	88 85       	ldd	r24, Y+8	; 0x08
    16f6:	99 85       	ldd	r25, Y+9	; 0x09
    16f8:	90 70       	andi	r25, 0x00	; 0
    16fa:	99 87       	std	Y+9, r25	; 0x09
    16fc:	88 87       	std	Y+8, r24	; 0x08
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
    16fe:	88 85       	ldd	r24, Y+8	; 0x08
    1700:	99 85       	ldd	r25, Y+9	; 0x09
}
    1702:	63 96       	adiw	r28, 0x13	; 19
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	28 97       	sbiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	78 87       	std	Y+8, r23	; 0x08
    1732:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = xEventGroup;
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1742:	eb 81       	ldd	r30, Y+3	; 0x03
    1744:	fc 81       	ldd	r31, Y+4	; 0x04
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    174e:	eb 81       	ldd	r30, Y+3	; 0x03
    1750:	fc 81       	ldd	r31, Y+4	; 0x04
    1752:	20 81       	ld	r18, Z
    1754:	31 81       	ldd	r19, Z+1	; 0x01
    1756:	8f 81       	ldd	r24, Y+7	; 0x07
    1758:	98 85       	ldd	r25, Y+8	; 0x08
    175a:	80 95       	com	r24
    175c:	90 95       	com	r25
    175e:	82 23       	and	r24, r18
    1760:	93 23       	and	r25, r19
    1762:	eb 81       	ldd	r30, Y+3	; 0x03
    1764:	fc 81       	ldd	r31, Y+4	; 0x04
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1772:	28 96       	adiw	r28, 0x08	; 8
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	27 97       	sbiw	r28, 0x07	; 7
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	9f 83       	std	Y+7, r25	; 0x07
    179a:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
    179c:	8e 81       	ldd	r24, Y+6	; 0x06
    179e:	9f 81       	ldd	r25, Y+7	; 0x07
    17a0:	9c 83       	std	Y+4, r25	; 0x04
    17a2:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    17a4:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    17a6:	eb 81       	ldd	r30, Y+3	; 0x03
    17a8:	fc 81       	ldd	r31, Y+4	; 0x04
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    17b6:	27 96       	adiw	r28, 0x07	; 7
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	65 97       	sbiw	r28, 0x15	; 21
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	9b 8b       	std	Y+19, r25	; 0x13
    17de:	8a 8b       	std	Y+18, r24	; 0x12
    17e0:	7d 8b       	std	Y+21, r23	; 0x15
    17e2:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    17e4:	19 86       	std	Y+9, r1	; 0x09
    17e6:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = xEventGroup;
    17e8:	8a 89       	ldd	r24, Y+18	; 0x12
    17ea:	9b 89       	ldd	r25, Y+19	; 0x13
    17ec:	9b 83       	std	Y+3, r25	; 0x03
    17ee:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    17f0:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
    17f6:	02 96       	adiw	r24, 0x02	; 2
    17f8:	9b 87       	std	Y+11, r25	; 0x0b
    17fa:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    17fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1800:	03 96       	adiw	r24, 0x03	; 3
    1802:	9d 87       	std	Y+13, r25	; 0x0d
    1804:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    1806:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    180a:	ea 85       	ldd	r30, Y+10	; 0x0a
    180c:	fb 85       	ldd	r31, Y+11	; 0x0b
    180e:	85 81       	ldd	r24, Z+5	; 0x05
    1810:	96 81       	ldd	r25, Z+6	; 0x06
    1812:	99 8b       	std	Y+17, r25	; 0x11
    1814:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    1816:	ea 81       	ldd	r30, Y+2	; 0x02
    1818:	fb 81       	ldd	r31, Y+3	; 0x03
    181a:	20 81       	ld	r18, Z
    181c:	31 81       	ldd	r19, Z+1	; 0x01
    181e:	8c 89       	ldd	r24, Y+20	; 0x14
    1820:	9d 89       	ldd	r25, Y+21	; 0x15
    1822:	82 2b       	or	r24, r18
    1824:	93 2b       	or	r25, r19
    1826:	ea 81       	ldd	r30, Y+2	; 0x02
    1828:	fb 81       	ldd	r31, Y+3	; 0x03
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	59 c0       	rjmp	.+178    	; 0x18e2 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    1830:	e8 89       	ldd	r30, Y+16	; 0x10
    1832:	f9 89       	ldd	r31, Y+17	; 0x11
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	9f 87       	std	Y+15, r25	; 0x0f
    183a:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    183c:	e8 89       	ldd	r30, Y+16	; 0x10
    183e:	f9 89       	ldd	r31, Y+17	; 0x11
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	9f 83       	std	Y+7, r25	; 0x07
    1846:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    1848:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    184a:	8e 81       	ldd	r24, Y+6	; 0x06
    184c:	9f 81       	ldd	r25, Y+7	; 0x07
    184e:	80 70       	andi	r24, 0x00	; 0
    1850:	9d 83       	std	Y+5, r25	; 0x05
    1852:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	90 70       	andi	r25, 0x00	; 0
    185a:	9f 83       	std	Y+7, r25	; 0x07
    185c:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	80 70       	andi	r24, 0x00	; 0
    1864:	94 70       	andi	r25, 0x04	; 4
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	69 f4       	brne	.+26     	; 0x1884 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    186a:	ea 81       	ldd	r30, Y+2	; 0x02
    186c:	fb 81       	ldd	r31, Y+3	; 0x03
    186e:	20 81       	ld	r18, Z
    1870:	31 81       	ldd	r19, Z+1	; 0x01
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	82 23       	and	r24, r18
    1878:	93 23       	and	r25, r19
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	91 f0       	breq	.+36     	; 0x18a2 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1884:	ea 81       	ldd	r30, Y+2	; 0x02
    1886:	fb 81       	ldd	r31, Y+3	; 0x03
    1888:	20 81       	ld	r18, Z
    188a:	31 81       	ldd	r19, Z+1	; 0x01
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	9f 81       	ldd	r25, Y+7	; 0x07
    1890:	28 23       	and	r18, r24
    1892:	39 23       	and	r19, r25
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	9f 81       	ldd	r25, Y+7	; 0x07
    1898:	28 17       	cp	r18, r24
    189a:	39 07       	cpc	r19, r25
    189c:	11 f4       	brne	.+4      	; 0x18a2 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	88 23       	and	r24, r24
    18a6:	c9 f0       	breq	.+50     	; 0x18da <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	80 70       	andi	r24, 0x00	; 0
    18ae:	91 70       	andi	r25, 0x01	; 1
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	41 f0       	breq	.+16     	; 0x18c4 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    18b4:	88 85       	ldd	r24, Y+8	; 0x08
    18b6:	99 85       	ldd	r25, Y+9	; 0x09
    18b8:	2e 81       	ldd	r18, Y+6	; 0x06
    18ba:	3f 81       	ldd	r19, Y+7	; 0x07
    18bc:	82 2b       	or	r24, r18
    18be:	93 2b       	or	r25, r19
    18c0:	99 87       	std	Y+9, r25	; 0x09
    18c2:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    18c4:	ea 81       	ldd	r30, Y+2	; 0x02
    18c6:	fb 81       	ldd	r31, Y+3	; 0x03
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	9c 01       	movw	r18, r24
    18ce:	32 60       	ori	r19, 0x02	; 2
    18d0:	88 89       	ldd	r24, Y+16	; 0x10
    18d2:	99 89       	ldd	r25, Y+17	; 0x11
    18d4:	b9 01       	movw	r22, r18
    18d6:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    18da:	8e 85       	ldd	r24, Y+14	; 0x0e
    18dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    18de:	99 8b       	std	Y+17, r25	; 0x11
    18e0:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    18e2:	28 89       	ldd	r18, Y+16	; 0x10
    18e4:	39 89       	ldd	r19, Y+17	; 0x11
    18e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    18e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    18ea:	28 17       	cp	r18, r24
    18ec:	39 07       	cpc	r19, r25
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <xEventGroupSetBits+0x12a>
    18f0:	9f cf       	rjmp	.-194    	; 0x1830 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    18f2:	ea 81       	ldd	r30, Y+2	; 0x02
    18f4:	fb 81       	ldd	r31, Y+3	; 0x03
    18f6:	20 81       	ld	r18, Z
    18f8:	31 81       	ldd	r19, Z+1	; 0x01
    18fa:	88 85       	ldd	r24, Y+8	; 0x08
    18fc:	99 85       	ldd	r25, Y+9	; 0x09
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	82 23       	and	r24, r18
    1904:	93 23       	and	r25, r19
    1906:	ea 81       	ldd	r30, Y+2	; 0x02
    1908:	fb 81       	ldd	r31, Y+3	; 0x03
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    190e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    1912:	ea 81       	ldd	r30, Y+2	; 0x02
    1914:	fb 81       	ldd	r31, Y+3	; 0x03
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
}
    191a:	65 96       	adiw	r28, 0x15	; 21
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <vEventGroupDelete+0x6>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <vEventGroupDelete+0x8>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <vEventGroupDelete+0xa>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = xEventGroup;
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	02 96       	adiw	r24, 0x02	; 2
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1950:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
    1954:	08 c0       	rjmp	.+16     	; 0x1966 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1956:	e9 81       	ldd	r30, Y+1	; 0x01
    1958:	fa 81       	ldd	r31, Y+2	; 0x02
    195a:	85 81       	ldd	r24, Z+5	; 0x05
    195c:	96 81       	ldd	r25, Z+6	; 0x06
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	72 e0       	ldi	r23, 0x02	; 2
    1962:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	80 81       	ld	r24, Z
    196c:	88 23       	and	r24, r24
    196e:	99 f7       	brne	.-26     	; 0x1956 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    1978:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
}
    197c:	26 96       	adiw	r28, 0x06	; 6
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <vEventGroupSetBitsCallback+0x6>
    1994:	00 d0       	rcall	.+0      	; 0x1996 <vEventGroupSetBitsCallback+0x8>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <vEventGroupSetBitsCallback+0xa>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	4b 83       	std	Y+3, r20	; 0x03
    19a2:	5c 83       	std	Y+4, r21	; 0x04
    19a4:	6d 83       	std	Y+5, r22	; 0x05
    19a6:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	2b 81       	ldd	r18, Y+3	; 0x03
    19ae:	3c 81       	ldd	r19, Y+4	; 0x04
    19b0:	b9 01       	movw	r22, r18
    19b2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <xEventGroupSetBits>
}
    19b6:	26 96       	adiw	r28, 0x06	; 6
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <vEventGroupClearBitsCallback+0x6>
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <vEventGroupClearBitsCallback+0x8>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <vEventGroupClearBitsCallback+0xa>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	4b 83       	std	Y+3, r20	; 0x03
    19dc:	5c 83       	std	Y+4, r21	; 0x04
    19de:	6d 83       	std	Y+5, r22	; 0x05
    19e0:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	2b 81       	ldd	r18, Y+3	; 0x03
    19e8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ea:	b9 01       	movw	r22, r18
    19ec:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xEventGroupClearBits>
}
    19f0:	26 96       	adiw	r28, 0x06	; 6
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <prvTestWaitCondition+0x6>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <prvTestWaitCondition+0x8>
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <prvTestWaitCondition+0xa>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9b 83       	std	Y+3, r25	; 0x03
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    1a14:	7d 83       	std	Y+5, r23	; 0x05
    1a16:	6c 83       	std	Y+4, r22	; 0x04
    1a18:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    1a1a:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    1a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1e:	88 23       	and	r24, r24
    1a20:	59 f4       	brne	.+22     	; 0x1a38 <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	2c 81       	ldd	r18, Y+4	; 0x04
    1a28:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2a:	82 23       	and	r24, r18
    1a2c:	93 23       	and	r25, r19
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	0d c0       	rjmp	.+26     	; 0x1a52 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1a38:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a40:	28 23       	and	r18, r24
    1a42:	39 23       	and	r19, r25
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	9d 81       	ldd	r25, Y+5	; 0x05
    1a48:	28 17       	cp	r18, r24
    1a4a:	39 07       	cpc	r19, r25
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a54:	26 96       	adiw	r28, 0x06	; 6
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <pvPortMalloc+0x6>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <pvPortMalloc+0x8>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1a76:	1a 82       	std	Y+2, r1	; 0x02
    1a78:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1a7a:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1a7e:	80 91 7c 00 	lds	r24, 0x007C
    1a82:	90 91 7d 00 	lds	r25, 0x007D
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	31 f4       	brne	.+12     	; 0x1a96 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1a8a:	8f e7       	ldi	r24, 0x7F	; 127
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	90 93 7d 00 	sts	0x007D, r25
    1a92:	80 93 7c 00 	sts	0x007C, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1a96:	80 91 7a 00 	lds	r24, 0x007A
    1a9a:	90 91 7b 00 	lds	r25, 0x007B
    1a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa2:	82 0f       	add	r24, r18
    1aa4:	93 1f       	adc	r25, r19
    1aa6:	25 e0       	ldi	r18, 0x05	; 5
    1aa8:	8b 3d       	cpi	r24, 0xDB	; 219
    1aaa:	92 07       	cpc	r25, r18
    1aac:	38 f5       	brcc	.+78     	; 0x1afc <pvPortMalloc+0x96>
    1aae:	20 91 7a 00 	lds	r18, 0x007A
    1ab2:	30 91 7b 00 	lds	r19, 0x007B
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	28 0f       	add	r18, r24
    1abc:	39 1f       	adc	r19, r25
    1abe:	80 91 7a 00 	lds	r24, 0x007A
    1ac2:	90 91 7b 00 	lds	r25, 0x007B
    1ac6:	82 17       	cp	r24, r18
    1ac8:	93 07       	cpc	r25, r19
    1aca:	c0 f4       	brcc	.+48     	; 0x1afc <pvPortMalloc+0x96>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1acc:	20 91 7c 00 	lds	r18, 0x007C
    1ad0:	30 91 7d 00 	lds	r19, 0x007D
    1ad4:	80 91 7a 00 	lds	r24, 0x007A
    1ad8:	90 91 7b 00 	lds	r25, 0x007B
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1ae4:	20 91 7a 00 	lds	r18, 0x007A
    1ae8:	30 91 7b 00 	lds	r19, 0x007B
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	90 93 7b 00 	sts	0x007B, r25
    1af8:	80 93 7a 00 	sts	0x007A, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1afc:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <vPortFree+0x6>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    1b32:	10 92 7b 00 	sts	0x007B, r1
    1b36:	10 92 7a 00 	sts	0x007A, r1
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    1b48:	20 91 7a 00 	lds	r18, 0x007A
    1b4c:	30 91 7b 00 	lds	r19, 0x007B
    1b50:	8b ed       	ldi	r24, 0xDB	; 219
    1b52:	95 e0       	ldi	r25, 0x05	; 5
    1b54:	82 1b       	sub	r24, r18
    1b56:	93 0b       	sbc	r25, r19
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <KeyPad_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_PORT_DIR = (0b11100000u);
    1b66:	e4 e3       	ldi	r30, 0x34	; 52
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 ee       	ldi	r24, 0xE0	; 224
    1b6c:	80 83       	st	Z, r24
	KEYPAD_PORT_OUT = (~(0b11100000u));
    1b6e:	e5 e3       	ldi	r30, 0x35	; 53
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	8f e1       	ldi	r24, 0x1F	; 31
    1b74:	80 83       	st	Z, r24
}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <KeyPad_getPressedKey>:



uint8 KeyPad_getPressedKey(void)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	0f 92       	push	r0
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
	for(col=0;col<N_col;col++) /* loop for columns */
    1b86:	10 92 cc 06 	sts	0x06CC, r1
    1b8a:	56 c0       	rjmp	.+172    	; 0x1c38 <KeyPad_getPressedKey+0xbc>
	{
		/*
		 * each time only one of the column pins will be output and
		 * the rest will be input pins include the row pins
		 */
		KEYPAD_PORT_DIR = (0b00100000<<col);
    1b8c:	e4 e3       	ldi	r30, 0x34	; 52
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 91 cc 06 	lds	r24, 0x06CC
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	80 e2       	ldi	r24, 0x20	; 32
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <KeyPad_getPressedKey+0x26>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	2a 95       	dec	r18
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <KeyPad_getPressedKey+0x22>
    1ba6:	80 83       	st	Z, r24

		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(0b00100000<<col));
    1ba8:	e5 e3       	ldi	r30, 0x35	; 53
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 91 cc 06 	lds	r24, 0x06CC
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	80 e2       	ldi	r24, 0x20	; 32
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <KeyPad_getPressedKey+0x44>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <KeyPad_getPressedKey+0x40>
    1bc4:	80 95       	com	r24
    1bc6:	80 83       	st	Z, r24
		for(row=2;row<5;row++) /* loop for rows */
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	80 93 cd 06 	sts	0x06CD, r24
    1bce:	2b c0       	rjmp	.+86     	; 0x1c26 <KeyPad_getPressedKey+0xaa>
		{
			if(Get_Bit(KEYPAD_PORT_IN,row)==0) /* if the switch is press in this row */
    1bd0:	e3 e3       	ldi	r30, 0x33	; 51
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	80 91 cd 06 	lds	r24, 0x06CD
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a9 01       	movw	r20, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <KeyPad_getPressedKey+0x6e>
    1be6:	55 95       	asr	r21
    1be8:	47 95       	ror	r20
    1bea:	8a 95       	dec	r24
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <KeyPad_getPressedKey+0x6a>
    1bee:	ca 01       	movw	r24, r20
    1bf0:	81 70       	andi	r24, 0x01	; 1
    1bf2:	90 70       	andi	r25, 0x00	; 0
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	91 f4       	brne	.+36     	; 0x1c1c <KeyPad_getPressedKey+0xa0>
				return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 4 && N_row == 4)
				return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
#elif (N_col == 3 && N_row == 3)
				//while(Get_Bit(KEYPAD_PORT_IN,row)==0);
				return KeyPad_3x3_adjustKeyNumber(3*(row-2)+col+1);
    1bf8:	80 91 cd 06 	lds	r24, 0x06CD
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	c9 01       	movw	r24, r18
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	82 0f       	add	r24, r18
    1c08:	93 1f       	adc	r25, r19
    1c0a:	98 2f       	mov	r25, r24
    1c0c:	80 91 cc 06 	lds	r24, 0x06CC
    1c10:	89 0f       	add	r24, r25
    1c12:	85 50       	subi	r24, 0x05	; 5
    1c14:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <KeyPad_3x3_adjustKeyNumber>
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	15 c0       	rjmp	.+42     	; 0x1c46 <KeyPad_getPressedKey+0xca>
		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(0b00100000<<col));
		for(row=2;row<5;row++) /* loop for rows */
    1c1c:	80 91 cd 06 	lds	r24, 0x06CD
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 cd 06 	sts	0x06CD, r24
    1c26:	80 91 cd 06 	lds	r24, 0x06CD
    1c2a:	85 30       	cpi	r24, 0x05	; 5
    1c2c:	88 f2       	brcs	.-94     	; 0x1bd0 <KeyPad_getPressedKey+0x54>



uint8 KeyPad_getPressedKey(void)
{
	for(col=0;col<N_col;col++) /* loop for columns */
    1c2e:	80 91 cc 06 	lds	r24, 0x06CC
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	80 93 cc 06 	sts	0x06CC, r24
    1c38:	80 91 cc 06 	lds	r24, 0x06CC
    1c3c:	83 30       	cpi	r24, 0x03	; 3
    1c3e:	08 f4       	brcc	.+2      	; 0x1c42 <KeyPad_getPressedKey+0xc6>
    1c40:	a5 cf       	rjmp	.-182    	; 0x1b8c <KeyPad_getPressedKey+0x10>
				return KeyPad_3x3_adjustKeyNumber(3*(row-2)+col+1);
#endif
			}
		}
	}
	return 'a';
    1c42:	51 e6       	ldi	r21, 0x61	; 97
    1c44:	59 83       	std	Y+1, r21	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <KeyPad_3x3_adjustKeyNumber>:
	}
}
#elif (N_row == 3 && N_col == 3)

static uint8 KeyPad_3x3_adjustKeyNumber(uint8 button_number)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <KeyPad_3x3_adjustKeyNumber+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <KeyPad_3x3_adjustKeyNumber+0x8>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	3c 83       	std	Y+4, r19	; 0x04
    1c66:	2b 83       	std	Y+3, r18	; 0x03
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	85 30       	cpi	r24, 0x05	; 5
    1c6e:	91 05       	cpc	r25, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <KeyPad_3x3_adjustKeyNumber+0x24>
    1c72:	41 c0       	rjmp	.+130    	; 0x1cf6 <KeyPad_3x3_adjustKeyNumber+0xa6>
    1c74:	2b 81       	ldd	r18, Y+3	; 0x03
    1c76:	3c 81       	ldd	r19, Y+4	; 0x04
    1c78:	26 30       	cpi	r18, 0x06	; 6
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	dc f4       	brge	.+54     	; 0x1cb4 <KeyPad_3x3_adjustKeyNumber+0x64>
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	91 05       	cpc	r25, r1
    1c86:	71 f1       	breq	.+92     	; 0x1ce4 <KeyPad_3x3_adjustKeyNumber+0x94>
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	23 30       	cpi	r18, 0x03	; 3
    1c8e:	31 05       	cpc	r19, r1
    1c90:	34 f4       	brge	.+12     	; 0x1c9e <KeyPad_3x3_adjustKeyNumber+0x4e>
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	09 f1       	breq	.+66     	; 0x1cde <KeyPad_3x3_adjustKeyNumber+0x8e>
    1c9c:	3b c0       	rjmp	.+118    	; 0x1d14 <KeyPad_3x3_adjustKeyNumber+0xc4>
    1c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca2:	23 30       	cpi	r18, 0x03	; 3
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	09 f1       	breq	.+66     	; 0x1cea <KeyPad_3x3_adjustKeyNumber+0x9a>
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	91 05       	cpc	r25, r1
    1cb0:	f9 f0       	breq	.+62     	; 0x1cf0 <KeyPad_3x3_adjustKeyNumber+0xa0>
    1cb2:	30 c0       	rjmp	.+96     	; 0x1d14 <KeyPad_3x3_adjustKeyNumber+0xc4>
    1cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb8:	27 30       	cpi	r18, 0x07	; 7
    1cba:	31 05       	cpc	r19, r1
    1cbc:	11 f1       	breq	.+68     	; 0x1d02 <KeyPad_3x3_adjustKeyNumber+0xb2>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	87 30       	cpi	r24, 0x07	; 7
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	d4 f0       	brlt	.+52     	; 0x1cfc <KeyPad_3x3_adjustKeyNumber+0xac>
    1cc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ccc:	28 30       	cpi	r18, 0x08	; 8
    1cce:	31 05       	cpc	r19, r1
    1cd0:	d9 f0       	breq	.+54     	; 0x1d08 <KeyPad_3x3_adjustKeyNumber+0xb8>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	89 30       	cpi	r24, 0x09	; 9
    1cd8:	91 05       	cpc	r25, r1
    1cda:	c9 f0       	breq	.+50     	; 0x1d0e <KeyPad_3x3_adjustKeyNumber+0xbe>
    1cdc:	1b c0       	rjmp	.+54     	; 0x1d14 <KeyPad_3x3_adjustKeyNumber+0xc4>
	{
	case 1: return 1;
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	1a c0       	rjmp	.+52     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 2: return 2;
    1ce4:	22 e0       	ldi	r18, 0x02	; 2
    1ce6:	2a 83       	std	Y+2, r18	; 0x02
    1ce8:	17 c0       	rjmp	.+46     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 3: return 3;
    1cea:	33 e0       	ldi	r19, 0x03	; 3
    1cec:	3a 83       	std	Y+2, r19	; 0x02
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 4: return 4; // ASCII Code of %
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
    1cf4:	11 c0       	rjmp	.+34     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 5: return 5;
    1cf6:	95 e0       	ldi	r25, 0x05	; 5
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	0e c0       	rjmp	.+28     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 6: return 6;
    1cfc:	26 e0       	ldi	r18, 0x06	; 6
    1cfe:	2a 83       	std	Y+2, r18	; 0x02
    1d00:	0b c0       	rjmp	.+22     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 7: return 7;
    1d02:	37 e0       	ldi	r19, 0x07	; 7
    1d04:	3a 83       	std	Y+2, r19	; 0x02
    1d06:	08 c0       	rjmp	.+16     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 8: return 8; /* ASCII Code of '*' */
    1d08:	88 e0       	ldi	r24, 0x08	; 8
    1d0a:	8a 83       	std	Y+2, r24	; 0x02
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	case 9: return 9;
    1d0e:	99 e0       	ldi	r25, 0x09	; 9
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <KeyPad_3x3_adjustKeyNumber+0xc8>
	break;
	default: return button_number;
    1d14:	29 81       	ldd	r18, Y+1	; 0x01
    1d16:	2a 83       	std	Y+2, r18	; 0x02
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <enableTrigger>:
/////////////////////////////////////////////////////////////////////
//	lcd enable triggering function to make lcd aware about command or
//   data changes.
////////////////////////////////////////////////////////////////////
void enableTrigger(void)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	6c 97       	sbiw	r28, 0x1c	; 28
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61

	CLR_BIT(PORTB,2);
    1d3c:	a8 e3       	ldi	r26, 0x38	; 56
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e8 e3       	ldi	r30, 0x38	; 56
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8b 7f       	andi	r24, 0xFB	; 251
    1d48:	8c 93       	st	X, r24
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 e8       	ldi	r26, 0x80	; 128
    1d50:	bf e3       	ldi	r27, 0x3F	; 63
    1d52:	89 8f       	std	Y+25, r24	; 0x19
    1d54:	9a 8f       	std	Y+26, r25	; 0x1a
    1d56:	ab 8f       	std	Y+27, r26	; 0x1b
    1d58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a ef       	ldi	r20, 0xFA	; 250
    1d68:	54 e4       	ldi	r21, 0x44	; 68
    1d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8d 8b       	std	Y+21, r24	; 0x15
    1d74:	9e 8b       	std	Y+22, r25	; 0x16
    1d76:	af 8b       	std	Y+23, r26	; 0x17
    1d78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d80:	98 8d       	ldd	r25, Y+24	; 0x18
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <enableTrigger+0x74>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <enableTrigger+0xf2>
	else if (__tmp > 65535)
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <enableTrigger+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	69 8d       	ldd	r22, Y+25	; 0x19
    1db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9c 8b       	std	Y+20, r25	; 0x14
    1dda:	8b 8b       	std	Y+19, r24	; 0x13
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <enableTrigger+0xd4>
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9a 8b       	std	Y+18, r25	; 0x12
    1de4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de6:	89 89       	ldd	r24, Y+17	; 0x11
    1de8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <enableTrigger+0xc2>
    1dee:	9a 8b       	std	Y+18, r25	; 0x12
    1df0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <enableTrigger+0xb6>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <enableTrigger+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9c 8b       	std	Y+20, r25	; 0x14
    1e18:	8b 8b       	std	Y+19, r24	; 0x13
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	98 8b       	std	Y+16, r25	; 0x10
    1e20:	8f 87       	std	Y+15, r24	; 0x0f
    1e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e24:	98 89       	ldd	r25, Y+16	; 0x10
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <enableTrigger+0xfe>
    1e2a:	98 8b       	std	Y+16, r25	; 0x10
    1e2c:	8f 87       	std	Y+15, r24	; 0x0f
	
	_delay_ms(1);

	SET_BIT(PORTB,2);
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	84 60       	ori	r24, 0x04	; 4
    1e3a:	8c 93       	st	X, r24
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 ec       	ldi	r26, 0xC0	; 192
    1e42:	b0 e4       	ldi	r27, 0x40	; 64
    1e44:	8b 87       	std	Y+11, r24	; 0x0b
    1e46:	9c 87       	std	Y+12, r25	; 0x0c
    1e48:	ad 87       	std	Y+13, r26	; 0x0d
    1e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8f 83       	std	Y+7, r24	; 0x07
    1e66:	98 87       	std	Y+8, r25	; 0x08
    1e68:	a9 87       	std	Y+9, r26	; 0x09
    1e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <enableTrigger+0x166>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <enableTrigger+0x1e4>
	else if (__tmp > 65535)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <enableTrigger+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <enableTrigger+0x1c6>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <enableTrigger+0x1b4>
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <enableTrigger+0x1a8>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <enableTrigger+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <enableTrigger+0x1f0>
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(6);


}
    1f20:	6c 96       	adiw	r28, 0x1c	; 28
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <lcd_init>:
///////////////////////////////////////////////////////////////////////////////////////
// LCD initialization API : set portB from pinB.4 to pinB.7 as o/p for data and commands 
//							 and pinB.0 to pinB.2 o/p for control pins 
//////////////////////////////////////////////////////////////////////////////////////
void lcd_init(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62

	DDRB=0xff; // init port B as O/P port 
    1f3a:	e7 e3       	ldi	r30, 0x37	; 55
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	80 83       	st	Z, r24
	PORTB=0x04; // activate LCD enable 
    1f42:	e8 e3       	ldi	r30, 0x38	; 56
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	84 e0       	ldi	r24, 0x04	; 4
    1f48:	80 83       	st	Z, r24

	lcd_sendCommand(0x33); // 4-bit mode 
    1f4a:	83 e3       	ldi	r24, 0x33	; 51
    1f4c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>
	lcd_sendCommand (0x32);
    1f50:	82 e3       	ldi	r24, 0x32	; 50
    1f52:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>
	lcd_sendCommand (0x28);
    1f56:	88 e2       	ldi	r24, 0x28	; 40
    1f58:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>



	lcd_sendCommand(0x0c); // turn on lcd 
    1f5c:	8c e0       	ldi	r24, 0x0C	; 12
    1f5e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>

		
}
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <lcd_sendCommand>:


void lcd_sendCommand(unsigned char cmd)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <lcd_sendCommand+0x6>
    1f6e:	0f 92       	push	r0
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char high_nibble , low_nibble ; 		
	
	HIGH_NIBBLE(high_nibble,cmd);
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	80 7f       	andi	r24, 0xF0	; 240
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
	LOW_NIBBLE(low_nibble,cmd);
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	82 95       	swap	r24
    1f80:	80 7f       	andi	r24, 0xF0	; 240
    1f82:	89 83       	std	Y+1, r24	; 0x01

	CLR_BIT(PORTB,0); // to enable command mode 
    1f84:	a8 e3       	ldi	r26, 0x38	; 56
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e8 e3       	ldi	r30, 0x38	; 56
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8e 7f       	andi	r24, 0xFE	; 254
    1f90:	8c 93       	st	X, r24
	CLR_BIT(PORTB,1); // write signal to lcd 
    1f92:	a8 e3       	ldi	r26, 0x38	; 56
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e8 e3       	ldi	r30, 0x38	; 56
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8d 7f       	andi	r24, 0xFD	; 253
    1f9e:	8c 93       	st	X, r24

	PORTB &=0x0f;
    1fa0:	a8 e3       	ldi	r26, 0x38	; 56
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e8 e3       	ldi	r30, 0x38	; 56
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8f 70       	andi	r24, 0x0F	; 15
    1fac:	8c 93       	st	X, r24
	PORTB |=high_nibble;// to send high nibble command  
    1fae:	a8 e3       	ldi	r26, 0x38	; 56
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e8 e3       	ldi	r30, 0x38	; 56
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	90 81       	ld	r25, Z
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	89 2b       	or	r24, r25
    1fbc:	8c 93       	st	X, r24
	enableTrigger(); // triggre lcd enable 
    1fbe:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <enableTrigger>

	PORTB &=0x0f;
    1fc2:	a8 e3       	ldi	r26, 0x38	; 56
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e8 e3       	ldi	r30, 0x38	; 56
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8f 70       	andi	r24, 0x0F	; 15
    1fce:	8c 93       	st	X, r24
	PORTB |=low_nibble; // to send low nibble command 
    1fd0:	a8 e3       	ldi	r26, 0x38	; 56
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e8 e3       	ldi	r30, 0x38	; 56
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	90 81       	ld	r25, Z
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	89 2b       	or	r24, r25
    1fde:	8c 93       	st	X, r24
	enableTrigger();
    1fe0:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <enableTrigger>

}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <lcd_displayChar>:

void lcd_displayChar (unsigned char data)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <lcd_displayChar+0x6>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char high_nibble , low_nibble ;

	SET_BIT(PORTB,0); //  enable data mode 
    1ffe:	a8 e3       	ldi	r26, 0x38	; 56
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e8 e3       	ldi	r30, 0x38	; 56
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	81 60       	ori	r24, 0x01	; 1
    200a:	8c 93       	st	X, r24
	CLR_BIT(PORTB,1); // activate lcd write 
    200c:	a8 e3       	ldi	r26, 0x38	; 56
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e8 e3       	ldi	r30, 0x38	; 56
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8d 7f       	andi	r24, 0xFD	; 253
    2018:	8c 93       	st	X, r24

	HIGH_NIBBLE(high_nibble,data); // get high nibble data 
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	80 7f       	andi	r24, 0xF0	; 240
    201e:	8a 83       	std	Y+2, r24	; 0x02
	LOW_NIBBLE(low_nibble,data); // get low nibble data 
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	82 95       	swap	r24
    2024:	80 7f       	andi	r24, 0xF0	; 240
    2026:	89 83       	std	Y+1, r24	; 0x01
	
	PORTB &= 0x0f;
    2028:	a8 e3       	ldi	r26, 0x38	; 56
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e8 e3       	ldi	r30, 0x38	; 56
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 70       	andi	r24, 0x0F	; 15
    2034:	8c 93       	st	X, r24
	PORTB |=high_nibble;// to send high nibble data  
    2036:	a8 e3       	ldi	r26, 0x38	; 56
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e8 e3       	ldi	r30, 0x38	; 56
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	90 81       	ld	r25, Z
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	89 2b       	or	r24, r25
    2044:	8c 93       	st	X, r24
	enableTrigger(); // triggre lcd enable 
    2046:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <enableTrigger>
	
	PORTB &=0x0f;
    204a:	a8 e3       	ldi	r26, 0x38	; 56
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e8 e3       	ldi	r30, 0x38	; 56
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8f 70       	andi	r24, 0x0F	; 15
    2056:	8c 93       	st	X, r24
	PORTB |=low_nibble; // to send low nibble data 
    2058:	a8 e3       	ldi	r26, 0x38	; 56
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e8 e3       	ldi	r30, 0x38	; 56
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	90 81       	ld	r25, Z
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	89 2b       	or	r24, r25
    2066:	8c 93       	st	X, r24
	enableTrigger();
    2068:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <enableTrigger>
	

}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <lcd_gotoxy>:


void lcd_gotoxy(unsigned char y , unsigned char x )
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <lcd_gotoxy+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <lcd_gotoxy+0x8>
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	8a 83       	std	Y+2, r24	; 0x02
    2088:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char position = 0x80;
    208a:	80 e8       	ldi	r24, 0x80	; 128
    208c:	89 83       	std	Y+1, r24	; 0x01
	 
	switch(y)
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	3d 83       	std	Y+5, r19	; 0x05
    2096:	2c 83       	std	Y+4, r18	; 0x04
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	91 05       	cpc	r25, r1
    20a0:	d1 f0       	breq	.+52     	; 0x20d6 <lcd_gotoxy+0x5e>
    20a2:	2c 81       	ldd	r18, Y+4	; 0x04
    20a4:	3d 81       	ldd	r19, Y+5	; 0x05
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <lcd_gotoxy+0x3e>
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	61 f0       	breq	.+24     	; 0x20cc <lcd_gotoxy+0x54>
    20b4:	20 c0       	rjmp	.+64     	; 0x20f6 <lcd_gotoxy+0x7e>
    20b6:	2c 81       	ldd	r18, Y+4	; 0x04
    20b8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ba:	22 30       	cpi	r18, 0x02	; 2
    20bc:	31 05       	cpc	r19, r1
    20be:	91 f0       	breq	.+36     	; 0x20e4 <lcd_gotoxy+0x6c>
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	9d 81       	ldd	r25, Y+5	; 0x05
    20c4:	83 30       	cpi	r24, 0x03	; 3
    20c6:	91 05       	cpc	r25, r1
    20c8:	91 f0       	breq	.+36     	; 0x20ee <lcd_gotoxy+0x76>
    20ca:	15 c0       	rjmp	.+42     	; 0x20f6 <lcd_gotoxy+0x7e>
	{
		case 0:

			position=position+x;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9b 81       	ldd	r25, Y+3	; 0x03
    20d0:	89 0f       	add	r24, r25
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	10 c0       	rjmp	.+32     	; 0x20f6 <lcd_gotoxy+0x7e>
					
		break;

		case 1:

			position=0xc0;
    20d6:	80 ec       	ldi	r24, 0xC0	; 192
    20d8:	89 83       	std	Y+1, r24	; 0x01
			position=position+x;
    20da:	99 81       	ldd	r25, Y+1	; 0x01
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	89 0f       	add	r24, r25
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	09 c0       	rjmp	.+18     	; 0x20f6 <lcd_gotoxy+0x7e>

		break;

		case 2:

			position=position+x;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	89 0f       	add	r24, r25
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <lcd_gotoxy+0x7e>

		break;

		case 3:
			position=position+x;
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	89 0f       	add	r24, r25
    20f4:	89 83       	std	Y+1, r24	; 0x01
		break;
	
	
	}
	
	lcd_sendCommand(position); 	
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>


}
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <lcd_clrScreen>:


void lcd_clrScreen(void)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62

	lcd_sendCommand(0x01);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <lcd_sendCommand>


}
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <lcd_dispString>:


void lcd_dispString(char * ptr)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <lcd_dispString+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	0a c0       	rjmp	.+20     	; 0x2144 <lcd_dispString+0x24>

	while(* ptr!= '\0')
	{
		lcd_displayChar(* ptr);
    2130:	e9 81       	ldd	r30, Y+1	; 0x01
    2132:	fa 81       	ldd	r31, Y+2	; 0x02
    2134:	80 81       	ld	r24, Z
    2136:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <lcd_displayChar>
		ptr++;
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01


void lcd_dispString(char * ptr)
{

	while(* ptr!= '\0')
    2144:	e9 81       	ldd	r30, Y+1	; 0x01
    2146:	fa 81       	ldd	r31, Y+2	; 0x02
    2148:	80 81       	ld	r24, Z
    214a:	88 23       	and	r24, r24
    214c:	89 f7       	brne	.-30     	; 0x2130 <lcd_dispString+0x10>
		lcd_displayChar(* ptr);
		ptr++;
	
	}

}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <lcd_disp_string_xy>:

void lcd_disp_string_xy(char * ptr , int y , int x)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <lcd_disp_string_xy+0x6>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <lcd_disp_string_xy+0x8>
    2160:	00 d0       	rcall	.+0      	; 0x2162 <lcd_disp_string_xy+0xa>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	7c 83       	std	Y+4, r23	; 0x04
    216c:	6b 83       	std	Y+3, r22	; 0x03
    216e:	5e 83       	std	Y+6, r21	; 0x06
    2170:	4d 83       	std	Y+5, r20	; 0x05

	lcd_gotoxy(y,x);
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9d 81       	ldd	r25, Y+5	; 0x05
    2176:	69 2f       	mov	r22, r25
    2178:	0e 94 3c 10 	call	0x2078	; 0x2078 <lcd_gotoxy>
	lcd_dispString(ptr);
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	0e 94 90 10 	call	0x2120	; 0x2120 <lcd_dispString>

	


}
    2184:	26 96       	adiw	r28, 0x06	; 6
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LED_Init>:
 */

#include "led.h"

void LED_Init(void)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LEDPIN,OUTPUT);
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_SetPinDirection>
	DIO_WritePin(LEDPIN,LOW);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_WritePin>
}
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <LED_Toggle>:

void LED_Toggle(void)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
	PORTA^=(1<<1);
    21bc:	ab e3       	ldi	r26, 0x3B	; 59
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	eb e3       	ldi	r30, 0x3B	; 59
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	90 81       	ld	r25, Z
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	89 27       	eor	r24, r25
    21ca:	8c 93       	st	X, r24
}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <vListInitialise+0x6>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	03 96       	adiw	r24, 0x03	; 3
    21e6:	e9 81       	ldd	r30, Y+1	; 0x01
    21e8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ea:	92 83       	std	Z+2, r25	; 0x02
    21ec:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    21ee:	e9 81       	ldd	r30, Y+1	; 0x01
    21f0:	fa 81       	ldd	r31, Y+2	; 0x02
    21f2:	8f ef       	ldi	r24, 0xFF	; 255
    21f4:	9f ef       	ldi	r25, 0xFF	; 255
    21f6:	94 83       	std	Z+4, r25	; 0x04
    21f8:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	03 96       	adiw	r24, 0x03	; 3
    2200:	e9 81       	ldd	r30, Y+1	; 0x01
    2202:	fa 81       	ldd	r31, Y+2	; 0x02
    2204:	96 83       	std	Z+6, r25	; 0x06
    2206:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	03 96       	adiw	r24, 0x03	; 3
    220e:	e9 81       	ldd	r30, Y+1	; 0x01
    2210:	fa 81       	ldd	r31, Y+2	; 0x02
    2212:	90 87       	std	Z+8, r25	; 0x08
    2214:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2216:	e9 81       	ldd	r30, Y+1	; 0x01
    2218:	fa 81       	ldd	r31, Y+2	; 0x02
    221a:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <vListInitialiseItem+0x6>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    2234:	e9 81       	ldd	r30, Y+1	; 0x01
    2236:	fa 81       	ldd	r31, Y+2	; 0x02
    2238:	11 86       	std	Z+9, r1	; 0x09
    223a:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	00 d0       	rcall	.+0      	; 0x224c <vListInsertEnd+0x6>
    224c:	00 d0       	rcall	.+0      	; 0x224e <vListInsertEnd+0x8>
    224e:	00 d0       	rcall	.+0      	; 0x2250 <vListInsertEnd+0xa>
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
    2258:	7e 83       	std	Y+6, r23	; 0x06
    225a:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    225c:	eb 81       	ldd	r30, Y+3	; 0x03
    225e:	fc 81       	ldd	r31, Y+4	; 0x04
    2260:	81 81       	ldd	r24, Z+1	; 0x01
    2262:	92 81       	ldd	r25, Z+2	; 0x02
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2268:	ed 81       	ldd	r30, Y+5	; 0x05
    226a:	fe 81       	ldd	r31, Y+6	; 0x06
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	9a 81       	ldd	r25, Y+2	; 0x02
    2270:	93 83       	std	Z+3, r25	; 0x03
    2272:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2274:	e9 81       	ldd	r30, Y+1	; 0x01
    2276:	fa 81       	ldd	r31, Y+2	; 0x02
    2278:	84 81       	ldd	r24, Z+4	; 0x04
    227a:	95 81       	ldd	r25, Z+5	; 0x05
    227c:	ed 81       	ldd	r30, Y+5	; 0x05
    227e:	fe 81       	ldd	r31, Y+6	; 0x06
    2280:	95 83       	std	Z+5, r25	; 0x05
    2282:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2284:	e9 81       	ldd	r30, Y+1	; 0x01
    2286:	fa 81       	ldd	r31, Y+2	; 0x02
    2288:	04 80       	ldd	r0, Z+4	; 0x04
    228a:	f5 81       	ldd	r31, Z+5	; 0x05
    228c:	e0 2d       	mov	r30, r0
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	93 83       	std	Z+3, r25	; 0x03
    2294:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	95 83       	std	Z+5, r25	; 0x05
    22a0:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    22a2:	ed 81       	ldd	r30, Y+5	; 0x05
    22a4:	fe 81       	ldd	r31, Y+6	; 0x06
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	91 87       	std	Z+9, r25	; 0x09
    22ac:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    22ae:	eb 81       	ldd	r30, Y+3	; 0x03
    22b0:	fc 81       	ldd	r31, Y+4	; 0x04
    22b2:	80 81       	ld	r24, Z
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	eb 81       	ldd	r30, Y+3	; 0x03
    22b8:	fc 81       	ldd	r31, Y+4	; 0x04
    22ba:	80 83       	st	Z, r24
}
    22bc:	26 96       	adiw	r28, 0x06	; 6
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	28 97       	sbiw	r28, 0x08	; 8
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	78 87       	std	Y+8, r23	; 0x08
    22e8:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    22ea:	ef 81       	ldd	r30, Y+7	; 0x07
    22ec:	f8 85       	ldd	r31, Y+8	; 0x08
    22ee:	80 81       	ld	r24, Z
    22f0:	91 81       	ldd	r25, Z+1	; 0x01
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	9a 81       	ldd	r25, Y+2	; 0x02
    22fa:	2f ef       	ldi	r18, 0xFF	; 255
    22fc:	8f 3f       	cpi	r24, 0xFF	; 255
    22fe:	92 07       	cpc	r25, r18
    2300:	39 f4       	brne	.+14     	; 0x2310 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2302:	ed 81       	ldd	r30, Y+5	; 0x05
    2304:	fe 81       	ldd	r31, Y+6	; 0x06
    2306:	87 81       	ldd	r24, Z+7	; 0x07
    2308:	90 85       	ldd	r25, Z+8	; 0x08
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
    230e:	18 c0       	rjmp	.+48     	; 0x2340 <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	03 96       	adiw	r24, 0x03	; 3
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	8b 83       	std	Y+3, r24	; 0x03
    231a:	06 c0       	rjmp	.+12     	; 0x2328 <vListInsert+0x5a>
    231c:	eb 81       	ldd	r30, Y+3	; 0x03
    231e:	fc 81       	ldd	r31, Y+4	; 0x04
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
    2328:	eb 81       	ldd	r30, Y+3	; 0x03
    232a:	fc 81       	ldd	r31, Y+4	; 0x04
    232c:	02 80       	ldd	r0, Z+2	; 0x02
    232e:	f3 81       	ldd	r31, Z+3	; 0x03
    2330:	e0 2d       	mov	r30, r0
    2332:	20 81       	ld	r18, Z
    2334:	31 81       	ldd	r19, Z+1	; 0x01
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	82 17       	cp	r24, r18
    233c:	93 07       	cpc	r25, r19
    233e:	70 f7       	brcc	.-36     	; 0x231c <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2340:	eb 81       	ldd	r30, Y+3	; 0x03
    2342:	fc 81       	ldd	r31, Y+4	; 0x04
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	ef 81       	ldd	r30, Y+7	; 0x07
    234a:	f8 85       	ldd	r31, Y+8	; 0x08
    234c:	93 83       	std	Z+3, r25	; 0x03
    234e:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2350:	ef 81       	ldd	r30, Y+7	; 0x07
    2352:	f8 85       	ldd	r31, Y+8	; 0x08
    2354:	02 80       	ldd	r0, Z+2	; 0x02
    2356:	f3 81       	ldd	r31, Z+3	; 0x03
    2358:	e0 2d       	mov	r30, r0
    235a:	8f 81       	ldd	r24, Y+7	; 0x07
    235c:	98 85       	ldd	r25, Y+8	; 0x08
    235e:	95 83       	std	Z+5, r25	; 0x05
    2360:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2362:	ef 81       	ldd	r30, Y+7	; 0x07
    2364:	f8 85       	ldd	r31, Y+8	; 0x08
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	95 83       	std	Z+5, r25	; 0x05
    236c:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    236e:	eb 81       	ldd	r30, Y+3	; 0x03
    2370:	fc 81       	ldd	r31, Y+4	; 0x04
    2372:	8f 81       	ldd	r24, Y+7	; 0x07
    2374:	98 85       	ldd	r25, Y+8	; 0x08
    2376:	93 83       	std	Z+3, r25	; 0x03
    2378:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    237a:	ef 81       	ldd	r30, Y+7	; 0x07
    237c:	f8 85       	ldd	r31, Y+8	; 0x08
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	91 87       	std	Z+9, r25	; 0x09
    2384:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2386:	ed 81       	ldd	r30, Y+5	; 0x05
    2388:	fe 81       	ldd	r31, Y+6	; 0x06
    238a:	80 81       	ld	r24, Z
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	ed 81       	ldd	r30, Y+5	; 0x05
    2390:	fe 81       	ldd	r31, Y+6	; 0x06
    2392:	80 83       	st	Z, r24
}
    2394:	28 96       	adiw	r28, 0x08	; 8
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <uxListRemove+0x6>
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <uxListRemove+0x8>
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	9c 83       	std	Y+4, r25	; 0x04
    23b4:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    23b6:	eb 81       	ldd	r30, Y+3	; 0x03
    23b8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ba:	80 85       	ldd	r24, Z+8	; 0x08
    23bc:	91 85       	ldd	r25, Z+9	; 0x09
    23be:	9a 83       	std	Y+2, r25	; 0x02
    23c0:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    23c2:	eb 81       	ldd	r30, Y+3	; 0x03
    23c4:	fc 81       	ldd	r31, Y+4	; 0x04
    23c6:	a2 81       	ldd	r26, Z+2	; 0x02
    23c8:	b3 81       	ldd	r27, Z+3	; 0x03
    23ca:	eb 81       	ldd	r30, Y+3	; 0x03
    23cc:	fc 81       	ldd	r31, Y+4	; 0x04
    23ce:	84 81       	ldd	r24, Z+4	; 0x04
    23d0:	95 81       	ldd	r25, Z+5	; 0x05
    23d2:	15 96       	adiw	r26, 0x05	; 5
    23d4:	9c 93       	st	X, r25
    23d6:	8e 93       	st	-X, r24
    23d8:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    23da:	eb 81       	ldd	r30, Y+3	; 0x03
    23dc:	fc 81       	ldd	r31, Y+4	; 0x04
    23de:	a4 81       	ldd	r26, Z+4	; 0x04
    23e0:	b5 81       	ldd	r27, Z+5	; 0x05
    23e2:	eb 81       	ldd	r30, Y+3	; 0x03
    23e4:	fc 81       	ldd	r31, Y+4	; 0x04
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	13 96       	adiw	r26, 0x03	; 3
    23ec:	9c 93       	st	X, r25
    23ee:	8e 93       	st	-X, r24
    23f0:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    23f2:	e9 81       	ldd	r30, Y+1	; 0x01
    23f4:	fa 81       	ldd	r31, Y+2	; 0x02
    23f6:	21 81       	ldd	r18, Z+1	; 0x01
    23f8:	32 81       	ldd	r19, Z+2	; 0x02
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	28 17       	cp	r18, r24
    2400:	39 07       	cpc	r19, r25
    2402:	41 f4       	brne	.+16     	; 0x2414 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2404:	eb 81       	ldd	r30, Y+3	; 0x03
    2406:	fc 81       	ldd	r31, Y+4	; 0x04
    2408:	84 81       	ldd	r24, Z+4	; 0x04
    240a:	95 81       	ldd	r25, Z+5	; 0x05
    240c:	e9 81       	ldd	r30, Y+1	; 0x01
    240e:	fa 81       	ldd	r31, Y+2	; 0x02
    2410:	92 83       	std	Z+2, r25	; 0x02
    2412:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    2414:	eb 81       	ldd	r30, Y+3	; 0x03
    2416:	fc 81       	ldd	r31, Y+4	; 0x04
    2418:	11 86       	std	Z+9, r1	; 0x09
    241a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    241c:	e9 81       	ldd	r30, Y+1	; 0x01
    241e:	fa 81       	ldd	r31, Y+2	; 0x02
    2420:	80 81       	ld	r24, Z
    2422:	81 50       	subi	r24, 0x01	; 1
    2424:	e9 81       	ldd	r30, Y+1	; 0x01
    2426:	fa 81       	ldd	r31, Y+2	; 0x02
    2428:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    242a:	e9 81       	ldd	r30, Y+1	; 0x01
    242c:	fa 81       	ldd	r31, Y+2	; 0x02
    242e:	80 81       	ld	r24, Z
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <main>:
void A(void);
void C(void);
void D(void);

int main(void)
{
    243e:	ef 92       	push	r14
    2440:	ff 92       	push	r15
    2442:	0f 93       	push	r16
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate((TaskFunction_t)InitTask,"init",300,NULL,5,&init_handel);
    244c:	84 e7       	ldi	r24, 0x74	; 116
    244e:	92 e1       	ldi	r25, 0x12	; 18
    2450:	20 e6       	ldi	r18, 0x60	; 96
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	eb e5       	ldi	r30, 0x5B	; 91
    2456:	f6 e0       	ldi	r31, 0x06	; 6
    2458:	b9 01       	movw	r22, r18
    245a:	4c e2       	ldi	r20, 0x2C	; 44
    245c:	51 e0       	ldi	r21, 0x01	; 1
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	05 e0       	ldi	r16, 0x05	; 5
    2464:	7f 01       	movw	r14, r30
    2466:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <xTaskCreate>
	xTaskCreate((TaskFunction_t)B,"A",100,NULL,5,&B_handel);
    246a:	86 eb       	ldi	r24, 0xB6	; 182
    246c:	92 e1       	ldi	r25, 0x12	; 18
    246e:	25 e6       	ldi	r18, 0x65	; 101
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	ef e5       	ldi	r30, 0x5F	; 95
    2474:	f6 e0       	ldi	r31, 0x06	; 6
    2476:	b9 01       	movw	r22, r18
    2478:	44 e6       	ldi	r20, 0x64	; 100
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	05 e0       	ldi	r16, 0x05	; 5
    2482:	7f 01       	movw	r14, r30
    2484:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <xTaskCreate>
	xTaskCreate((TaskFunction_t)A,"B",100,NULL,3,&A_handel);
    2488:	8d ea       	ldi	r24, 0xAD	; 173
    248a:	92 e1       	ldi	r25, 0x12	; 18
    248c:	27 e6       	ldi	r18, 0x67	; 103
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	ed e5       	ldi	r30, 0x5D	; 93
    2492:	f6 e0       	ldi	r31, 0x06	; 6
    2494:	b9 01       	movw	r22, r18
    2496:	44 e6       	ldi	r20, 0x64	; 100
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	03 e0       	ldi	r16, 0x03	; 3
    24a0:	7f 01       	movw	r14, r30
    24a2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <xTaskCreate>
	xTaskCreate((TaskFunction_t)C,"C",100,NULL,4,&C_handel);
    24a6:	8f eb       	ldi	r24, 0xBF	; 191
    24a8:	92 e1       	ldi	r25, 0x12	; 18
    24aa:	29 e6       	ldi	r18, 0x69	; 105
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	e1 e6       	ldi	r30, 0x61	; 97
    24b0:	f6 e0       	ldi	r31, 0x06	; 6
    24b2:	b9 01       	movw	r22, r18
    24b4:	44 e6       	ldi	r20, 0x64	; 100
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	04 e0       	ldi	r16, 0x04	; 4
    24be:	7f 01       	movw	r14, r30
    24c0:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <xTaskCreate>
	xTaskCreate((TaskFunction_t)D,"D",100,NULL,4,&D_handel);
    24c4:	88 ec       	ldi	r24, 0xC8	; 200
    24c6:	92 e1       	ldi	r25, 0x12	; 18
    24c8:	2b e6       	ldi	r18, 0x6B	; 107
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	e3 e6       	ldi	r30, 0x63	; 99
    24ce:	f6 e0       	ldi	r31, 0x06	; 6
    24d0:	b9 01       	movw	r22, r18
    24d2:	44 e6       	ldi	r20, 0x64	; 100
    24d4:	50 e0       	ldi	r21, 0x00	; 0
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	04 e0       	ldi	r16, 0x04	; 4
    24dc:	7f 01       	movw	r14, r30
    24de:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <xTaskCreate>

	/* Start Scheduler */
	vTaskStartScheduler();
    24e2:	0e 94 08 28 	call	0x5010	; 0x5010 <vTaskStartScheduler>
    24e6:	ff cf       	rjmp	.-2      	; 0x24e6 <main+0xa8>

000024e8 <InitTask>:

	}
	return 0;
}
void InitTask(void)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	for(;;)
	{
		BUTTON_Init(2);
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	0e 94 ac 09 	call	0x1358	; 0x1358 <BUTTON_Init>
		vTaskDelay(10);
    24f6:	8a e0       	ldi	r24, 0x0A	; 10
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
		BUTTON_Init(1);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	0e 94 ac 09 	call	0x1358	; 0x1358 <BUTTON_Init>
		vTaskDelay(10);
    2504:	8a e0       	ldi	r24, 0x0A	; 10
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
		lcd_init();
    250c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <lcd_init>
		vTaskDelay(10);
    2510:	8a e0       	ldi	r24, 0x0A	; 10
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
		/* Attempt to create a semaphore. */
		xSemaphore2 = xSemaphoreCreateBinary();
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	43 e0       	ldi	r20, 0x03	; 3
    251e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <xQueueGenericCreate>
    2522:	90 93 d1 06 	sts	0x06D1, r25
    2526:	80 93 d0 06 	sts	0x06D0, r24
		vTaskDelay(10);
    252a:	8a e0       	ldi	r24, 0x0A	; 10
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
		xSemaphore1 = xSemaphoreCreateBinary();
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	43 e0       	ldi	r20, 0x03	; 3
    2538:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <xQueueGenericCreate>
    253c:	90 93 cf 06 	sts	0x06CF, r25
    2540:	80 93 ce 06 	sts	0x06CE, r24
		vTaskDelay(10);
    2544:	8a e0       	ldi	r24, 0x0A	; 10
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
		vTaskSuspend(init_handel);
    254c:	80 91 5b 06 	lds	r24, 0x065B
    2550:	90 91 5c 06 	lds	r25, 0x065C
    2554:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <vTaskSuspend>
    2558:	cb cf       	rjmp	.-106    	; 0x24f0 <InitTask+0x8>

0000255a <A>:
	}
}
void A(void)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(40);
    2562:	88 e2       	ldi	r24, 0x28	; 40
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
    256a:	ff cf       	rjmp	.-2      	; 0x256a <A+0x10>

0000256c <B>:
		{

		}
}
void B(void)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(40);
    2574:	88 e2       	ldi	r24, 0x28	; 40
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
    257c:	ff cf       	rjmp	.-2      	; 0x257c <B+0x10>

0000257e <C>:
	{

	}
}
void C(void)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(40);
    2586:	88 e2       	ldi	r24, 0x28	; 40
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
    258e:	ff cf       	rjmp	.-2      	; 0x258e <C+0x10>

00002590 <D>:

	}

}
void D(void)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(40);
    2598:	88 e2       	ldi	r24, 0x28	; 40
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <vTaskDelay>
    25a0:	ff cf       	rjmp	.-2      	; 0x25a0 <D+0x10>

000025a2 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	28 97       	sbiw	r28, 0x08	; 8
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
    25ba:	7e 83       	std	Y+6, r23	; 0x06
    25bc:	6d 83       	std	Y+5, r22	; 0x05
    25be:	58 87       	std	Y+8, r21	; 0x08
    25c0:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    25c2:	eb 81       	ldd	r30, Y+3	; 0x03
    25c4:	fc 81       	ldd	r31, Y+4	; 0x04
    25c6:	81 e1       	ldi	r24, 0x11	; 17
    25c8:	80 83       	st	Z, r24
	pxTopOfStack--;
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	9c 83       	std	Y+4, r25	; 0x04
    25d2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    25d4:	eb 81       	ldd	r30, Y+3	; 0x03
    25d6:	fc 81       	ldd	r31, Y+4	; 0x04
    25d8:	82 e2       	ldi	r24, 0x22	; 34
    25da:	80 83       	st	Z, r24
	pxTopOfStack--;
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	9c 83       	std	Y+4, r25	; 0x04
    25e4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    25e6:	eb 81       	ldd	r30, Y+3	; 0x03
    25e8:	fc 81       	ldd	r31, Y+4	; 0x04
    25ea:	83 e3       	ldi	r24, 0x33	; 51
    25ec:	80 83       	st	Z, r24
	pxTopOfStack--;
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	9c 83       	std	Y+4, r25	; 0x04
    25f6:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	eb 81       	ldd	r30, Y+3	; 0x03
    2604:	fc 81       	ldd	r31, Y+4	; 0x04
    2606:	80 83       	st	Z, r24
	pxTopOfStack--;
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9c 83       	std	Y+4, r25	; 0x04
    2610:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	89 2f       	mov	r24, r25
    2618:	99 27       	eor	r25, r25
    261a:	9a 83       	std	Y+2, r25	; 0x02
    261c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	eb 81       	ldd	r30, Y+3	; 0x03
    2622:	fc 81       	ldd	r31, Y+4	; 0x04
    2624:	80 83       	st	Z, r24
	pxTopOfStack--;
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    2630:	eb 81       	ldd	r30, Y+3	; 0x03
    2632:	fc 81       	ldd	r31, Y+4	; 0x04
    2634:	10 82       	st	Z, r1
	pxTopOfStack--;
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	9c 83       	std	Y+4, r25	; 0x04
    263e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2640:	eb 81       	ldd	r30, Y+3	; 0x03
    2642:	fc 81       	ldd	r31, Y+4	; 0x04
    2644:	80 e8       	ldi	r24, 0x80	; 128
    2646:	80 83       	st	Z, r24
	pxTopOfStack--;
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	9c 83       	std	Y+4, r25	; 0x04
    2650:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    2652:	eb 81       	ldd	r30, Y+3	; 0x03
    2654:	fc 81       	ldd	r31, Y+4	; 0x04
    2656:	10 82       	st	Z, r1
	pxTopOfStack--;
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    2662:	eb 81       	ldd	r30, Y+3	; 0x03
    2664:	fc 81       	ldd	r31, Y+4	; 0x04
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	80 83       	st	Z, r24
	pxTopOfStack--;
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	9c 83       	std	Y+4, r25	; 0x04
    2672:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    2674:	eb 81       	ldd	r30, Y+3	; 0x03
    2676:	fc 81       	ldd	r31, Y+4	; 0x04
    2678:	83 e0       	ldi	r24, 0x03	; 3
    267a:	80 83       	st	Z, r24
	pxTopOfStack--;
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    2686:	eb 81       	ldd	r30, Y+3	; 0x03
    2688:	fc 81       	ldd	r31, Y+4	; 0x04
    268a:	84 e0       	ldi	r24, 0x04	; 4
    268c:	80 83       	st	Z, r24
	pxTopOfStack--;
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    2698:	eb 81       	ldd	r30, Y+3	; 0x03
    269a:	fc 81       	ldd	r31, Y+4	; 0x04
    269c:	85 e0       	ldi	r24, 0x05	; 5
    269e:	80 83       	st	Z, r24
	pxTopOfStack--;
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    26aa:	eb 81       	ldd	r30, Y+3	; 0x03
    26ac:	fc 81       	ldd	r31, Y+4	; 0x04
    26ae:	86 e0       	ldi	r24, 0x06	; 6
    26b0:	80 83       	st	Z, r24
	pxTopOfStack--;
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9c 83       	std	Y+4, r25	; 0x04
    26ba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    26bc:	eb 81       	ldd	r30, Y+3	; 0x03
    26be:	fc 81       	ldd	r31, Y+4	; 0x04
    26c0:	87 e0       	ldi	r24, 0x07	; 7
    26c2:	80 83       	st	Z, r24
	pxTopOfStack--;
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	9c 83       	std	Y+4, r25	; 0x04
    26cc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    26ce:	eb 81       	ldd	r30, Y+3	; 0x03
    26d0:	fc 81       	ldd	r31, Y+4	; 0x04
    26d2:	88 e0       	ldi	r24, 0x08	; 8
    26d4:	80 83       	st	Z, r24
	pxTopOfStack--;
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    26e0:	eb 81       	ldd	r30, Y+3	; 0x03
    26e2:	fc 81       	ldd	r31, Y+4	; 0x04
    26e4:	89 e0       	ldi	r24, 0x09	; 9
    26e6:	80 83       	st	Z, r24
	pxTopOfStack--;
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    26f2:	eb 81       	ldd	r30, Y+3	; 0x03
    26f4:	fc 81       	ldd	r31, Y+4	; 0x04
    26f6:	80 e1       	ldi	r24, 0x10	; 16
    26f8:	80 83       	st	Z, r24
	pxTopOfStack--;
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    2704:	eb 81       	ldd	r30, Y+3	; 0x03
    2706:	fc 81       	ldd	r31, Y+4	; 0x04
    2708:	81 e1       	ldi	r24, 0x11	; 17
    270a:	80 83       	st	Z, r24
	pxTopOfStack--;
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2716:	eb 81       	ldd	r30, Y+3	; 0x03
    2718:	fc 81       	ldd	r31, Y+4	; 0x04
    271a:	82 e1       	ldi	r24, 0x12	; 18
    271c:	80 83       	st	Z, r24
	pxTopOfStack--;
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    2728:	eb 81       	ldd	r30, Y+3	; 0x03
    272a:	fc 81       	ldd	r31, Y+4	; 0x04
    272c:	83 e1       	ldi	r24, 0x13	; 19
    272e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	9c 83       	std	Y+4, r25	; 0x04
    2738:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    273a:	eb 81       	ldd	r30, Y+3	; 0x03
    273c:	fc 81       	ldd	r31, Y+4	; 0x04
    273e:	84 e1       	ldi	r24, 0x14	; 20
    2740:	80 83       	st	Z, r24
	pxTopOfStack--;
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    274c:	eb 81       	ldd	r30, Y+3	; 0x03
    274e:	fc 81       	ldd	r31, Y+4	; 0x04
    2750:	85 e1       	ldi	r24, 0x15	; 21
    2752:	80 83       	st	Z, r24
	pxTopOfStack--;
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    275e:	eb 81       	ldd	r30, Y+3	; 0x03
    2760:	fc 81       	ldd	r31, Y+4	; 0x04
    2762:	86 e1       	ldi	r24, 0x16	; 22
    2764:	80 83       	st	Z, r24
	pxTopOfStack--;
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	9c 83       	std	Y+4, r25	; 0x04
    276e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    2770:	eb 81       	ldd	r30, Y+3	; 0x03
    2772:	fc 81       	ldd	r31, Y+4	; 0x04
    2774:	87 e1       	ldi	r24, 0x17	; 23
    2776:	80 83       	st	Z, r24
	pxTopOfStack--;
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    2782:	eb 81       	ldd	r30, Y+3	; 0x03
    2784:	fc 81       	ldd	r31, Y+4	; 0x04
    2786:	88 e1       	ldi	r24, 0x18	; 24
    2788:	80 83       	st	Z, r24
	pxTopOfStack--;
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9c 83       	std	Y+4, r25	; 0x04
    2792:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2794:	eb 81       	ldd	r30, Y+3	; 0x03
    2796:	fc 81       	ldd	r31, Y+4	; 0x04
    2798:	89 e1       	ldi	r24, 0x19	; 25
    279a:	80 83       	st	Z, r24
	pxTopOfStack--;
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9c 83       	std	Y+4, r25	; 0x04
    27a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    27a6:	eb 81       	ldd	r30, Y+3	; 0x03
    27a8:	fc 81       	ldd	r31, Y+4	; 0x04
    27aa:	80 e2       	ldi	r24, 0x20	; 32
    27ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	9c 83       	std	Y+4, r25	; 0x04
    27b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    27b8:	eb 81       	ldd	r30, Y+3	; 0x03
    27ba:	fc 81       	ldd	r31, Y+4	; 0x04
    27bc:	81 e2       	ldi	r24, 0x21	; 33
    27be:	80 83       	st	Z, r24
	pxTopOfStack--;
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	9c 81       	ldd	r25, Y+4	; 0x04
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	9c 83       	std	Y+4, r25	; 0x04
    27c8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    27ca:	eb 81       	ldd	r30, Y+3	; 0x03
    27cc:	fc 81       	ldd	r31, Y+4	; 0x04
    27ce:	82 e2       	ldi	r24, 0x22	; 34
    27d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    27dc:	eb 81       	ldd	r30, Y+3	; 0x03
    27de:	fc 81       	ldd	r31, Y+4	; 0x04
    27e0:	83 e2       	ldi	r24, 0x23	; 35
    27e2:	80 83       	st	Z, r24
	pxTopOfStack--;
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    27ec:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    27ee:	8f 81       	ldd	r24, Y+7	; 0x07
    27f0:	98 85       	ldd	r25, Y+8	; 0x08
    27f2:	9a 83       	std	Y+2, r25	; 0x02
    27f4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	eb 81       	ldd	r30, Y+3	; 0x03
    27fa:	fc 81       	ldd	r31, Y+4	; 0x04
    27fc:	80 83       	st	Z, r24
	pxTopOfStack--;
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	89 2f       	mov	r24, r25
    280e:	99 27       	eor	r25, r25
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	eb 81       	ldd	r30, Y+3	; 0x03
    2818:	fc 81       	ldd	r31, Y+4	; 0x04
    281a:	80 83       	st	Z, r24
	pxTopOfStack--;
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	9c 81       	ldd	r25, Y+4	; 0x04
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	9c 83       	std	Y+4, r25	; 0x04
    2824:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2826:	eb 81       	ldd	r30, Y+3	; 0x03
    2828:	fc 81       	ldd	r31, Y+4	; 0x04
    282a:	86 e2       	ldi	r24, 0x26	; 38
    282c:	80 83       	st	Z, r24
	pxTopOfStack--;
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	9c 81       	ldd	r25, Y+4	; 0x04
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	9c 83       	std	Y+4, r25	; 0x04
    2836:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    2838:	eb 81       	ldd	r30, Y+3	; 0x03
    283a:	fc 81       	ldd	r31, Y+4	; 0x04
    283c:	87 e2       	ldi	r24, 0x27	; 39
    283e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	9c 83       	std	Y+4, r25	; 0x04
    2848:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    284a:	eb 81       	ldd	r30, Y+3	; 0x03
    284c:	fc 81       	ldd	r31, Y+4	; 0x04
    284e:	88 e2       	ldi	r24, 0x28	; 40
    2850:	80 83       	st	Z, r24
	pxTopOfStack--;
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    285c:	eb 81       	ldd	r30, Y+3	; 0x03
    285e:	fc 81       	ldd	r31, Y+4	; 0x04
    2860:	89 e2       	ldi	r24, 0x29	; 41
    2862:	80 83       	st	Z, r24
	pxTopOfStack--;
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9c 83       	std	Y+4, r25	; 0x04
    286c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    286e:	eb 81       	ldd	r30, Y+3	; 0x03
    2870:	fc 81       	ldd	r31, Y+4	; 0x04
    2872:	80 e3       	ldi	r24, 0x30	; 48
    2874:	80 83       	st	Z, r24
	pxTopOfStack--;
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    2880:	eb 81       	ldd	r30, Y+3	; 0x03
    2882:	fc 81       	ldd	r31, Y+4	; 0x04
    2884:	81 e3       	ldi	r24, 0x31	; 49
    2886:	80 83       	st	Z, r24
	pxTopOfStack--;
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9c 83       	std	Y+4, r25	; 0x04
    2890:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2896:	28 96       	adiw	r28, 0x08	; 8
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    28b0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    28b4:	a0 91 65 06 	lds	r26, 0x0665
    28b8:	b0 91 66 06 	lds	r27, 0x0666
    28bc:	cd 91       	ld	r28, X+
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	dd 91       	ld	r29, X+
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	ff 91       	pop	r31
    28c6:	ef 91       	pop	r30
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	bf 91       	pop	r27
    28ce:	af 91       	pop	r26
    28d0:	9f 91       	pop	r25
    28d2:	8f 91       	pop	r24
    28d4:	7f 91       	pop	r23
    28d6:	6f 91       	pop	r22
    28d8:	5f 91       	pop	r21
    28da:	4f 91       	pop	r20
    28dc:	3f 91       	pop	r19
    28de:	2f 91       	pop	r18
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	df 90       	pop	r13
    28ea:	cf 90       	pop	r12
    28ec:	bf 90       	pop	r11
    28ee:	af 90       	pop	r10
    28f0:	9f 90       	pop	r9
    28f2:	8f 90       	pop	r8
    28f4:	7f 90       	pop	r7
    28f6:	6f 90       	pop	r6
    28f8:	5f 90       	pop	r5
    28fa:	4f 90       	pop	r4
    28fc:	3f 90       	pop	r3
    28fe:	2f 90       	pop	r2
    2900:	1f 90       	pop	r1
    2902:	0f 90       	pop	r0
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2908:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    290a:	81 e0       	ldi	r24, 0x01	; 1
}
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2920:	0f 92       	push	r0
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	0f 92       	push	r0
    2928:	1f 92       	push	r1
    292a:	11 24       	eor	r1, r1
    292c:	2f 92       	push	r2
    292e:	3f 92       	push	r3
    2930:	4f 92       	push	r4
    2932:	5f 92       	push	r5
    2934:	6f 92       	push	r6
    2936:	7f 92       	push	r7
    2938:	8f 92       	push	r8
    293a:	9f 92       	push	r9
    293c:	af 92       	push	r10
    293e:	bf 92       	push	r11
    2940:	cf 92       	push	r12
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	2f 93       	push	r18
    294e:	3f 93       	push	r19
    2950:	4f 93       	push	r20
    2952:	5f 93       	push	r21
    2954:	6f 93       	push	r22
    2956:	7f 93       	push	r23
    2958:	8f 93       	push	r24
    295a:	9f 93       	push	r25
    295c:	af 93       	push	r26
    295e:	bf 93       	push	r27
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	ef 93       	push	r30
    2966:	ff 93       	push	r31
    2968:	a0 91 65 06 	lds	r26, 0x0665
    296c:	b0 91 66 06 	lds	r27, 0x0666
    2970:	0d b6       	in	r0, 0x3d	; 61
    2972:	0d 92       	st	X+, r0
    2974:	0e b6       	in	r0, 0x3e	; 62
    2976:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2978:	0e 94 27 2a 	call	0x544e	; 0x544e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    297c:	a0 91 65 06 	lds	r26, 0x0665
    2980:	b0 91 66 06 	lds	r27, 0x0666
    2984:	cd 91       	ld	r28, X+
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	dd 91       	ld	r29, X+
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	ff 91       	pop	r31
    298e:	ef 91       	pop	r30
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	bf 91       	pop	r27
    2996:	af 91       	pop	r26
    2998:	9f 91       	pop	r25
    299a:	8f 91       	pop	r24
    299c:	7f 91       	pop	r23
    299e:	6f 91       	pop	r22
    29a0:	5f 91       	pop	r21
    29a2:	4f 91       	pop	r20
    29a4:	3f 91       	pop	r19
    29a6:	2f 91       	pop	r18
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ff 90       	pop	r15
    29ae:	ef 90       	pop	r14
    29b0:	df 90       	pop	r13
    29b2:	cf 90       	pop	r12
    29b4:	bf 90       	pop	r11
    29b6:	af 90       	pop	r10
    29b8:	9f 90       	pop	r9
    29ba:	8f 90       	pop	r8
    29bc:	7f 90       	pop	r7
    29be:	6f 90       	pop	r6
    29c0:	5f 90       	pop	r5
    29c2:	4f 90       	pop	r4
    29c4:	3f 90       	pop	r3
    29c6:	2f 90       	pop	r2
    29c8:	1f 90       	pop	r1
    29ca:	0f 90       	pop	r0
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	0f 90       	pop	r0

	asm volatile ( "ret" );
    29d0:	08 95       	ret

000029d2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    29d2:	0f 92       	push	r0
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	0f 92       	push	r0
    29da:	1f 92       	push	r1
    29dc:	11 24       	eor	r1, r1
    29de:	2f 92       	push	r2
    29e0:	3f 92       	push	r3
    29e2:	4f 92       	push	r4
    29e4:	5f 92       	push	r5
    29e6:	6f 92       	push	r6
    29e8:	7f 92       	push	r7
    29ea:	8f 92       	push	r8
    29ec:	9f 92       	push	r9
    29ee:	af 92       	push	r10
    29f0:	bf 92       	push	r11
    29f2:	cf 92       	push	r12
    29f4:	df 92       	push	r13
    29f6:	ef 92       	push	r14
    29f8:	ff 92       	push	r15
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	2f 93       	push	r18
    2a00:	3f 93       	push	r19
    2a02:	4f 93       	push	r20
    2a04:	5f 93       	push	r21
    2a06:	6f 93       	push	r22
    2a08:	7f 93       	push	r23
    2a0a:	8f 93       	push	r24
    2a0c:	9f 93       	push	r25
    2a0e:	af 93       	push	r26
    2a10:	bf 93       	push	r27
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	ef 93       	push	r30
    2a18:	ff 93       	push	r31
    2a1a:	a0 91 65 06 	lds	r26, 0x0665
    2a1e:	b0 91 66 06 	lds	r27, 0x0666
    2a22:	0d b6       	in	r0, 0x3d	; 61
    2a24:	0d 92       	st	X+, r0
    2a26:	0e b6       	in	r0, 0x3e	; 62
    2a28:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2a2a:	0e 94 42 29 	call	0x5284	; 0x5284 <xTaskIncrementTick>
    2a2e:	88 23       	and	r24, r24
    2a30:	11 f0       	breq	.+4      	; 0x2a36 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    2a32:	0e 94 27 2a 	call	0x544e	; 0x544e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    2a36:	a0 91 65 06 	lds	r26, 0x0665
    2a3a:	b0 91 66 06 	lds	r27, 0x0666
    2a3e:	cd 91       	ld	r28, X+
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	dd 91       	ld	r29, X+
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	bf 91       	pop	r27
    2a50:	af 91       	pop	r26
    2a52:	9f 91       	pop	r25
    2a54:	8f 91       	pop	r24
    2a56:	7f 91       	pop	r23
    2a58:	6f 91       	pop	r22
    2a5a:	5f 91       	pop	r21
    2a5c:	4f 91       	pop	r20
    2a5e:	3f 91       	pop	r19
    2a60:	2f 91       	pop	r18
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	cf 90       	pop	r12
    2a6e:	bf 90       	pop	r11
    2a70:	af 90       	pop	r10
    2a72:	9f 90       	pop	r9
    2a74:	8f 90       	pop	r8
    2a76:	7f 90       	pop	r7
    2a78:	6f 90       	pop	r6
    2a7a:	5f 90       	pop	r5
    2a7c:	4f 90       	pop	r4
    2a7e:	3f 90       	pop	r3
    2a80:	2f 90       	pop	r2
    2a82:	1f 90       	pop	r1
    2a84:	0f 90       	pop	r0
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2a8a:	08 95       	ret

00002a8c <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <prvSetupTimerInterrupt+0x6>
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <prvSetupTimerInterrupt+0x8>
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <prvSetupTimerInterrupt+0xa>
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2a9a:	80 e4       	ldi	r24, 0x40	; 64
    2a9c:	9f e1       	ldi	r25, 0x1F	; 31
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	8b 83       	std	Y+3, r24	; 0x03
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	ad 83       	std	Y+5, r26	; 0x05
    2aa8:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	9c 81       	ldd	r25, Y+4	; 0x04
    2aae:	ad 81       	ldd	r26, Y+5	; 0x05
    2ab0:	be 81       	ldd	r27, Y+6	; 0x06
    2ab2:	68 94       	set
    2ab4:	15 f8       	bld	r1, 5
    2ab6:	b6 95       	lsr	r27
    2ab8:	a7 95       	ror	r26
    2aba:	97 95       	ror	r25
    2abc:	87 95       	ror	r24
    2abe:	16 94       	lsr	r1
    2ac0:	d1 f7       	brne	.-12     	; 0x2ab6 <prvSetupTimerInterrupt+0x2a>
    2ac2:	8b 83       	std	Y+3, r24	; 0x03
    2ac4:	9c 83       	std	Y+4, r25	; 0x04
    2ac6:	ad 83       	std	Y+5, r26	; 0x05
    2ac8:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2aca:	8b 81       	ldd	r24, Y+3	; 0x03
    2acc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ace:	ad 81       	ldd	r26, Y+5	; 0x05
    2ad0:	be 81       	ldd	r27, Y+6	; 0x06
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	a1 09       	sbc	r26, r1
    2ad6:	b1 09       	sbc	r27, r1
    2ad8:	8b 83       	std	Y+3, r24	; 0x03
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	ad 83       	std	Y+5, r26	; 0x05
    2ade:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	ad 81       	ldd	r26, Y+5	; 0x05
    2aea:	be 81       	ldd	r27, Y+6	; 0x06
    2aec:	89 2f       	mov	r24, r25
    2aee:	9a 2f       	mov	r25, r26
    2af0:	ab 2f       	mov	r26, r27
    2af2:	bb 27       	eor	r27, r27
    2af4:	8b 83       	std	Y+3, r24	; 0x03
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	ad 83       	std	Y+5, r26	; 0x05
    2afa:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    2b00:	eb e4       	ldi	r30, 0x4B	; 75
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2b08:	ea e4       	ldi	r30, 0x4A	; 74
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2b10:	8b e0       	ldi	r24, 0x0B	; 11
    2b12:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    2b14:	ee e4       	ldi	r30, 0x4E	; 78
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2b1c:	e9 e5       	ldi	r30, 0x59	; 89
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	80 61       	ori	r24, 0x10	; 16
    2b28:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2b2a:	e9 e5       	ldi	r30, 0x59	; 89
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	80 83       	st	Z, r24
}
    2b32:	26 96       	adiw	r28, 0x06	; 6
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    2b44:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2b48:	18 95       	reti

00002b4a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <xQueueGenericReset+0x6>
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <xQueueGenericReset+0x8>
    2b52:	0f 92       	push	r0
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	9c 83       	std	Y+4, r25	; 0x04
    2b5a:	8b 83       	std	Y+3, r24	; 0x03
    2b5c:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = xQueue;
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	9c 81       	ldd	r25, Y+4	; 0x04
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	0f 92       	push	r0
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	40 81       	ld	r20, Z
    2b72:	51 81       	ldd	r21, Z+1	; 0x01
    2b74:	e9 81       	ldd	r30, Y+1	; 0x01
    2b76:	fa 81       	ldd	r31, Y+2	; 0x02
    2b78:	83 8d       	ldd	r24, Z+27	; 0x1b
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b80:	fa 81       	ldd	r31, Y+2	; 0x02
    2b82:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	bc 01       	movw	r22, r24
    2b8a:	26 9f       	mul	r18, r22
    2b8c:	c0 01       	movw	r24, r0
    2b8e:	27 9f       	mul	r18, r23
    2b90:	90 0d       	add	r25, r0
    2b92:	36 9f       	mul	r19, r22
    2b94:	90 0d       	add	r25, r0
    2b96:	11 24       	eor	r1, r1
    2b98:	84 0f       	add	r24, r20
    2b9a:	95 1f       	adc	r25, r21
    2b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba0:	95 83       	std	Z+5, r25	; 0x05
    2ba2:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba8:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2baa:	e9 81       	ldd	r30, Y+1	; 0x01
    2bac:	fa 81       	ldd	r31, Y+2	; 0x02
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb6:	93 83       	std	Z+3, r25	; 0x03
    2bb8:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2bba:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbe:	40 81       	ld	r20, Z
    2bc0:	51 81       	ldd	r21, Z+1	; 0x01
    2bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc6:	83 8d       	ldd	r24, Z+27	; 0x1b
    2bc8:	88 2f       	mov	r24, r24
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9c 01       	movw	r18, r24
    2bce:	21 50       	subi	r18, 0x01	; 1
    2bd0:	30 40       	sbci	r19, 0x00	; 0
    2bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	bc 01       	movw	r22, r24
    2bde:	26 9f       	mul	r18, r22
    2be0:	c0 01       	movw	r24, r0
    2be2:	27 9f       	mul	r18, r23
    2be4:	90 0d       	add	r25, r0
    2be6:	36 9f       	mul	r19, r22
    2be8:	90 0d       	add	r25, r0
    2bea:	11 24       	eor	r1, r1
    2bec:	84 0f       	add	r24, r20
    2bee:	95 1f       	adc	r25, r21
    2bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf4:	97 83       	std	Z+7, r25	; 0x07
    2bf6:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    2bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfc:	8f ef       	ldi	r24, 0xFF	; 255
    2bfe:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    2c00:	e9 81       	ldd	r30, Y+1	; 0x01
    2c02:	fa 81       	ldd	r31, Y+2	; 0x02
    2c04:	8f ef       	ldi	r24, 0xFF	; 255
    2c06:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0a:	88 23       	and	r24, r24
    2c0c:	79 f4       	brne	.+30     	; 0x2c2c <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c10:	fa 81       	ldd	r31, Y+2	; 0x02
    2c12:	80 85       	ldd	r24, Z+8	; 0x08
    2c14:	88 23       	and	r24, r24
    2c16:	a1 f0       	breq	.+40     	; 0x2c40 <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	08 96       	adiw	r24, 0x08	; 8
    2c1e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    2c22:	88 23       	and	r24, r24
    2c24:	69 f0       	breq	.+26     	; 0x2c40 <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    2c26:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
    2c2a:	0a c0       	rjmp	.+20     	; 0x2c40 <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	08 96       	adiw	r24, 0x08	; 8
    2c32:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3a:	41 96       	adiw	r24, 0x11	; 17
    2c3c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    2c40:	0f 90       	pop	r0
    2c42:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
}
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	29 97       	sbiw	r28, 0x09	; 9
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	8f 83       	std	Y+7, r24	; 0x07
    2c70:	68 87       	std	Y+8, r22	; 0x08
    2c72:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    2c74:	88 85       	ldd	r24, Y+8	; 0x08
    2c76:	88 23       	and	r24, r24
    2c78:	19 f4       	brne	.+6      	; 0x2c80 <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    2c7a:	1c 82       	std	Y+4, r1	; 0x04
    2c7c:	1b 82       	std	Y+3, r1	; 0x03
    2c7e:	10 c0       	rjmp	.+32     	; 0x2ca0 <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2c80:	8f 81       	ldd	r24, Y+7	; 0x07
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	88 85       	ldd	r24, Y+8	; 0x08
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	ac 01       	movw	r20, r24
    2c8e:	24 9f       	mul	r18, r20
    2c90:	c0 01       	movw	r24, r0
    2c92:	25 9f       	mul	r18, r21
    2c94:	90 0d       	add	r25, r0
    2c96:	34 9f       	mul	r19, r20
    2c98:	90 0d       	add	r25, r0
    2c9a:	11 24       	eor	r1, r1
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	4f 96       	adiw	r24, 0x1f	; 31
    2ca6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	a1 f0       	breq	.+40     	; 0x2cde <xQueueGenericCreate+0x88>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc2:	4f 96       	adiw	r24, 0x1f	; 31
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    2cc8:	29 81       	ldd	r18, Y+1	; 0x01
    2cca:	3a 81       	ldd	r19, Y+2	; 0x02
    2ccc:	ed 81       	ldd	r30, Y+5	; 0x05
    2cce:	fe 81       	ldd	r31, Y+6	; 0x06
    2cd0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cd2:	68 85       	ldd	r22, Y+8	; 0x08
    2cd4:	a9 01       	movw	r20, r18
    2cd6:	29 85       	ldd	r18, Y+9	; 0x09
    2cd8:	8f 01       	movw	r16, r30
    2cda:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    2ce2:	29 96       	adiw	r28, 0x09	; 9
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	1f 91       	pop	r17
    2cf4:	0f 91       	pop	r16
    2cf6:	08 95       	ret

00002cf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	27 97       	sbiw	r28, 0x07	; 7
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	6a 83       	std	Y+2, r22	; 0x02
    2d14:	5c 83       	std	Y+4, r21	; 0x04
    2d16:	4b 83       	std	Y+3, r20	; 0x03
    2d18:	2d 83       	std	Y+5, r18	; 0x05
    2d1a:	1f 83       	std	Y+7, r17	; 0x07
    2d1c:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	88 23       	and	r24, r24
    2d22:	39 f4       	brne	.+14     	; 0x2d32 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    2d24:	8e 81       	ldd	r24, Y+6	; 0x06
    2d26:	9f 81       	ldd	r25, Y+7	; 0x07
    2d28:	ee 81       	ldd	r30, Y+6	; 0x06
    2d2a:	ff 81       	ldd	r31, Y+7	; 0x07
    2d2c:	91 83       	std	Z+1, r25	; 0x01
    2d2e:	80 83       	st	Z, r24
    2d30:	06 c0       	rjmp	.+12     	; 0x2d3e <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	9c 81       	ldd	r25, Y+4	; 0x04
    2d36:	ee 81       	ldd	r30, Y+6	; 0x06
    2d38:	ff 81       	ldd	r31, Y+7	; 0x07
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    2d3e:	ee 81       	ldd	r30, Y+6	; 0x06
    2d40:	ff 81       	ldd	r31, Y+7	; 0x07
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    2d46:	ee 81       	ldd	r30, Y+6	; 0x06
    2d48:	ff 81       	ldd	r31, Y+7	; 0x07
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    2d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d50:	9f 81       	ldd	r25, Y+7	; 0x07
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    2d58:	27 96       	adiw	r28, 0x07	; 7
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	cf 91       	pop	r28
    2d66:	df 91       	pop	r29
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	08 95       	ret

00002d6e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	2f 97       	sbiw	r28, 0x0f	; 15
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	99 87       	std	Y+9, r25	; 0x09
    2d84:	88 87       	std	Y+8, r24	; 0x08
    2d86:	7b 87       	std	Y+11, r23	; 0x0b
    2d88:	6a 87       	std	Y+10, r22	; 0x0a
    2d8a:	5d 87       	std	Y+13, r21	; 0x0d
    2d8c:	4c 87       	std	Y+12, r20	; 0x0c
    2d8e:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2d90:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    2d92:	88 85       	ldd	r24, Y+8	; 0x08
    2d94:	99 85       	ldd	r25, Y+9	; 0x09
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2da0:	e9 81       	ldd	r30, Y+1	; 0x01
    2da2:	fa 81       	ldd	r31, Y+2	; 0x02
    2da4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2da6:	e9 81       	ldd	r30, Y+1	; 0x01
    2da8:	fa 81       	ldd	r31, Y+2	; 0x02
    2daa:	83 8d       	ldd	r24, Z+27	; 0x1b
    2dac:	98 17       	cp	r25, r24
    2dae:	18 f0       	brcs	.+6      	; 0x2db6 <xQueueGenericSend+0x48>
    2db0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2db2:	82 30       	cpi	r24, 0x02	; 2
    2db4:	11 f5       	brne	.+68     	; 0x2dfa <xQueueGenericSend+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	2a 85       	ldd	r18, Y+10	; 0x0a
    2dbc:	3b 85       	ldd	r19, Y+11	; 0x0b
    2dbe:	b9 01       	movw	r22, r18
    2dc0:	4e 85       	ldd	r20, Y+14	; 0x0e
    2dc2:	0e 94 09 1b 	call	0x3612	; 0x3612 <prvCopyDataToQueue>
    2dc6:	8b 83       	std	Y+3, r24	; 0x03

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dca:	fa 81       	ldd	r31, Y+2	; 0x02
    2dcc:	81 89       	ldd	r24, Z+17	; 0x11
    2dce:	88 23       	and	r24, r24
    2dd0:	51 f0       	breq	.+20     	; 0x2de6 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd6:	41 96       	adiw	r24, 0x11	; 17
    2dd8:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    2ddc:	88 23       	and	r24, r24
    2dde:	41 f0       	breq	.+16     	; 0x2df0 <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    2de0:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
    2de4:	05 c0       	rjmp	.+10     	; 0x2df0 <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	88 23       	and	r24, r24
    2dea:	11 f0       	breq	.+4      	; 0x2df0 <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    2dec:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    2df0:	0f 90       	pop	r0
    2df2:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	8f 87       	std	Y+15, r24	; 0x0f
    2df8:	5c c0       	rjmp	.+184    	; 0x2eb2 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2dfa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dfc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	21 f4       	brne	.+8      	; 0x2e0a <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2e02:	0f 90       	pop	r0
    2e04:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2e06:	1f 86       	std	Y+15, r1	; 0x0f
    2e08:	54 c0       	rjmp	.+168    	; 0x2eb2 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    2e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0c:	88 23       	and	r24, r24
    2e0e:	31 f4       	brne	.+12     	; 0x2e1c <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    2e10:	ce 01       	movw	r24, r28
    2e12:	05 96       	adiw	r24, 0x05	; 5
    2e14:	0e 94 cc 2b 	call	0x5798	; 0x5798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2e1c:	0f 90       	pop	r0
    2e1e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2e20:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	0f 92       	push	r0
    2e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e30:	8f 3f       	cpi	r24, 0xFF	; 255
    2e32:	19 f4       	brne	.+6      	; 0x2e3a <xQueueGenericSend+0xcc>
    2e34:	e9 81       	ldd	r30, Y+1	; 0x01
    2e36:	fa 81       	ldd	r31, Y+2	; 0x02
    2e38:	15 8e       	std	Z+29, r1	; 0x1d
    2e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e3e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2e40:	8f 3f       	cpi	r24, 0xFF	; 255
    2e42:	19 f4       	brne	.+6      	; 0x2e4a <xQueueGenericSend+0xdc>
    2e44:	e9 81       	ldd	r30, Y+1	; 0x01
    2e46:	fa 81       	ldd	r31, Y+2	; 0x02
    2e48:	16 8e       	std	Z+30, r1	; 0x1e
    2e4a:	0f 90       	pop	r0
    2e4c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2e4e:	ce 01       	movw	r24, r28
    2e50:	05 96       	adiw	r24, 0x05	; 5
    2e52:	9e 01       	movw	r18, r28
    2e54:	24 5f       	subi	r18, 0xF4	; 244
    2e56:	3f 4f       	sbci	r19, 0xFF	; 255
    2e58:	b9 01       	movw	r22, r18
    2e5a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <xTaskCheckForTimeOut>
    2e5e:	88 23       	and	r24, r24
    2e60:	09 f5       	brne	.+66     	; 0x2ea4 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	0e 94 85 1c 	call	0x390a	; 0x390a <prvIsQueueFull>
    2e6a:	88 23       	and	r24, r24
    2e6c:	a1 f0       	breq	.+40     	; 0x2e96 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	08 96       	adiw	r24, 0x08	; 8
    2e74:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e76:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e78:	b9 01       	movw	r22, r18
    2e7a:	0e 94 94 2a 	call	0x5528	; 0x5528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	9a 81       	ldd	r25, Y+2	; 0x02
    2e82:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2e86:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    2e8a:	88 23       	and	r24, r24
    2e8c:	09 f0       	breq	.+2      	; 0x2e90 <xQueueGenericSend+0x122>
    2e8e:	85 cf       	rjmp	.-246    	; 0x2d9a <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    2e90:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
    2e94:	82 cf       	rjmp	.-252    	; 0x2d9a <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2e9e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    2ea2:	7b cf       	rjmp	.-266    	; 0x2d9a <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea8:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2eac:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2eb0:	1f 86       	std	Y+15, r1	; 0x0f
    2eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	} /*lint -restore */
}
    2eb4:	2f 96       	adiw	r28, 0x0f	; 15
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	2c 97       	sbiw	r28, 0x0c	; 12
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	9f 83       	std	Y+7, r25	; 0x07
    2edc:	8e 83       	std	Y+6, r24	; 0x06
    2ede:	79 87       	std	Y+9, r23	; 0x09
    2ee0:	68 87       	std	Y+8, r22	; 0x08
    2ee2:	5b 87       	std	Y+11, r21	; 0x0b
    2ee4:	4a 87       	std	Y+10, r20	; 0x0a
    2ee6:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    2ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eea:	9f 81       	ldd	r25, Y+7	; 0x07
    2eec:	9b 83       	std	Y+3, r25	; 0x03
    2eee:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2ef0:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2ef2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ef6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ef8:	ea 81       	ldd	r30, Y+2	; 0x02
    2efa:	fb 81       	ldd	r31, Y+3	; 0x03
    2efc:	83 8d       	ldd	r24, Z+27	; 0x1b
    2efe:	98 17       	cp	r25, r24
    2f00:	18 f0       	brcs	.+6      	; 0x2f08 <xQueueGenericSendFromISR+0x42>
    2f02:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f04:	82 30       	cpi	r24, 0x02	; 2
    2f06:	61 f5       	brne	.+88     	; 0x2f60 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2f08:	ea 81       	ldd	r30, Y+2	; 0x02
    2f0a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f0c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f0e:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2f10:	8a 81       	ldd	r24, Y+2	; 0x02
    2f12:	9b 81       	ldd	r25, Y+3	; 0x03
    2f14:	28 85       	ldd	r18, Y+8	; 0x08
    2f16:	39 85       	ldd	r19, Y+9	; 0x09
    2f18:	b9 01       	movw	r22, r18
    2f1a:	4c 85       	ldd	r20, Y+12	; 0x0c
    2f1c:	0e 94 09 1b 	call	0x3612	; 0x3612 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	8f 3f       	cpi	r24, 0xFF	; 255
    2f24:	a9 f4       	brne	.+42     	; 0x2f50 <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f26:	ea 81       	ldd	r30, Y+2	; 0x02
    2f28:	fb 81       	ldd	r31, Y+3	; 0x03
    2f2a:	81 89       	ldd	r24, Z+17	; 0x11
    2f2c:	88 23       	and	r24, r24
    2f2e:	a9 f0       	breq	.+42     	; 0x2f5a <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	9b 81       	ldd	r25, Y+3	; 0x03
    2f34:	41 96       	adiw	r24, 0x11	; 17
    2f36:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    2f3a:	88 23       	and	r24, r24
    2f3c:	71 f0       	breq	.+28     	; 0x2f5a <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2f3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f40:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	51 f0       	breq	.+20     	; 0x2f5a <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2f46:	ea 85       	ldd	r30, Y+10	; 0x0a
    2f48:	fb 85       	ldd	r31, Y+11	; 0x0b
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	80 83       	st	Z, r24
    2f4e:	05 c0       	rjmp	.+10     	; 0x2f5a <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	8f 5f       	subi	r24, 0xFF	; 255
    2f54:	ea 81       	ldd	r30, Y+2	; 0x02
    2f56:	fb 81       	ldd	r31, Y+3	; 0x03
    2f58:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	01 c0       	rjmp	.+2      	; 0x2f62 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2f60:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2f64:	2c 96       	adiw	r28, 0x0c	; 12
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	2a 97       	sbiw	r28, 0x0a	; 10
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	98 87       	std	Y+8, r25	; 0x08
    2f8c:	8f 83       	std	Y+7, r24	; 0x07
    2f8e:	7a 87       	std	Y+10, r23	; 0x0a
    2f90:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    2f92:	8f 81       	ldd	r24, Y+7	; 0x07
    2f94:	98 85       	ldd	r25, Y+8	; 0x08
    2f96:	9c 83       	std	Y+4, r25	; 0x04
    2f98:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2f9a:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2f9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fa2:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    2fa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa8:	93 8d       	ldd	r25, Z+27	; 0x1b
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	89 17       	cp	r24, r25
    2fae:	48 f5       	brcc	.+82     	; 0x3002 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2fb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb4:	86 8d       	ldd	r24, Z+30	; 0x1e
    2fb6:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    2fc6:	a9 f4       	brne	.+42     	; 0x2ff2 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2fc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fca:	fc 81       	ldd	r31, Y+4	; 0x04
    2fcc:	81 89       	ldd	r24, Z+17	; 0x11
    2fce:	88 23       	and	r24, r24
    2fd0:	a9 f0       	breq	.+42     	; 0x2ffc <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd6:	41 96       	adiw	r24, 0x11	; 17
    2fd8:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    2fdc:	88 23       	and	r24, r24
    2fde:	71 f0       	breq	.+28     	; 0x2ffc <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2fe0:	89 85       	ldd	r24, Y+9	; 0x09
    2fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	51 f0       	breq	.+20     	; 0x2ffc <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2fe8:	e9 85       	ldd	r30, Y+9	; 0x09
    2fea:	fa 85       	ldd	r31, Y+10	; 0x0a
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	80 83       	st	Z, r24
    2ff0:	05 c0       	rjmp	.+10     	; 0x2ffc <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	8f 5f       	subi	r24, 0xFF	; 255
    2ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffa:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	8e 83       	std	Y+6, r24	; 0x06
    3000:	01 c0       	rjmp	.+2      	; 0x3004 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3002:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3004:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3006:	2a 96       	adiw	r28, 0x0a	; 10
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	2e 97       	sbiw	r28, 0x0e	; 14
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	99 87       	std	Y+9, r25	; 0x09
    302e:	88 87       	std	Y+8, r24	; 0x08
    3030:	7b 87       	std	Y+11, r23	; 0x0b
    3032:	6a 87       	std	Y+10, r22	; 0x0a
    3034:	5d 87       	std	Y+13, r21	; 0x0d
    3036:	4c 87       	std	Y+12, r20	; 0x0c
BaseType_t xEntryTimeSet = pdFALSE;
    3038:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    303a:	88 85       	ldd	r24, Y+8	; 0x08
    303c:	99 85       	ldd	r25, Y+9	; 0x09
    303e:	9b 83       	std	Y+3, r25	; 0x03
    3040:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3048:	ea 81       	ldd	r30, Y+2	; 0x02
    304a:	fb 81       	ldd	r31, Y+3	; 0x03
    304c:	82 8d       	ldd	r24, Z+26	; 0x1a
    304e:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	88 23       	and	r24, r24
    3054:	f9 f0       	breq	.+62     	; 0x3094 <xQueueReceive+0x7c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	2a 85       	ldd	r18, Y+10	; 0x0a
    305c:	3b 85       	ldd	r19, Y+11	; 0x0b
    305e:	b9 01       	movw	r22, r18
    3060:	0e 94 af 1b 	call	0x375e	; 0x375e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	81 50       	subi	r24, 0x01	; 1
    3068:	ea 81       	ldd	r30, Y+2	; 0x02
    306a:	fb 81       	ldd	r31, Y+3	; 0x03
    306c:	82 8f       	std	Z+26, r24	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    306e:	ea 81       	ldd	r30, Y+2	; 0x02
    3070:	fb 81       	ldd	r31, Y+3	; 0x03
    3072:	80 85       	ldd	r24, Z+8	; 0x08
    3074:	88 23       	and	r24, r24
    3076:	49 f0       	breq	.+18     	; 0x308a <xQueueReceive+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	9b 81       	ldd	r25, Y+3	; 0x03
    307c:	08 96       	adiw	r24, 0x08	; 8
    307e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    3082:	88 23       	and	r24, r24
    3084:	11 f0       	breq	.+4      	; 0x308a <xQueueReceive+0x72>
					{
						queueYIELD_IF_USING_PREEMPTION();
    3086:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    308a:	0f 90       	pop	r0
    308c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	8e 87       	std	Y+14, r24	; 0x0e
    3092:	63 c0       	rjmp	.+198    	; 0x315a <xQueueReceive+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3094:	8c 85       	ldd	r24, Y+12	; 0x0c
    3096:	9d 85       	ldd	r25, Y+13	; 0x0d
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	21 f4       	brne	.+8      	; 0x30a4 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    30a0:	1e 86       	std	Y+14, r1	; 0x0e
    30a2:	5b c0       	rjmp	.+182    	; 0x315a <xQueueReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
    30a4:	8c 81       	ldd	r24, Y+4	; 0x04
    30a6:	88 23       	and	r24, r24
    30a8:	31 f4       	brne	.+12     	; 0x30b6 <xQueueReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    30aa:	ce 01       	movw	r24, r28
    30ac:	05 96       	adiw	r24, 0x05	; 5
    30ae:	0e 94 cc 2b 	call	0x5798	; 0x5798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    30ba:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	0f 92       	push	r0
    30c4:	ea 81       	ldd	r30, Y+2	; 0x02
    30c6:	fb 81       	ldd	r31, Y+3	; 0x03
    30c8:	85 8d       	ldd	r24, Z+29	; 0x1d
    30ca:	8f 3f       	cpi	r24, 0xFF	; 255
    30cc:	19 f4       	brne	.+6      	; 0x30d4 <xQueueReceive+0xbc>
    30ce:	ea 81       	ldd	r30, Y+2	; 0x02
    30d0:	fb 81       	ldd	r31, Y+3	; 0x03
    30d2:	15 8e       	std	Z+29, r1	; 0x1d
    30d4:	ea 81       	ldd	r30, Y+2	; 0x02
    30d6:	fb 81       	ldd	r31, Y+3	; 0x03
    30d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    30da:	8f 3f       	cpi	r24, 0xFF	; 255
    30dc:	19 f4       	brne	.+6      	; 0x30e4 <xQueueReceive+0xcc>
    30de:	ea 81       	ldd	r30, Y+2	; 0x02
    30e0:	fb 81       	ldd	r31, Y+3	; 0x03
    30e2:	16 8e       	std	Z+30, r1	; 0x1e
    30e4:	0f 90       	pop	r0
    30e6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    30e8:	ce 01       	movw	r24, r28
    30ea:	05 96       	adiw	r24, 0x05	; 5
    30ec:	9e 01       	movw	r18, r28
    30ee:	24 5f       	subi	r18, 0xF4	; 244
    30f0:	3f 4f       	sbci	r19, 0xFF	; 255
    30f2:	b9 01       	movw	r22, r18
    30f4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <xTaskCheckForTimeOut>
    30f8:	88 23       	and	r24, r24
    30fa:	09 f5       	brne	.+66     	; 0x313e <xQueueReceive+0x126>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	0e 94 49 1c 	call	0x3892	; 0x3892 <prvIsQueueEmpty>
    3104:	88 23       	and	r24, r24
    3106:	a1 f0       	breq	.+40     	; 0x3130 <xQueueReceive+0x118>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	9b 81       	ldd	r25, Y+3	; 0x03
    310c:	41 96       	adiw	r24, 0x11	; 17
    310e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3110:	3d 85       	ldd	r19, Y+13	; 0x0d
    3112:	b9 01       	movw	r22, r18
    3114:	0e 94 94 2a 	call	0x5528	; 0x5528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	9b 81       	ldd	r25, Y+3	; 0x03
    311c:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3120:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    3124:	88 23       	and	r24, r24
    3126:	09 f0       	breq	.+2      	; 0x312a <xQueueReceive+0x112>
    3128:	8c cf       	rjmp	.-232    	; 0x3042 <xQueueReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    312a:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
    312e:	89 cf       	rjmp	.-238    	; 0x3042 <xQueueReceive+0x2a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	9b 81       	ldd	r25, Y+3	; 0x03
    3134:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3138:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    313c:	82 cf       	rjmp	.-252    	; 0x3042 <xQueueReceive+0x2a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	9b 81       	ldd	r25, Y+3	; 0x03
    3142:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3146:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	0e 94 49 1c 	call	0x3892	; 0x3892 <prvIsQueueEmpty>
    3152:	88 23       	and	r24, r24
    3154:	09 f4       	brne	.+2      	; 0x3158 <xQueueReceive+0x140>
    3156:	75 cf       	rjmp	.-278    	; 0x3042 <xQueueReceive+0x2a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    3158:	1e 86       	std	Y+14, r1	; 0x0e
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    315a:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    315c:	2e 96       	adiw	r28, 0x0e	; 14
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	2c 97       	sbiw	r28, 0x0c	; 12
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	99 87       	std	Y+9, r25	; 0x09
    3184:	88 87       	std	Y+8, r24	; 0x08
    3186:	7b 87       	std	Y+11, r23	; 0x0b
    3188:	6a 87       	std	Y+10, r22	; 0x0a
BaseType_t xEntryTimeSet = pdFALSE;
    318a:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    318c:	88 85       	ldd	r24, Y+8	; 0x08
    318e:	99 85       	ldd	r25, Y+9	; 0x09
    3190:	9b 83       	std	Y+3, r25	; 0x03
    3192:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    319a:	ea 81       	ldd	r30, Y+2	; 0x02
    319c:	fb 81       	ldd	r31, Y+3	; 0x03
    319e:	82 8d       	ldd	r24, Z+26	; 0x1a
    31a0:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	88 23       	and	r24, r24
    31a6:	c1 f0       	breq	.+48     	; 0x31d8 <xQueueSemaphoreTake+0x6a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	81 50       	subi	r24, 0x01	; 1
    31ac:	ea 81       	ldd	r30, Y+2	; 0x02
    31ae:	fb 81       	ldd	r31, Y+3	; 0x03
    31b0:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31b2:	ea 81       	ldd	r30, Y+2	; 0x02
    31b4:	fb 81       	ldd	r31, Y+3	; 0x03
    31b6:	80 85       	ldd	r24, Z+8	; 0x08
    31b8:	88 23       	and	r24, r24
    31ba:	49 f0       	breq	.+18     	; 0x31ce <xQueueSemaphoreTake+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	9b 81       	ldd	r25, Y+3	; 0x03
    31c0:	08 96       	adiw	r24, 0x08	; 8
    31c2:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    31c6:	88 23       	and	r24, r24
    31c8:	11 f0       	breq	.+4      	; 0x31ce <xQueueSemaphoreTake+0x60>
					{
						queueYIELD_IF_USING_PREEMPTION();
    31ca:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    31ce:	0f 90       	pop	r0
    31d0:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	8c 87       	std	Y+12, r24	; 0x0c
    31d6:	63 c0       	rjmp	.+198    	; 0x329e <xQueueSemaphoreTake+0x130>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    31d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    31da:	9b 85       	ldd	r25, Y+11	; 0x0b
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	21 f4       	brne	.+8      	; 0x31e8 <xQueueSemaphoreTake+0x7a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    31e0:	0f 90       	pop	r0
    31e2:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    31e4:	1c 86       	std	Y+12, r1	; 0x0c
    31e6:	5b c0       	rjmp	.+182    	; 0x329e <xQueueSemaphoreTake+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
    31e8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ea:	88 23       	and	r24, r24
    31ec:	31 f4       	brne	.+12     	; 0x31fa <xQueueSemaphoreTake+0x8c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    31ee:	ce 01       	movw	r24, r28
    31f0:	05 96       	adiw	r24, 0x05	; 5
    31f2:	0e 94 cc 2b 	call	0x5798	; 0x5798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    31fa:	0f 90       	pop	r0
    31fc:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    31fe:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	0f 92       	push	r0
    3208:	ea 81       	ldd	r30, Y+2	; 0x02
    320a:	fb 81       	ldd	r31, Y+3	; 0x03
    320c:	85 8d       	ldd	r24, Z+29	; 0x1d
    320e:	8f 3f       	cpi	r24, 0xFF	; 255
    3210:	19 f4       	brne	.+6      	; 0x3218 <xQueueSemaphoreTake+0xaa>
    3212:	ea 81       	ldd	r30, Y+2	; 0x02
    3214:	fb 81       	ldd	r31, Y+3	; 0x03
    3216:	15 8e       	std	Z+29, r1	; 0x1d
    3218:	ea 81       	ldd	r30, Y+2	; 0x02
    321a:	fb 81       	ldd	r31, Y+3	; 0x03
    321c:	86 8d       	ldd	r24, Z+30	; 0x1e
    321e:	8f 3f       	cpi	r24, 0xFF	; 255
    3220:	19 f4       	brne	.+6      	; 0x3228 <xQueueSemaphoreTake+0xba>
    3222:	ea 81       	ldd	r30, Y+2	; 0x02
    3224:	fb 81       	ldd	r31, Y+3	; 0x03
    3226:	16 8e       	std	Z+30, r1	; 0x1e
    3228:	0f 90       	pop	r0
    322a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    322c:	ce 01       	movw	r24, r28
    322e:	05 96       	adiw	r24, 0x05	; 5
    3230:	9e 01       	movw	r18, r28
    3232:	26 5f       	subi	r18, 0xF6	; 246
    3234:	3f 4f       	sbci	r19, 0xFF	; 255
    3236:	b9 01       	movw	r22, r18
    3238:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <xTaskCheckForTimeOut>
    323c:	88 23       	and	r24, r24
    323e:	09 f5       	brne	.+66     	; 0x3282 <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	9b 81       	ldd	r25, Y+3	; 0x03
    3244:	0e 94 49 1c 	call	0x3892	; 0x3892 <prvIsQueueEmpty>
    3248:	88 23       	and	r24, r24
    324a:	a1 f0       	breq	.+40     	; 0x3274 <xQueueSemaphoreTake+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	9b 81       	ldd	r25, Y+3	; 0x03
    3250:	41 96       	adiw	r24, 0x11	; 17
    3252:	2a 85       	ldd	r18, Y+10	; 0x0a
    3254:	3b 85       	ldd	r19, Y+11	; 0x0b
    3256:	b9 01       	movw	r22, r18
    3258:	0e 94 94 2a 	call	0x5528	; 0x5528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	9b 81       	ldd	r25, Y+3	; 0x03
    3260:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3264:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    3268:	88 23       	and	r24, r24
    326a:	09 f0       	breq	.+2      	; 0x326e <xQueueSemaphoreTake+0x100>
    326c:	93 cf       	rjmp	.-218    	; 0x3194 <xQueueSemaphoreTake+0x26>
				{
					portYIELD_WITHIN_API();
    326e:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
    3272:	90 cf       	rjmp	.-224    	; 0x3194 <xQueueSemaphoreTake+0x26>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
    327c:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    3280:	89 cf       	rjmp	.-238    	; 0x3194 <xQueueSemaphoreTake+0x26>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	9b 81       	ldd	r25, Y+3	; 0x03
    3286:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    328a:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	9b 81       	ldd	r25, Y+3	; 0x03
    3292:	0e 94 49 1c 	call	0x3892	; 0x3892 <prvIsQueueEmpty>
    3296:	88 23       	and	r24, r24
    3298:	09 f4       	brne	.+2      	; 0x329c <xQueueSemaphoreTake+0x12e>
    329a:	7c cf       	rjmp	.-264    	; 0x3194 <xQueueSemaphoreTake+0x26>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    329c:	1c 86       	std	Y+12, r1	; 0x0c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    329e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    32a0:	2c 96       	adiw	r28, 0x0c	; 12
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	60 97       	sbiw	r28, 0x10	; 16
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	9b 87       	std	Y+11, r25	; 0x0b
    32c8:	8a 87       	std	Y+10, r24	; 0x0a
    32ca:	7d 87       	std	Y+13, r23	; 0x0d
    32cc:	6c 87       	std	Y+12, r22	; 0x0c
    32ce:	5f 87       	std	Y+15, r21	; 0x0f
    32d0:	4e 87       	std	Y+14, r20	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE;
    32d2:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    32d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d8:	9b 83       	std	Y+3, r25	; 0x03
    32da:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    32e2:	ea 81       	ldd	r30, Y+2	; 0x02
    32e4:	fb 81       	ldd	r31, Y+3	; 0x03
    32e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    32e8:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	88 23       	and	r24, r24
    32ee:	31 f1       	breq	.+76     	; 0x333c <xQueuePeek+0x8a>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    32f0:	ea 81       	ldd	r30, Y+2	; 0x02
    32f2:	fb 81       	ldd	r31, Y+3	; 0x03
    32f4:	86 81       	ldd	r24, Z+6	; 0x06
    32f6:	97 81       	ldd	r25, Z+7	; 0x07
    32f8:	9d 83       	std	Y+5, r25	; 0x05
    32fa:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3300:	2c 85       	ldd	r18, Y+12	; 0x0c
    3302:	3d 85       	ldd	r19, Y+13	; 0x0d
    3304:	b9 01       	movw	r22, r18
    3306:	0e 94 af 1b 	call	0x375e	; 0x375e <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    330a:	ea 81       	ldd	r30, Y+2	; 0x02
    330c:	fb 81       	ldd	r31, Y+3	; 0x03
    330e:	8c 81       	ldd	r24, Y+4	; 0x04
    3310:	9d 81       	ldd	r25, Y+5	; 0x05
    3312:	97 83       	std	Z+7, r25	; 0x07
    3314:	86 83       	std	Z+6, r24	; 0x06

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3316:	ea 81       	ldd	r30, Y+2	; 0x02
    3318:	fb 81       	ldd	r31, Y+3	; 0x03
    331a:	81 89       	ldd	r24, Z+17	; 0x11
    331c:	88 23       	and	r24, r24
    331e:	49 f0       	breq	.+18     	; 0x3332 <xQueuePeek+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	9b 81       	ldd	r25, Y+3	; 0x03
    3324:	41 96       	adiw	r24, 0x11	; 17
    3326:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    332a:	88 23       	and	r24, r24
    332c:	11 f0       	breq	.+4      	; 0x3332 <xQueuePeek+0x80>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    332e:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    3332:	0f 90       	pop	r0
    3334:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	88 8b       	std	Y+16, r24	; 0x10
    333a:	63 c0       	rjmp	.+198    	; 0x3402 <xQueuePeek+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    333c:	8e 85       	ldd	r24, Y+14	; 0x0e
    333e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	21 f4       	brne	.+8      	; 0x334c <xQueuePeek+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3344:	0f 90       	pop	r0
    3346:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3348:	18 8a       	std	Y+16, r1	; 0x10
    334a:	5b c0       	rjmp	.+182    	; 0x3402 <xQueuePeek+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    334c:	8e 81       	ldd	r24, Y+6	; 0x06
    334e:	88 23       	and	r24, r24
    3350:	31 f4       	brne	.+12     	; 0x335e <xQueuePeek+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    3352:	ce 01       	movw	r24, r28
    3354:	07 96       	adiw	r24, 0x07	; 7
    3356:	0e 94 cc 2b 	call	0x5798	; 0x5798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    335e:	0f 90       	pop	r0
    3360:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3362:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	0f 92       	push	r0
    336c:	ea 81       	ldd	r30, Y+2	; 0x02
    336e:	fb 81       	ldd	r31, Y+3	; 0x03
    3370:	85 8d       	ldd	r24, Z+29	; 0x1d
    3372:	8f 3f       	cpi	r24, 0xFF	; 255
    3374:	19 f4       	brne	.+6      	; 0x337c <xQueuePeek+0xca>
    3376:	ea 81       	ldd	r30, Y+2	; 0x02
    3378:	fb 81       	ldd	r31, Y+3	; 0x03
    337a:	15 8e       	std	Z+29, r1	; 0x1d
    337c:	ea 81       	ldd	r30, Y+2	; 0x02
    337e:	fb 81       	ldd	r31, Y+3	; 0x03
    3380:	86 8d       	ldd	r24, Z+30	; 0x1e
    3382:	8f 3f       	cpi	r24, 0xFF	; 255
    3384:	19 f4       	brne	.+6      	; 0x338c <xQueuePeek+0xda>
    3386:	ea 81       	ldd	r30, Y+2	; 0x02
    3388:	fb 81       	ldd	r31, Y+3	; 0x03
    338a:	16 8e       	std	Z+30, r1	; 0x1e
    338c:	0f 90       	pop	r0
    338e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3390:	ce 01       	movw	r24, r28
    3392:	07 96       	adiw	r24, 0x07	; 7
    3394:	9e 01       	movw	r18, r28
    3396:	22 5f       	subi	r18, 0xF2	; 242
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	b9 01       	movw	r22, r18
    339c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <xTaskCheckForTimeOut>
    33a0:	88 23       	and	r24, r24
    33a2:	09 f5       	brne	.+66     	; 0x33e6 <xQueuePeek+0x134>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	9b 81       	ldd	r25, Y+3	; 0x03
    33a8:	0e 94 49 1c 	call	0x3892	; 0x3892 <prvIsQueueEmpty>
    33ac:	88 23       	and	r24, r24
    33ae:	a1 f0       	breq	.+40     	; 0x33d8 <xQueuePeek+0x126>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	9b 81       	ldd	r25, Y+3	; 0x03
    33b4:	41 96       	adiw	r24, 0x11	; 17
    33b6:	2e 85       	ldd	r18, Y+14	; 0x0e
    33b8:	3f 85       	ldd	r19, Y+15	; 0x0f
    33ba:	b9 01       	movw	r22, r18
    33bc:	0e 94 94 2a 	call	0x5528	; 0x5528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	9b 81       	ldd	r25, Y+3	; 0x03
    33c4:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    33c8:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    33cc:	88 23       	and	r24, r24
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <xQueuePeek+0x120>
    33d0:	85 cf       	rjmp	.-246    	; 0x32dc <xQueuePeek+0x2a>
				{
					portYIELD_WITHIN_API();
    33d2:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
    33d6:	82 cf       	rjmp	.-252    	; 0x32dc <xQueuePeek+0x2a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	9b 81       	ldd	r25, Y+3	; 0x03
    33dc:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
    33e0:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    33e4:	7b cf       	rjmp	.-266    	; 0x32dc <xQueuePeek+0x2a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	9b 81       	ldd	r25, Y+3	; 0x03
    33ea:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
    33ee:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	9b 81       	ldd	r25, Y+3	; 0x03
    33f6:	0e 94 49 1c 	call	0x3892	; 0x3892 <prvIsQueueEmpty>
    33fa:	88 23       	and	r24, r24
    33fc:	09 f4       	brne	.+2      	; 0x3400 <xQueuePeek+0x14e>
    33fe:	6e cf       	rjmp	.-292    	; 0x32dc <xQueuePeek+0x2a>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    3400:	18 8a       	std	Y+16, r1	; 0x10
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    3402:	88 89       	ldd	r24, Y+16	; 0x10
}
    3404:	60 96       	adiw	r28, 0x10	; 16
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	2c 97       	sbiw	r28, 0x0c	; 12
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	98 87       	std	Y+8, r25	; 0x08
    342c:	8f 83       	std	Y+7, r24	; 0x07
    342e:	7a 87       	std	Y+10, r23	; 0x0a
    3430:	69 87       	std	Y+9, r22	; 0x09
    3432:	5c 87       	std	Y+12, r21	; 0x0c
    3434:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    3436:	8f 81       	ldd	r24, Y+7	; 0x07
    3438:	98 85       	ldd	r25, Y+8	; 0x08
    343a:	9c 83       	std	Y+4, r25	; 0x04
    343c:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    343e:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3440:	eb 81       	ldd	r30, Y+3	; 0x03
    3442:	fc 81       	ldd	r31, Y+4	; 0x04
    3444:	82 8d       	ldd	r24, Z+26	; 0x1a
    3446:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3448:	8a 81       	ldd	r24, Y+2	; 0x02
    344a:	88 23       	and	r24, r24
    344c:	81 f1       	breq	.+96     	; 0x34ae <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    344e:	eb 81       	ldd	r30, Y+3	; 0x03
    3450:	fc 81       	ldd	r31, Y+4	; 0x04
    3452:	85 8d       	ldd	r24, Z+29	; 0x1d
    3454:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	9c 81       	ldd	r25, Y+4	; 0x04
    345a:	29 85       	ldd	r18, Y+9	; 0x09
    345c:	3a 85       	ldd	r19, Y+10	; 0x0a
    345e:	b9 01       	movw	r22, r18
    3460:	0e 94 af 1b 	call	0x375e	; 0x375e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	81 50       	subi	r24, 0x01	; 1
    3468:	eb 81       	ldd	r30, Y+3	; 0x03
    346a:	fc 81       	ldd	r31, Y+4	; 0x04
    346c:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	8f 3f       	cpi	r24, 0xFF	; 255
    3472:	a9 f4       	brne	.+42     	; 0x349e <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3474:	eb 81       	ldd	r30, Y+3	; 0x03
    3476:	fc 81       	ldd	r31, Y+4	; 0x04
    3478:	80 85       	ldd	r24, Z+8	; 0x08
    347a:	88 23       	and	r24, r24
    347c:	a9 f0       	breq	.+42     	; 0x34a8 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    347e:	8b 81       	ldd	r24, Y+3	; 0x03
    3480:	9c 81       	ldd	r25, Y+4	; 0x04
    3482:	08 96       	adiw	r24, 0x08	; 8
    3484:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    3488:	88 23       	and	r24, r24
    348a:	71 f0       	breq	.+28     	; 0x34a8 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    348c:	8b 85       	ldd	r24, Y+11	; 0x0b
    348e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	51 f0       	breq	.+20     	; 0x34a8 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    3494:	eb 85       	ldd	r30, Y+11	; 0x0b
    3496:	fc 85       	ldd	r31, Y+12	; 0x0c
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	80 83       	st	Z, r24
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	8f 5f       	subi	r24, 0xFF	; 255
    34a2:	eb 81       	ldd	r30, Y+3	; 0x03
    34a4:	fc 81       	ldd	r31, Y+4	; 0x04
    34a6:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	8e 83       	std	Y+6, r24	; 0x06
    34ac:	01 c0       	rjmp	.+2      	; 0x34b0 <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    34ae:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    34b0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    34b2:	2c 96       	adiw	r28, 0x0c	; 12
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	cf 91       	pop	r28
    34c0:	df 91       	pop	r29
    34c2:	08 95       	ret

000034c4 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	2a 97       	sbiw	r28, 0x0a	; 10
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	98 87       	std	Y+8, r25	; 0x08
    34da:	8f 83       	std	Y+7, r24	; 0x07
    34dc:	7a 87       	std	Y+10, r23	; 0x0a
    34de:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    34e0:	8f 81       	ldd	r24, Y+7	; 0x07
    34e2:	98 85       	ldd	r25, Y+8	; 0x08
    34e4:	9a 83       	std	Y+2, r25	; 0x02
    34e6:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    34e8:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    34ea:	e9 81       	ldd	r30, Y+1	; 0x01
    34ec:	fa 81       	ldd	r31, Y+2	; 0x02
    34ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    34f0:	88 23       	and	r24, r24
    34f2:	b1 f0       	breq	.+44     	; 0x3520 <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    34f4:	e9 81       	ldd	r30, Y+1	; 0x01
    34f6:	fa 81       	ldd	r31, Y+2	; 0x02
    34f8:	86 81       	ldd	r24, Z+6	; 0x06
    34fa:	97 81       	ldd	r25, Z+7	; 0x07
    34fc:	9c 83       	std	Y+4, r25	; 0x04
    34fe:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	9a 81       	ldd	r25, Y+2	; 0x02
    3504:	29 85       	ldd	r18, Y+9	; 0x09
    3506:	3a 85       	ldd	r19, Y+10	; 0x0a
    3508:	b9 01       	movw	r22, r18
    350a:	0e 94 af 1b 	call	0x375e	; 0x375e <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    350e:	e9 81       	ldd	r30, Y+1	; 0x01
    3510:	fa 81       	ldd	r31, Y+2	; 0x02
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	9c 81       	ldd	r25, Y+4	; 0x04
    3516:	97 83       	std	Z+7, r25	; 0x07
    3518:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	8e 83       	std	Y+6, r24	; 0x06
    351e:	01 c0       	rjmp	.+2      	; 0x3522 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    3520:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3522:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3524:	2a 96       	adiw	r28, 0x0a	; 10
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	00 d0       	rcall	.+0      	; 0x353c <uxQueueMessagesWaiting+0x6>
    353c:	0f 92       	push	r0
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	9b 83       	std	Y+3, r25	; 0x03
    3544:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    354c:	ea 81       	ldd	r30, Y+2	; 0x02
    354e:	fb 81       	ldd	r31, Y+3	; 0x03
    3550:	82 8d       	ldd	r24, Z+26	; 0x1a
    3552:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3554:	0f 90       	pop	r0
    3556:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3558:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	00 d0       	rcall	.+0      	; 0x356c <uxQueueSpacesAvailable+0x6>
    356c:	00 d0       	rcall	.+0      	; 0x356e <uxQueueSpacesAvailable+0x8>
    356e:	0f 92       	push	r0
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	9d 83       	std	Y+5, r25	; 0x05
    3576:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    3578:	8c 81       	ldd	r24, Y+4	; 0x04
    357a:	9d 81       	ldd	r25, Y+5	; 0x05
    357c:	9a 83       	std	Y+2, r25	; 0x02
    357e:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    3586:	e9 81       	ldd	r30, Y+1	; 0x01
    3588:	fa 81       	ldd	r31, Y+2	; 0x02
    358a:	93 8d       	ldd	r25, Z+27	; 0x1b
    358c:	e9 81       	ldd	r30, Y+1	; 0x01
    358e:	fa 81       	ldd	r31, Y+2	; 0x02
    3590:	82 8d       	ldd	r24, Z+26	; 0x1a
    3592:	29 2f       	mov	r18, r25
    3594:	28 1b       	sub	r18, r24
    3596:	82 2f       	mov	r24, r18
    3598:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    359a:	0f 90       	pop	r0
    359c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    359e:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	cf 91       	pop	r28
    35ac:	df 91       	pop	r29
    35ae:	08 95       	ret

000035b0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    35b0:	df 93       	push	r29
    35b2:	cf 93       	push	r28
    35b4:	00 d0       	rcall	.+0      	; 0x35b6 <uxQueueMessagesWaitingFromISR+0x6>
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <uxQueueMessagesWaitingFromISR+0x8>
    35b8:	0f 92       	push	r0
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	9d 83       	std	Y+5, r25	; 0x05
    35c0:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    35c2:	8c 81       	ldd	r24, Y+4	; 0x04
    35c4:	9d 81       	ldd	r25, Y+5	; 0x05
    35c6:	9a 83       	std	Y+2, r25	; 0x02
    35c8:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
    35ca:	e9 81       	ldd	r30, Y+1	; 0x01
    35cc:	fa 81       	ldd	r31, Y+2	; 0x02
    35ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    35d0:	8b 83       	std	Y+3, r24	; 0x03

	return uxReturn;
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	0f 90       	pop	r0
    35de:	cf 91       	pop	r28
    35e0:	df 91       	pop	r29
    35e2:	08 95       	ret

000035e4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    35e4:	df 93       	push	r29
    35e6:	cf 93       	push	r28
    35e8:	00 d0       	rcall	.+0      	; 0x35ea <vQueueDelete+0x6>
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <vQueueDelete+0x8>
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	9c 83       	std	Y+4, r25	; 0x04
    35f2:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = xQueue;
    35f4:	8b 81       	ldd	r24, Y+3	; 0x03
    35f6:	9c 81       	ldd	r25, Y+4	; 0x04
    35f8:	9a 83       	std	Y+2, r25	; 0x02
    35fa:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3600:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    3604:	0f 90       	pop	r0
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
    361a:	27 97       	sbiw	r28, 0x07	; 7
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	9c 83       	std	Y+4, r25	; 0x04
    3628:	8b 83       	std	Y+3, r24	; 0x03
    362a:	7e 83       	std	Y+6, r23	; 0x06
    362c:	6d 83       	std	Y+5, r22	; 0x05
    362e:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    3630:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3632:	eb 81       	ldd	r30, Y+3	; 0x03
    3634:	fc 81       	ldd	r31, Y+4	; 0x04
    3636:	82 8d       	ldd	r24, Z+26	; 0x1a
    3638:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    363a:	eb 81       	ldd	r30, Y+3	; 0x03
    363c:	fc 81       	ldd	r31, Y+4	; 0x04
    363e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3640:	88 23       	and	r24, r24
    3642:	09 f4       	brne	.+2      	; 0x3646 <prvCopyDataToQueue+0x34>
    3644:	7d c0       	rjmp	.+250    	; 0x3740 <prvCopyDataToQueue+0x12e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    3646:	8f 81       	ldd	r24, Y+7	; 0x07
    3648:	88 23       	and	r24, r24
    364a:	99 f5       	brne	.+102    	; 0x36b2 <prvCopyDataToQueue+0xa0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    364c:	eb 81       	ldd	r30, Y+3	; 0x03
    364e:	fc 81       	ldd	r31, Y+4	; 0x04
    3650:	62 81       	ldd	r22, Z+2	; 0x02
    3652:	73 81       	ldd	r23, Z+3	; 0x03
    3654:	eb 81       	ldd	r30, Y+3	; 0x03
    3656:	fc 81       	ldd	r31, Y+4	; 0x04
    3658:	84 8d       	ldd	r24, Z+28	; 0x1c
    365a:	48 2f       	mov	r20, r24
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	2d 81       	ldd	r18, Y+5	; 0x05
    3660:	3e 81       	ldd	r19, Y+6	; 0x06
    3662:	cb 01       	movw	r24, r22
    3664:	b9 01       	movw	r22, r18
    3666:	0e 94 ab 31 	call	0x6356	; 0x6356 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    366a:	eb 81       	ldd	r30, Y+3	; 0x03
    366c:	fc 81       	ldd	r31, Y+4	; 0x04
    366e:	22 81       	ldd	r18, Z+2	; 0x02
    3670:	33 81       	ldd	r19, Z+3	; 0x03
    3672:	eb 81       	ldd	r30, Y+3	; 0x03
    3674:	fc 81       	ldd	r31, Y+4	; 0x04
    3676:	84 8d       	ldd	r24, Z+28	; 0x1c
    3678:	88 2f       	mov	r24, r24
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	82 0f       	add	r24, r18
    367e:	93 1f       	adc	r25, r19
    3680:	eb 81       	ldd	r30, Y+3	; 0x03
    3682:	fc 81       	ldd	r31, Y+4	; 0x04
    3684:	93 83       	std	Z+3, r25	; 0x03
    3686:	82 83       	std	Z+2, r24	; 0x02
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3688:	eb 81       	ldd	r30, Y+3	; 0x03
    368a:	fc 81       	ldd	r31, Y+4	; 0x04
    368c:	22 81       	ldd	r18, Z+2	; 0x02
    368e:	33 81       	ldd	r19, Z+3	; 0x03
    3690:	eb 81       	ldd	r30, Y+3	; 0x03
    3692:	fc 81       	ldd	r31, Y+4	; 0x04
    3694:	84 81       	ldd	r24, Z+4	; 0x04
    3696:	95 81       	ldd	r25, Z+5	; 0x05
    3698:	28 17       	cp	r18, r24
    369a:	39 07       	cpc	r19, r25
    369c:	08 f4       	brcc	.+2      	; 0x36a0 <prvCopyDataToQueue+0x8e>
    369e:	50 c0       	rjmp	.+160    	; 0x3740 <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    36a0:	eb 81       	ldd	r30, Y+3	; 0x03
    36a2:	fc 81       	ldd	r31, Y+4	; 0x04
    36a4:	80 81       	ld	r24, Z
    36a6:	91 81       	ldd	r25, Z+1	; 0x01
    36a8:	eb 81       	ldd	r30, Y+3	; 0x03
    36aa:	fc 81       	ldd	r31, Y+4	; 0x04
    36ac:	93 83       	std	Z+3, r25	; 0x03
    36ae:	82 83       	std	Z+2, r24	; 0x02
    36b0:	47 c0       	rjmp	.+142    	; 0x3740 <prvCopyDataToQueue+0x12e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    36b2:	eb 81       	ldd	r30, Y+3	; 0x03
    36b4:	fc 81       	ldd	r31, Y+4	; 0x04
    36b6:	66 81       	ldd	r22, Z+6	; 0x06
    36b8:	77 81       	ldd	r23, Z+7	; 0x07
    36ba:	eb 81       	ldd	r30, Y+3	; 0x03
    36bc:	fc 81       	ldd	r31, Y+4	; 0x04
    36be:	84 8d       	ldd	r24, Z+28	; 0x1c
    36c0:	48 2f       	mov	r20, r24
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	2d 81       	ldd	r18, Y+5	; 0x05
    36c6:	3e 81       	ldd	r19, Y+6	; 0x06
    36c8:	cb 01       	movw	r24, r22
    36ca:	b9 01       	movw	r22, r18
    36cc:	0e 94 ab 31 	call	0x6356	; 0x6356 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    36d0:	eb 81       	ldd	r30, Y+3	; 0x03
    36d2:	fc 81       	ldd	r31, Y+4	; 0x04
    36d4:	26 81       	ldd	r18, Z+6	; 0x06
    36d6:	37 81       	ldd	r19, Z+7	; 0x07
    36d8:	eb 81       	ldd	r30, Y+3	; 0x03
    36da:	fc 81       	ldd	r31, Y+4	; 0x04
    36dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    36de:	88 2f       	mov	r24, r24
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	90 95       	com	r25
    36e4:	81 95       	neg	r24
    36e6:	9f 4f       	sbci	r25, 0xFF	; 255
    36e8:	82 0f       	add	r24, r18
    36ea:	93 1f       	adc	r25, r19
    36ec:	eb 81       	ldd	r30, Y+3	; 0x03
    36ee:	fc 81       	ldd	r31, Y+4	; 0x04
    36f0:	97 83       	std	Z+7, r25	; 0x07
    36f2:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    36f4:	eb 81       	ldd	r30, Y+3	; 0x03
    36f6:	fc 81       	ldd	r31, Y+4	; 0x04
    36f8:	26 81       	ldd	r18, Z+6	; 0x06
    36fa:	37 81       	ldd	r19, Z+7	; 0x07
    36fc:	eb 81       	ldd	r30, Y+3	; 0x03
    36fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3700:	80 81       	ld	r24, Z
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	28 17       	cp	r18, r24
    3706:	39 07       	cpc	r19, r25
    3708:	90 f4       	brcc	.+36     	; 0x372e <prvCopyDataToQueue+0x11c>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    370a:	eb 81       	ldd	r30, Y+3	; 0x03
    370c:	fc 81       	ldd	r31, Y+4	; 0x04
    370e:	24 81       	ldd	r18, Z+4	; 0x04
    3710:	35 81       	ldd	r19, Z+5	; 0x05
    3712:	eb 81       	ldd	r30, Y+3	; 0x03
    3714:	fc 81       	ldd	r31, Y+4	; 0x04
    3716:	84 8d       	ldd	r24, Z+28	; 0x1c
    3718:	88 2f       	mov	r24, r24
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	90 95       	com	r25
    371e:	81 95       	neg	r24
    3720:	9f 4f       	sbci	r25, 0xFF	; 255
    3722:	82 0f       	add	r24, r18
    3724:	93 1f       	adc	r25, r19
    3726:	eb 81       	ldd	r30, Y+3	; 0x03
    3728:	fc 81       	ldd	r31, Y+4	; 0x04
    372a:	97 83       	std	Z+7, r25	; 0x07
    372c:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    372e:	8f 81       	ldd	r24, Y+7	; 0x07
    3730:	82 30       	cpi	r24, 0x02	; 2
    3732:	31 f4       	brne	.+12     	; 0x3740 <prvCopyDataToQueue+0x12e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	88 23       	and	r24, r24
    3738:	19 f0       	breq	.+6      	; 0x3740 <prvCopyDataToQueue+0x12e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	81 50       	subi	r24, 0x01	; 1
    373e:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	8f 5f       	subi	r24, 0xFF	; 255
    3744:	eb 81       	ldd	r30, Y+3	; 0x03
    3746:	fc 81       	ldd	r31, Y+4	; 0x04
    3748:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    374a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    374c:	27 96       	adiw	r28, 0x07	; 7
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	cd bf       	out	0x3d, r28	; 61
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	00 d0       	rcall	.+0      	; 0x3764 <prvCopyDataFromQueue+0x6>
    3764:	00 d0       	rcall	.+0      	; 0x3766 <prvCopyDataFromQueue+0x8>
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	9a 83       	std	Y+2, r25	; 0x02
    376c:	89 83       	std	Y+1, r24	; 0x01
    376e:	7c 83       	std	Y+4, r23	; 0x04
    3770:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3772:	e9 81       	ldd	r30, Y+1	; 0x01
    3774:	fa 81       	ldd	r31, Y+2	; 0x02
    3776:	84 8d       	ldd	r24, Z+28	; 0x1c
    3778:	88 23       	and	r24, r24
    377a:	89 f1       	breq	.+98     	; 0x37de <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    377c:	e9 81       	ldd	r30, Y+1	; 0x01
    377e:	fa 81       	ldd	r31, Y+2	; 0x02
    3780:	26 81       	ldd	r18, Z+6	; 0x06
    3782:	37 81       	ldd	r19, Z+7	; 0x07
    3784:	e9 81       	ldd	r30, Y+1	; 0x01
    3786:	fa 81       	ldd	r31, Y+2	; 0x02
    3788:	84 8d       	ldd	r24, Z+28	; 0x1c
    378a:	88 2f       	mov	r24, r24
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	82 0f       	add	r24, r18
    3790:	93 1f       	adc	r25, r19
    3792:	e9 81       	ldd	r30, Y+1	; 0x01
    3794:	fa 81       	ldd	r31, Y+2	; 0x02
    3796:	97 83       	std	Z+7, r25	; 0x07
    3798:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    379a:	e9 81       	ldd	r30, Y+1	; 0x01
    379c:	fa 81       	ldd	r31, Y+2	; 0x02
    379e:	26 81       	ldd	r18, Z+6	; 0x06
    37a0:	37 81       	ldd	r19, Z+7	; 0x07
    37a2:	e9 81       	ldd	r30, Y+1	; 0x01
    37a4:	fa 81       	ldd	r31, Y+2	; 0x02
    37a6:	84 81       	ldd	r24, Z+4	; 0x04
    37a8:	95 81       	ldd	r25, Z+5	; 0x05
    37aa:	28 17       	cp	r18, r24
    37ac:	39 07       	cpc	r19, r25
    37ae:	40 f0       	brcs	.+16     	; 0x37c0 <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    37b0:	e9 81       	ldd	r30, Y+1	; 0x01
    37b2:	fa 81       	ldd	r31, Y+2	; 0x02
    37b4:	80 81       	ld	r24, Z
    37b6:	91 81       	ldd	r25, Z+1	; 0x01
    37b8:	e9 81       	ldd	r30, Y+1	; 0x01
    37ba:	fa 81       	ldd	r31, Y+2	; 0x02
    37bc:	97 83       	std	Z+7, r25	; 0x07
    37be:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    37c0:	e9 81       	ldd	r30, Y+1	; 0x01
    37c2:	fa 81       	ldd	r31, Y+2	; 0x02
    37c4:	46 81       	ldd	r20, Z+6	; 0x06
    37c6:	57 81       	ldd	r21, Z+7	; 0x07
    37c8:	e9 81       	ldd	r30, Y+1	; 0x01
    37ca:	fa 81       	ldd	r31, Y+2	; 0x02
    37cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    37ce:	28 2f       	mov	r18, r24
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	9c 81       	ldd	r25, Y+4	; 0x04
    37d6:	ba 01       	movw	r22, r20
    37d8:	a9 01       	movw	r20, r18
    37da:	0e 94 ab 31 	call	0x6356	; 0x6356 <memcpy>
	}
}
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	08 95       	ret

000037ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	00 d0       	rcall	.+0      	; 0x37f2 <prvUnlockQueue+0x6>
    37f2:	00 d0       	rcall	.+0      	; 0x37f4 <prvUnlockQueue+0x8>
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	9c 83       	std	Y+4, r25	; 0x04
    37fa:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    3802:	eb 81       	ldd	r30, Y+3	; 0x03
    3804:	fc 81       	ldd	r31, Y+4	; 0x04
    3806:	86 8d       	ldd	r24, Z+30	; 0x1e
    3808:	8a 83       	std	Y+2, r24	; 0x02
    380a:	11 c0       	rjmp	.+34     	; 0x382e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    380c:	eb 81       	ldd	r30, Y+3	; 0x03
    380e:	fc 81       	ldd	r31, Y+4	; 0x04
    3810:	81 89       	ldd	r24, Z+17	; 0x11
    3812:	88 23       	and	r24, r24
    3814:	79 f0       	breq	.+30     	; 0x3834 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3816:	8b 81       	ldd	r24, Y+3	; 0x03
    3818:	9c 81       	ldd	r25, Y+4	; 0x04
    381a:	41 96       	adiw	r24, 0x11	; 17
    381c:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    3820:	88 23       	and	r24, r24
    3822:	11 f0       	breq	.+4      	; 0x3828 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    3824:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	81 50       	subi	r24, 0x01	; 1
    382c:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    382e:	8a 81       	ldd	r24, Y+2	; 0x02
    3830:	18 16       	cp	r1, r24
    3832:	64 f3       	brlt	.-40     	; 0x380c <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    3834:	eb 81       	ldd	r30, Y+3	; 0x03
    3836:	fc 81       	ldd	r31, Y+4	; 0x04
    3838:	8f ef       	ldi	r24, 0xFF	; 255
    383a:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    383c:	0f 90       	pop	r0
    383e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	f8 94       	cli
    3844:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    3846:	eb 81       	ldd	r30, Y+3	; 0x03
    3848:	fc 81       	ldd	r31, Y+4	; 0x04
    384a:	85 8d       	ldd	r24, Z+29	; 0x1d
    384c:	89 83       	std	Y+1, r24	; 0x01
    384e:	11 c0       	rjmp	.+34     	; 0x3872 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3850:	eb 81       	ldd	r30, Y+3	; 0x03
    3852:	fc 81       	ldd	r31, Y+4	; 0x04
    3854:	80 85       	ldd	r24, Z+8	; 0x08
    3856:	88 23       	and	r24, r24
    3858:	79 f0       	breq	.+30     	; 0x3878 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	08 96       	adiw	r24, 0x08	; 8
    3860:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <xTaskRemoveFromEventList>
    3864:	88 23       	and	r24, r24
    3866:	11 f0       	breq	.+4      	; 0x386c <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    3868:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	81 50       	subi	r24, 0x01	; 1
    3870:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	18 16       	cp	r1, r24
    3876:	64 f3       	brlt	.-40     	; 0x3850 <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    3878:	eb 81       	ldd	r30, Y+3	; 0x03
    387a:	fc 81       	ldd	r31, Y+4	; 0x04
    387c:	8f ef       	ldi	r24, 0xFF	; 255
    387e:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3880:	0f 90       	pop	r0
    3882:	0f be       	out	0x3f, r0	; 63
}
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	00 d0       	rcall	.+0      	; 0x3898 <prvIsQueueEmpty+0x6>
    3898:	0f 92       	push	r0
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	9b 83       	std	Y+3, r25	; 0x03
    38a0:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	f8 94       	cli
    38a6:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    38a8:	ea 81       	ldd	r30, Y+2	; 0x02
    38aa:	fb 81       	ldd	r31, Y+3	; 0x03
    38ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    38ae:	88 23       	and	r24, r24
    38b0:	19 f4       	brne	.+6      	; 0x38b8 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    38b8:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    38ba:	0f 90       	pop	r0
    38bc:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    38be:	89 81       	ldd	r24, Y+1	; 0x01
}
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	08 95       	ret

000038cc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    38cc:	df 93       	push	r29
    38ce:	cf 93       	push	r28
    38d0:	00 d0       	rcall	.+0      	; 0x38d2 <xQueueIsQueueEmptyFromISR+0x6>
    38d2:	00 d0       	rcall	.+0      	; 0x38d4 <xQueueIsQueueEmptyFromISR+0x8>
    38d4:	0f 92       	push	r0
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	9d 83       	std	Y+5, r25	; 0x05
    38dc:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    38de:	8c 81       	ldd	r24, Y+4	; 0x04
    38e0:	9d 81       	ldd	r25, Y+5	; 0x05
    38e2:	9a 83       	std	Y+2, r25	; 0x02
    38e4:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    38e6:	e9 81       	ldd	r30, Y+1	; 0x01
    38e8:	fa 81       	ldd	r31, Y+2	; 0x02
    38ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    38ec:	88 23       	and	r24, r24
    38ee:	19 f4       	brne	.+6      	; 0x38f6 <xQueueIsQueueEmptyFromISR+0x2a>
	{
		xReturn = pdTRUE;
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	8b 83       	std	Y+3, r24	; 0x03
    38f4:	01 c0       	rjmp	.+2      	; 0x38f8 <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    38f6:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret

0000390a <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	00 d0       	rcall	.+0      	; 0x3910 <prvIsQueueFull+0x6>
    3910:	0f 92       	push	r0
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	9b 83       	std	Y+3, r25	; 0x03
    3918:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    391a:	0f b6       	in	r0, 0x3f	; 63
    391c:	f8 94       	cli
    391e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3920:	ea 81       	ldd	r30, Y+2	; 0x02
    3922:	fb 81       	ldd	r31, Y+3	; 0x03
    3924:	92 8d       	ldd	r25, Z+26	; 0x1a
    3926:	ea 81       	ldd	r30, Y+2	; 0x02
    3928:	fb 81       	ldd	r31, Y+3	; 0x03
    392a:	83 8d       	ldd	r24, Z+27	; 0x1b
    392c:	98 17       	cp	r25, r24
    392e:	19 f4       	brne	.+6      	; 0x3936 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	89 83       	std	Y+1, r24	; 0x01
    3934:	01 c0       	rjmp	.+2      	; 0x3938 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    3936:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3938:	0f 90       	pop	r0
    393a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    393c:	89 81       	ldd	r24, Y+1	; 0x01
}
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	cf 91       	pop	r28
    3946:	df 91       	pop	r29
    3948:	08 95       	ret

0000394a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	00 d0       	rcall	.+0      	; 0x3950 <xQueueIsQueueFullFromISR+0x6>
    3950:	00 d0       	rcall	.+0      	; 0x3952 <xQueueIsQueueFullFromISR+0x8>
    3952:	0f 92       	push	r0
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	9d 83       	std	Y+5, r25	; 0x05
    395a:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    395c:	8c 81       	ldd	r24, Y+4	; 0x04
    395e:	9d 81       	ldd	r25, Y+5	; 0x05
    3960:	9a 83       	std	Y+2, r25	; 0x02
    3962:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3964:	e9 81       	ldd	r30, Y+1	; 0x01
    3966:	fa 81       	ldd	r31, Y+2	; 0x02
    3968:	92 8d       	ldd	r25, Z+26	; 0x1a
    396a:	e9 81       	ldd	r30, Y+1	; 0x01
    396c:	fa 81       	ldd	r31, Y+2	; 0x02
    396e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3970:	98 17       	cp	r25, r24
    3972:	19 f4       	brne	.+6      	; 0x397a <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	8b 83       	std	Y+3, r24	; 0x03
    3978:	01 c0       	rjmp	.+2      	; 0x397c <xQueueIsQueueFullFromISR+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    397a:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    397c:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
    3986:	0f 90       	pop	r0
    3988:	cf 91       	pop	r28
    398a:	df 91       	pop	r29
    398c:	08 95       	ret

0000398e <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
    398e:	0f 93       	push	r16
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	cd b7       	in	r28, 0x3d	; 61
    3996:	de b7       	in	r29, 0x3e	; 62
    3998:	28 97       	sbiw	r28, 0x08	; 8
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	f8 94       	cli
    399e:	de bf       	out	0x3e, r29	; 62
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	cd bf       	out	0x3d, r28	; 61
    39a4:	9d 83       	std	Y+5, r25	; 0x05
    39a6:	8c 83       	std	Y+4, r24	; 0x04
    39a8:	7f 83       	std	Y+7, r23	; 0x07
    39aa:	6e 83       	std	Y+6, r22	; 0x06
    39ac:	48 87       	std	Y+8, r20	; 0x08

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
    39ae:	88 85       	ldd	r24, Y+8	; 0x08
    39b0:	81 30       	cpi	r24, 0x01	; 1
    39b2:	19 f4       	brne	.+6      	; 0x39ba <xStreamBufferGenericCreate+0x2c>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	89 83       	std	Y+1, r24	; 0x01
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <xStreamBufferGenericCreate+0x2e>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
    39ba:	19 82       	std	Y+1, r1	; 0x01
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
    39bc:	8e 81       	ldd	r24, Y+6	; 0x06
    39be:	9f 81       	ldd	r25, Y+7	; 0x07
    39c0:	00 97       	sbiw	r24, 0x00	; 0
    39c2:	21 f4       	brne	.+8      	; 0x39cc <xStreamBufferGenericCreate+0x3e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	9f 83       	std	Y+7, r25	; 0x07
    39ca:	8e 83       	std	Y+6, r24	; 0x06
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
    39cc:	8c 81       	ldd	r24, Y+4	; 0x04
    39ce:	9d 81       	ldd	r25, Y+5	; 0x05
    39d0:	01 96       	adiw	r24, 0x01	; 1
    39d2:	9d 83       	std	Y+5, r25	; 0x05
    39d4:	8c 83       	std	Y+4, r24	; 0x04
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
    39d6:	8c 81       	ldd	r24, Y+4	; 0x04
    39d8:	9d 81       	ldd	r25, Y+5	; 0x05
    39da:	0f 96       	adiw	r24, 0x0f	; 15
    39dc:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    39e0:	9b 83       	std	Y+3, r25	; 0x03
    39e2:	8a 83       	std	Y+2, r24	; 0x02

		if( pucAllocatedMemory != NULL )
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	9b 81       	ldd	r25, Y+3	; 0x03
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	89 f0       	breq	.+34     	; 0x3a0e <xStreamBufferGenericCreate+0x80>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
    39ec:	6a 81       	ldd	r22, Y+2	; 0x02
    39ee:	7b 81       	ldd	r23, Y+3	; 0x03
    39f0:	8a 81       	ldd	r24, Y+2	; 0x02
    39f2:	9b 81       	ldd	r25, Y+3	; 0x03
    39f4:	9c 01       	movw	r18, r24
    39f6:	21 5f       	subi	r18, 0xF1	; 241
    39f8:	3f 4f       	sbci	r19, 0xFF	; 255
    39fa:	4c 81       	ldd	r20, Y+4	; 0x04
    39fc:	5d 81       	ldd	r21, Y+5	; 0x05
    39fe:	ee 81       	ldd	r30, Y+6	; 0x06
    3a00:	ff 81       	ldd	r31, Y+7	; 0x07
    3a02:	cb 01       	movw	r24, r22
    3a04:	b9 01       	movw	r22, r18
    3a06:	9f 01       	movw	r18, r30
    3a08:	09 81       	ldd	r16, Y+1	; 0x01
    3a0a:	0e 94 1f 24 	call	0x483e	; 0x483e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	9b 81       	ldd	r25, Y+3	; 0x03
	}
    3a12:	28 96       	adiw	r28, 0x08	; 8
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	0f 91       	pop	r16
    3a24:	08 95       	ret

00003a26 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
    3a26:	df 93       	push	r29
    3a28:	cf 93       	push	r28
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <vStreamBufferDelete+0x6>
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <vStreamBufferDelete+0x8>
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	9c 83       	std	Y+4, r25	; 0x04
    3a34:	8b 83       	std	Y+3, r24	; 0x03
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3a:	9a 83       	std	Y+2, r25	; 0x02
    3a3c:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
    3a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a40:	fa 81       	ldd	r31, Y+2	; 0x02
    3a42:	86 85       	ldd	r24, Z+14	; 0x0e
    3a44:	88 2f       	mov	r24, r24
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	82 70       	andi	r24, 0x02	; 2
    3a4a:	90 70       	andi	r25, 0x00	; 0
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	29 f4       	brne	.+10     	; 0x3a5a <vStreamBufferDelete+0x34>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	9a 81       	ldd	r25, Y+2	; 0x02
    3a54:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
    3a58:	08 c0       	rjmp	.+16     	; 0x3a6a <vStreamBufferDelete+0x44>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	70 e0       	ldi	r23, 0x00	; 0
    3a62:	4f e0       	ldi	r20, 0x0F	; 15
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	0e 94 b4 31 	call	0x6368	; 0x6368 <memset>
	}
}
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	cf 91       	pop	r28
    3a74:	df 91       	pop	r29
    3a76:	08 95       	ret

00003a78 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
    3a78:	0f 93       	push	r16
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <xStreamBufferReset+0x8>
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <xStreamBufferReset+0xa>
    3a82:	0f 92       	push	r0
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	9d 83       	std	Y+5, r25	; 0x05
    3a8a:	8c 83       	std	Y+4, r24	; 0x04
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a90:	9b 83       	std	Y+3, r25	; 0x03
    3a92:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn = pdFAIL;
    3a94:	19 82       	std	Y+1, r1	; 0x01
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	0f 92       	push	r0
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
    3a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    3aa0:	80 85       	ldd	r24, Z+8	; 0x08
    3aa2:	91 85       	ldd	r25, Z+9	; 0x09
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	f1 f4       	brne	.+60     	; 0x3ae4 <xStreamBufferReset+0x6c>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
    3aa8:	ea 81       	ldd	r30, Y+2	; 0x02
    3aaa:	fb 81       	ldd	r31, Y+3	; 0x03
    3aac:	82 85       	ldd	r24, Z+10	; 0x0a
    3aae:	93 85       	ldd	r25, Z+11	; 0x0b
    3ab0:	00 97       	sbiw	r24, 0x00	; 0
    3ab2:	c1 f4       	brne	.+48     	; 0x3ae4 <xStreamBufferReset+0x6c>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
    3ab4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ab6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ab8:	24 85       	ldd	r18, Z+12	; 0x0c
    3aba:	35 85       	ldd	r19, Z+13	; 0x0d
    3abc:	ea 81       	ldd	r30, Y+2	; 0x02
    3abe:	fb 81       	ldd	r31, Y+3	; 0x03
    3ac0:	44 81       	ldd	r20, Z+4	; 0x04
    3ac2:	55 81       	ldd	r21, Z+5	; 0x05
    3ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ac8:	a6 81       	ldd	r26, Z+6	; 0x06
    3aca:	b7 81       	ldd	r27, Z+7	; 0x07
    3acc:	ea 81       	ldd	r30, Y+2	; 0x02
    3ace:	fb 81       	ldd	r31, Y+3	; 0x03
    3ad0:	e6 85       	ldd	r30, Z+14	; 0x0e
    3ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad6:	b9 01       	movw	r22, r18
    3ad8:	9d 01       	movw	r18, r26
    3ada:	0e 2f       	mov	r16, r30
    3adc:	0e 94 1f 24 	call	0x483e	; 0x483e <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	89 83       	std	Y+1, r24	; 0x01

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
    3ae4:	0f 90       	pop	r0
    3ae6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3aea:	0f 90       	pop	r0
    3aec:	0f 90       	pop	r0
    3aee:	0f 90       	pop	r0
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

00003afc <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	27 97       	sbiw	r28, 0x07	; 7
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	9d 83       	std	Y+5, r25	; 0x05
    3b12:	8c 83       	std	Y+4, r24	; 0x04
    3b14:	7f 83       	std	Y+7, r23	; 0x07
    3b16:	6e 83       	std	Y+6, r22	; 0x06
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3b18:	8c 81       	ldd	r24, Y+4	; 0x04
    3b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b1c:	9b 83       	std	Y+3, r25	; 0x03
    3b1e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
    3b20:	8e 81       	ldd	r24, Y+6	; 0x06
    3b22:	9f 81       	ldd	r25, Y+7	; 0x07
    3b24:	00 97       	sbiw	r24, 0x00	; 0
    3b26:	21 f4       	brne	.+8      	; 0x3b30 <xStreamBufferSetTriggerLevel+0x34>
	{
		xTriggerLevel = ( size_t ) 1;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	9f 83       	std	Y+7, r25	; 0x07
    3b2e:	8e 83       	std	Y+6, r24	; 0x06
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
    3b30:	ea 81       	ldd	r30, Y+2	; 0x02
    3b32:	fb 81       	ldd	r31, Y+3	; 0x03
    3b34:	24 81       	ldd	r18, Z+4	; 0x04
    3b36:	35 81       	ldd	r19, Z+5	; 0x05
    3b38:	8e 81       	ldd	r24, Y+6	; 0x06
    3b3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b3c:	28 17       	cp	r18, r24
    3b3e:	39 07       	cpc	r19, r25
    3b40:	48 f0       	brcs	.+18     	; 0x3b54 <xStreamBufferSetTriggerLevel+0x58>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
    3b42:	ea 81       	ldd	r30, Y+2	; 0x02
    3b44:	fb 81       	ldd	r31, Y+3	; 0x03
    3b46:	8e 81       	ldd	r24, Y+6	; 0x06
    3b48:	9f 81       	ldd	r25, Y+7	; 0x07
    3b4a:	97 83       	std	Z+7, r25	; 0x07
    3b4c:	86 83       	std	Z+6, r24	; 0x06
		xReturn = pdPASS;
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	89 83       	std	Y+1, r24	; 0x01
    3b52:	01 c0       	rjmp	.+2      	; 0x3b56 <xStreamBufferSetTriggerLevel+0x5a>
	}
	else
	{
		xReturn = pdFALSE;
    3b54:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b58:	27 96       	adiw	r28, 0x07	; 7
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	f8 94       	cli
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    3b6a:	df 93       	push	r29
    3b6c:	cf 93       	push	r28
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <xStreamBufferSpacesAvailable+0x6>
    3b70:	00 d0       	rcall	.+0      	; 0x3b72 <xStreamBufferSpacesAvailable+0x8>
    3b72:	00 d0       	rcall	.+0      	; 0x3b74 <xStreamBufferSpacesAvailable+0xa>
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
    3b78:	9e 83       	std	Y+6, r25	; 0x06
    3b7a:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b80:	9c 83       	std	Y+4, r25	; 0x04
    3b82:	8b 83       	std	Y+3, r24	; 0x03
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    3b84:	eb 81       	ldd	r30, Y+3	; 0x03
    3b86:	fc 81       	ldd	r31, Y+4	; 0x04
    3b88:	24 81       	ldd	r18, Z+4	; 0x04
    3b8a:	35 81       	ldd	r19, Z+5	; 0x05
    3b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b90:	80 81       	ld	r24, Z
    3b92:	91 81       	ldd	r25, Z+1	; 0x01
    3b94:	82 0f       	add	r24, r18
    3b96:	93 1f       	adc	r25, r19
    3b98:	9a 83       	std	Y+2, r25	; 0x02
    3b9a:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= pxStreamBuffer->xHead;
    3b9c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b9e:	fc 81       	ldd	r31, Y+4	; 0x04
    3ba0:	22 81       	ldd	r18, Z+2	; 0x02
    3ba2:	33 81       	ldd	r19, Z+3	; 0x03
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba8:	82 1b       	sub	r24, r18
    3baa:	93 0b       	sbc	r25, r19
    3bac:	9a 83       	std	Y+2, r25	; 0x02
    3bae:	89 83       	std	Y+1, r24	; 0x01
	xSpace -= ( size_t ) 1;
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb4:	01 97       	sbiw	r24, 0x01	; 1
    3bb6:	9a 83       	std	Y+2, r25	; 0x02
    3bb8:	89 83       	std	Y+1, r24	; 0x01

	if( xSpace >= pxStreamBuffer->xLength )
    3bba:	eb 81       	ldd	r30, Y+3	; 0x03
    3bbc:	fc 81       	ldd	r31, Y+4	; 0x04
    3bbe:	24 81       	ldd	r18, Z+4	; 0x04
    3bc0:	35 81       	ldd	r19, Z+5	; 0x05
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc6:	82 17       	cp	r24, r18
    3bc8:	93 07       	cpc	r25, r19
    3bca:	50 f0       	brcs	.+20     	; 0x3be0 <xStreamBufferSpacesAvailable+0x76>
	{
		xSpace -= pxStreamBuffer->xLength;
    3bcc:	eb 81       	ldd	r30, Y+3	; 0x03
    3bce:	fc 81       	ldd	r31, Y+4	; 0x04
    3bd0:	24 81       	ldd	r18, Z+4	; 0x04
    3bd2:	35 81       	ldd	r19, Z+5	; 0x05
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	82 1b       	sub	r24, r18
    3bda:	93 0b       	sbc	r25, r19
    3bdc:	9a 83       	std	Y+2, r25	; 0x02
    3bde:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3be4:	26 96       	adiw	r28, 0x06	; 6
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	cf 91       	pop	r28
    3bf2:	df 91       	pop	r29
    3bf4:	08 95       	ret

00003bf6 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
    3bf6:	df 93       	push	r29
    3bf8:	cf 93       	push	r28
    3bfa:	00 d0       	rcall	.+0      	; 0x3bfc <xStreamBufferBytesAvailable+0x6>
    3bfc:	00 d0       	rcall	.+0      	; 0x3bfe <xStreamBufferBytesAvailable+0x8>
    3bfe:	00 d0       	rcall	.+0      	; 0x3c00 <xStreamBufferBytesAvailable+0xa>
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    3c04:	9e 83       	std	Y+6, r25	; 0x06
    3c06:	8d 83       	std	Y+5, r24	; 0x05
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3c08:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c0c:	9c 83       	std	Y+4, r25	; 0x04
    3c0e:	8b 83       	std	Y+3, r24	; 0x03
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
    3c10:	8b 81       	ldd	r24, Y+3	; 0x03
    3c12:	9c 81       	ldd	r25, Y+4	; 0x04
    3c14:	0e 94 e5 23 	call	0x47ca	; 0x47ca <prvBytesInBuffer>
    3c18:	9a 83       	std	Y+2, r25	; 0x02
    3c1a:	89 83       	std	Y+1, r24	; 0x01
	return xReturn;
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3c20:	26 96       	adiw	r28, 0x06	; 6
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	cd bf       	out	0x3d, r28	; 61
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
    3c32:	ef 92       	push	r14
    3c34:	ff 92       	push	r15
    3c36:	0f 93       	push	r16
    3c38:	1f 93       	push	r17
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	63 97       	sbiw	r28, 0x13	; 19
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	de bf       	out	0x3e, r29	; 62
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	9d 87       	std	Y+13, r25	; 0x0d
    3c50:	8c 87       	std	Y+12, r24	; 0x0c
    3c52:	7f 87       	std	Y+15, r23	; 0x0f
    3c54:	6e 87       	std	Y+14, r22	; 0x0e
    3c56:	59 8b       	std	Y+17, r21	; 0x11
    3c58:	48 8b       	std	Y+16, r20	; 0x10
    3c5a:	3b 8b       	std	Y+19, r19	; 0x13
    3c5c:	2a 8b       	std	Y+18, r18	; 0x12
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3c5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c60:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c62:	98 87       	std	Y+8, r25	; 0x08
    3c64:	8f 83       	std	Y+7, r24	; 0x07
size_t xReturn, xSpace = 0;
    3c66:	1c 82       	std	Y+4, r1	; 0x04
    3c68:	1b 82       	std	Y+3, r1	; 0x03
size_t xRequiredSpace = xDataLengthBytes;
    3c6a:	88 89       	ldd	r24, Y+16	; 0x10
    3c6c:	99 89       	ldd	r25, Y+17	; 0x11
    3c6e:	9a 83       	std	Y+2, r25	; 0x02
    3c70:	89 83       	std	Y+1, r24	; 0x01

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3c72:	ef 81       	ldd	r30, Y+7	; 0x07
    3c74:	f8 85       	ldd	r31, Y+8	; 0x08
    3c76:	86 85       	ldd	r24, Z+14	; 0x0e
    3c78:	88 2f       	mov	r24, r24
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	81 70       	andi	r24, 0x01	; 1
    3c7e:	90 70       	andi	r25, 0x00	; 0
    3c80:	88 23       	and	r24, r24
    3c82:	29 f0       	breq	.+10     	; 0x3c8e <xStreamBufferSend+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	9a 81       	ldd	r25, Y+2	; 0x02
    3c88:	02 96       	adiw	r24, 0x02	; 2
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    3c8e:	8a 89       	ldd	r24, Y+18	; 0x12
    3c90:	9b 89       	ldd	r25, Y+19	; 0x13
    3c92:	00 97       	sbiw	r24, 0x00	; 0
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <xStreamBufferSend+0x66>
    3c96:	40 c0       	rjmp	.+128    	; 0x3d18 <xStreamBufferSend+0xe6>
	{
		vTaskSetTimeOutState( &xTimeOut );
    3c98:	ce 01       	movw	r24, r28
    3c9a:	09 96       	adiw	r24, 0x09	; 9
    3c9c:	0e 94 ae 2b 	call	0x575c	; 0x575c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	0f 92       	push	r0
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    3ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ca8:	98 85       	ldd	r25, Y+8	; 0x08
    3caa:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <xStreamBufferSpacesAvailable>
    3cae:	9c 83       	std	Y+4, r25	; 0x04
    3cb0:	8b 83       	std	Y+3, r24	; 0x03

				if( xSpace < xRequiredSpace )
    3cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    3cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cba:	28 17       	cp	r18, r24
    3cbc:	39 07       	cpc	r19, r25
    3cbe:	50 f5       	brcc	.+84     	; 0x3d14 <xStreamBufferSend+0xe2>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	0e 94 be 30 	call	0x617c	; 0x617c <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    3cc8:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <xTaskGetCurrentTaskHandle>
    3ccc:	ef 81       	ldd	r30, Y+7	; 0x07
    3cce:	f8 85       	ldd	r31, Y+8	; 0x08
    3cd0:	93 87       	std	Z+11, r25	; 0x0b
    3cd2:	82 87       	std	Z+10, r24	; 0x0a
				{
					taskEXIT_CRITICAL();
					break;
				}
			}
			taskEXIT_CRITICAL();
    3cd4:	0f 90       	pop	r0
    3cd6:	0f be       	out	0x3f, r0	; 63

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    3cd8:	ea 89       	ldd	r30, Y+18	; 0x12
    3cda:	fb 89       	ldd	r31, Y+19	; 0x13
    3cdc:	60 e0       	ldi	r22, 0x00	; 0
    3cde:	70 e0       	ldi	r23, 0x00	; 0
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	50 e0       	ldi	r21, 0x00	; 0
    3cec:	00 e0       	ldi	r16, 0x00	; 0
    3cee:	10 e0       	ldi	r17, 0x00	; 0
    3cf0:	7f 01       	movw	r14, r30
    3cf2:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
    3cf6:	ef 81       	ldd	r30, Y+7	; 0x07
    3cf8:	f8 85       	ldd	r31, Y+8	; 0x08
    3cfa:	13 86       	std	Z+11, r1	; 0x0b
    3cfc:	12 86       	std	Z+10, r1	; 0x0a

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    3cfe:	ce 01       	movw	r24, r28
    3d00:	09 96       	adiw	r24, 0x09	; 9
    3d02:	9e 01       	movw	r18, r28
    3d04:	2e 5e       	subi	r18, 0xEE	; 238
    3d06:	3f 4f       	sbci	r19, 0xFF	; 255
    3d08:	b9 01       	movw	r22, r18
    3d0a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <xTaskCheckForTimeOut>
    3d0e:	88 23       	and	r24, r24
    3d10:	39 f2       	breq	.-114    	; 0x3ca0 <xStreamBufferSend+0x6e>
    3d12:	02 c0       	rjmp	.+4      	; 0x3d18 <xStreamBufferSend+0xe6>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
				}
				else
				{
					taskEXIT_CRITICAL();
    3d14:	0f 90       	pop	r0
    3d16:	0f be       	out	0x3f, r0	; 63
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	31 f4       	brne	.+12     	; 0x3d2c <xStreamBufferSend+0xfa>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    3d20:	8f 81       	ldd	r24, Y+7	; 0x07
    3d22:	98 85       	ldd	r25, Y+8	; 0x08
    3d24:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <xStreamBufferSpacesAvailable>
    3d28:	9c 83       	std	Y+4, r25	; 0x04
    3d2a:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    3d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d2e:	98 85       	ldd	r25, Y+8	; 0x08
    3d30:	2e 85       	ldd	r18, Y+14	; 0x0e
    3d32:	3f 85       	ldd	r19, Y+15	; 0x0f
    3d34:	48 89       	ldd	r20, Y+16	; 0x10
    3d36:	59 89       	ldd	r21, Y+17	; 0x11
    3d38:	eb 81       	ldd	r30, Y+3	; 0x03
    3d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d3c:	a9 81       	ldd	r26, Y+1	; 0x01
    3d3e:	ba 81       	ldd	r27, Y+2	; 0x02
    3d40:	b9 01       	movw	r22, r18
    3d42:	9f 01       	movw	r18, r30
    3d44:	8d 01       	movw	r16, r26
    3d46:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <prvWriteMessageToBuffer>
    3d4a:	9e 83       	std	Y+6, r25	; 0x06
    3d4c:	8d 83       	std	Y+5, r24	; 0x05

	if( xReturn > ( size_t ) 0 )
    3d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d50:	9e 81       	ldd	r25, Y+6	; 0x06
    3d52:	00 97       	sbiw	r24, 0x00	; 0
    3d54:	39 f1       	breq	.+78     	; 0x3da4 <xStreamBufferSend+0x172>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    3d56:	8f 81       	ldd	r24, Y+7	; 0x07
    3d58:	98 85       	ldd	r25, Y+8	; 0x08
    3d5a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <prvBytesInBuffer>
    3d5e:	9c 01       	movw	r18, r24
    3d60:	ef 81       	ldd	r30, Y+7	; 0x07
    3d62:	f8 85       	ldd	r31, Y+8	; 0x08
    3d64:	86 81       	ldd	r24, Z+6	; 0x06
    3d66:	97 81       	ldd	r25, Z+7	; 0x07
    3d68:	28 17       	cp	r18, r24
    3d6a:	39 07       	cpc	r19, r25
    3d6c:	d8 f0       	brcs	.+54     	; 0x3da4 <xStreamBufferSend+0x172>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
    3d6e:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
    3d72:	ef 81       	ldd	r30, Y+7	; 0x07
    3d74:	f8 85       	ldd	r31, Y+8	; 0x08
    3d76:	80 85       	ldd	r24, Z+8	; 0x08
    3d78:	91 85       	ldd	r25, Z+9	; 0x09
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	89 f0       	breq	.+34     	; 0x3da0 <xStreamBufferSend+0x16e>
    3d7e:	ef 81       	ldd	r30, Y+7	; 0x07
    3d80:	f8 85       	ldd	r31, Y+8	; 0x08
    3d82:	80 85       	ldd	r24, Z+8	; 0x08
    3d84:	91 85       	ldd	r25, Z+9	; 0x09
    3d86:	40 e0       	ldi	r20, 0x00	; 0
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	00 e0       	ldi	r16, 0x00	; 0
    3d92:	10 e0       	ldi	r17, 0x00	; 0
    3d94:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <xTaskGenericNotify>
    3d98:	ef 81       	ldd	r30, Y+7	; 0x07
    3d9a:	f8 85       	ldd	r31, Y+8	; 0x08
    3d9c:	11 86       	std	Z+9, r1	; 0x09
    3d9e:	10 86       	std	Z+8, r1	; 0x08
    3da0:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
    3da4:	8d 81       	ldd	r24, Y+5	; 0x05
    3da6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    3da8:	63 96       	adiw	r28, 0x13	; 19
    3daa:	0f b6       	in	r0, 0x3f	; 63
    3dac:	f8 94       	cli
    3dae:	de bf       	out	0x3e, r29	; 62
    3db0:	0f be       	out	0x3f, r0	; 63
    3db2:	cd bf       	out	0x3d, r28	; 61
    3db4:	cf 91       	pop	r28
    3db6:	df 91       	pop	r29
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	ff 90       	pop	r15
    3dbe:	ef 90       	pop	r14
    3dc0:	08 95       	ret

00003dc2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
    3dc2:	ef 92       	push	r14
    3dc4:	ff 92       	push	r15
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	cd b7       	in	r28, 0x3d	; 61
    3dd0:	de b7       	in	r29, 0x3e	; 62
    3dd2:	61 97       	sbiw	r28, 0x11	; 17
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	9b 87       	std	Y+11, r25	; 0x0b
    3de0:	8a 87       	std	Y+10, r24	; 0x0a
    3de2:	7d 87       	std	Y+13, r23	; 0x0d
    3de4:	6c 87       	std	Y+12, r22	; 0x0c
    3de6:	5f 87       	std	Y+15, r21	; 0x0f
    3de8:	4e 87       	std	Y+14, r20	; 0x0e
    3dea:	39 8b       	std	Y+17, r19	; 0x11
    3dec:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3dee:	8a 85       	ldd	r24, Y+10	; 0x0a
    3df0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3df2:	99 87       	std	Y+9, r25	; 0x09
    3df4:	88 87       	std	Y+8, r24	; 0x08
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    3df6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3df8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dfa:	9b 83       	std	Y+3, r25	; 0x03
    3dfc:	8a 83       	std	Y+2, r24	; 0x02

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3dfe:	e8 85       	ldd	r30, Y+8	; 0x08
    3e00:	f9 85       	ldd	r31, Y+9	; 0x09
    3e02:	86 85       	ldd	r24, Z+14	; 0x0e
    3e04:	88 2f       	mov	r24, r24
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	81 70       	andi	r24, 0x01	; 1
    3e0a:	90 70       	andi	r25, 0x00	; 0
    3e0c:	88 23       	and	r24, r24
    3e0e:	29 f0       	breq	.+10     	; 0x3e1a <xStreamBufferSendFromISR+0x58>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    3e10:	8a 81       	ldd	r24, Y+2	; 0x02
    3e12:	9b 81       	ldd	r25, Y+3	; 0x03
    3e14:	02 96       	adiw	r24, 0x02	; 2
    3e16:	9b 83       	std	Y+3, r25	; 0x03
    3e18:	8a 83       	std	Y+2, r24	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    3e1a:	88 85       	ldd	r24, Y+8	; 0x08
    3e1c:	99 85       	ldd	r25, Y+9	; 0x09
    3e1e:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <xStreamBufferSpacesAvailable>
    3e22:	9d 83       	std	Y+5, r25	; 0x05
    3e24:	8c 83       	std	Y+4, r24	; 0x04
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    3e26:	88 85       	ldd	r24, Y+8	; 0x08
    3e28:	99 85       	ldd	r25, Y+9	; 0x09
    3e2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e2c:	3d 85       	ldd	r19, Y+13	; 0x0d
    3e2e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3e30:	5f 85       	ldd	r21, Y+15	; 0x0f
    3e32:	ec 81       	ldd	r30, Y+4	; 0x04
    3e34:	fd 81       	ldd	r31, Y+5	; 0x05
    3e36:	aa 81       	ldd	r26, Y+2	; 0x02
    3e38:	bb 81       	ldd	r27, Y+3	; 0x03
    3e3a:	b9 01       	movw	r22, r18
    3e3c:	9f 01       	movw	r18, r30
    3e3e:	8d 01       	movw	r16, r26
    3e40:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <prvWriteMessageToBuffer>
    3e44:	9f 83       	std	Y+7, r25	; 0x07
    3e46:	8e 83       	std	Y+6, r24	; 0x06

	if( xReturn > ( size_t ) 0 )
    3e48:	8e 81       	ldd	r24, Y+6	; 0x06
    3e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    3e4c:	00 97       	sbiw	r24, 0x00	; 0
    3e4e:	39 f1       	breq	.+78     	; 0x3e9e <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    3e50:	88 85       	ldd	r24, Y+8	; 0x08
    3e52:	99 85       	ldd	r25, Y+9	; 0x09
    3e54:	0e 94 e5 23 	call	0x47ca	; 0x47ca <prvBytesInBuffer>
    3e58:	9c 01       	movw	r18, r24
    3e5a:	e8 85       	ldd	r30, Y+8	; 0x08
    3e5c:	f9 85       	ldd	r31, Y+9	; 0x09
    3e5e:	86 81       	ldd	r24, Z+6	; 0x06
    3e60:	97 81       	ldd	r25, Z+7	; 0x07
    3e62:	28 17       	cp	r18, r24
    3e64:	39 07       	cpc	r19, r25
    3e66:	d8 f0       	brcs	.+54     	; 0x3e9e <xStreamBufferSendFromISR+0xdc>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    3e68:	19 82       	std	Y+1, r1	; 0x01
    3e6a:	e8 85       	ldd	r30, Y+8	; 0x08
    3e6c:	f9 85       	ldd	r31, Y+9	; 0x09
    3e6e:	80 85       	ldd	r24, Z+8	; 0x08
    3e70:	91 85       	ldd	r25, Z+9	; 0x09
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	a1 f0       	breq	.+40     	; 0x3e9e <xStreamBufferSendFromISR+0xdc>
    3e76:	e8 85       	ldd	r30, Y+8	; 0x08
    3e78:	f9 85       	ldd	r31, Y+9	; 0x09
    3e7a:	80 85       	ldd	r24, Z+8	; 0x08
    3e7c:	91 85       	ldd	r25, Z+9	; 0x09
    3e7e:	e8 89       	ldd	r30, Y+16	; 0x10
    3e80:	f9 89       	ldd	r31, Y+17	; 0x11
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	70 e0       	ldi	r23, 0x00	; 0
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	00 e0       	ldi	r16, 0x00	; 0
    3e8e:	10 e0       	ldi	r17, 0x00	; 0
    3e90:	7f 01       	movw	r14, r30
    3e92:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <xTaskGenericNotifyFromISR>
    3e96:	e8 85       	ldd	r30, Y+8	; 0x08
    3e98:	f9 85       	ldd	r31, Y+9	; 0x09
    3e9a:	11 86       	std	Z+9, r1	; 0x09
    3e9c:	10 86       	std	Z+8, r1	; 0x08
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
    3e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea0:	9f 81       	ldd	r25, Y+7	; 0x07
}
    3ea2:	61 96       	adiw	r28, 0x11	; 17
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	cf 91       	pop	r28
    3eb0:	df 91       	pop	r29
    3eb2:	1f 91       	pop	r17
    3eb4:	0f 91       	pop	r16
    3eb6:	ff 90       	pop	r15
    3eb8:	ef 90       	pop	r14
    3eba:	08 95       	ret

00003ebc <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
    3ebc:	0f 93       	push	r16
    3ebe:	1f 93       	push	r17
    3ec0:	df 93       	push	r29
    3ec2:	cf 93       	push	r28
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
    3ec8:	61 97       	sbiw	r28, 0x11	; 17
    3eca:	0f b6       	in	r0, 0x3f	; 63
    3ecc:	f8 94       	cli
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	cd bf       	out	0x3d, r28	; 61
    3ed4:	9d 83       	std	Y+5, r25	; 0x05
    3ed6:	8c 83       	std	Y+4, r24	; 0x04
    3ed8:	7f 83       	std	Y+7, r23	; 0x07
    3eda:	6e 83       	std	Y+6, r22	; 0x06
    3edc:	59 87       	std	Y+9, r21	; 0x09
    3ede:	48 87       	std	Y+8, r20	; 0x08
    3ee0:	3b 87       	std	Y+11, r19	; 0x0b
    3ee2:	2a 87       	std	Y+10, r18	; 0x0a
    3ee4:	1d 87       	std	Y+13, r17	; 0x0d
    3ee6:	0c 87       	std	Y+12, r16	; 0x0c
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
    3ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eea:	9b 85       	ldd	r25, Y+11	; 0x0b
    3eec:	00 97       	sbiw	r24, 0x00	; 0
    3eee:	11 f4       	brne	.+4      	; 0x3ef4 <prvWriteMessageToBuffer+0x38>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
    3ef0:	1b 82       	std	Y+3, r1	; 0x03
    3ef2:	38 c0       	rjmp	.+112    	; 0x3f64 <prvWriteMessageToBuffer+0xa8>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
    3ef4:	ec 81       	ldd	r30, Y+4	; 0x04
    3ef6:	fd 81       	ldd	r31, Y+5	; 0x05
    3ef8:	86 85       	ldd	r24, Z+14	; 0x0e
    3efa:	88 2f       	mov	r24, r24
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	81 70       	andi	r24, 0x01	; 1
    3f00:	90 70       	andi	r25, 0x00	; 0
    3f02:	00 97       	sbiw	r24, 0x00	; 0
    3f04:	d1 f4       	brne	.+52     	; 0x3f3a <prvWriteMessageToBuffer+0x7e>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	8b 83       	std	Y+3, r24	; 0x03
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
    3f0a:	28 85       	ldd	r18, Y+8	; 0x08
    3f0c:	39 85       	ldd	r19, Y+9	; 0x09
    3f0e:	39 8b       	std	Y+17, r19	; 0x11
    3f10:	28 8b       	std	Y+16, r18	; 0x10
    3f12:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f14:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f16:	9f 87       	std	Y+15, r25	; 0x0f
    3f18:	8e 87       	std	Y+14, r24	; 0x0e
    3f1a:	2e 85       	ldd	r18, Y+14	; 0x0e
    3f1c:	3f 85       	ldd	r19, Y+15	; 0x0f
    3f1e:	88 89       	ldd	r24, Y+16	; 0x10
    3f20:	99 89       	ldd	r25, Y+17	; 0x11
    3f22:	82 17       	cp	r24, r18
    3f24:	93 07       	cpc	r25, r19
    3f26:	20 f4       	brcc	.+8      	; 0x3f30 <prvWriteMessageToBuffer+0x74>
    3f28:	28 89       	ldd	r18, Y+16	; 0x10
    3f2a:	39 89       	ldd	r19, Y+17	; 0x11
    3f2c:	3f 87       	std	Y+15, r19	; 0x0f
    3f2e:	2e 87       	std	Y+14, r18	; 0x0e
    3f30:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f32:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f34:	99 87       	std	Y+9, r25	; 0x09
    3f36:	88 87       	std	Y+8, r24	; 0x08
    3f38:	15 c0       	rjmp	.+42     	; 0x3f64 <prvWriteMessageToBuffer+0xa8>
	}
	else if( xSpace >= xRequiredSpace )
    3f3a:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f3c:	3b 85       	ldd	r19, Y+11	; 0x0b
    3f3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f40:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f42:	28 17       	cp	r18, r24
    3f44:	39 07       	cpc	r19, r25
    3f46:	68 f0       	brcs	.+26     	; 0x3f62 <prvWriteMessageToBuffer+0xa6>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	8b 83       	std	Y+3, r24	; 0x03
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
    3f4c:	9e 01       	movw	r18, r28
    3f4e:	28 5f       	subi	r18, 0xF8	; 248
    3f50:	3f 4f       	sbci	r19, 0xFF	; 255
    3f52:	8c 81       	ldd	r24, Y+4	; 0x04
    3f54:	9d 81       	ldd	r25, Y+5	; 0x05
    3f56:	b9 01       	movw	r22, r18
    3f58:	42 e0       	ldi	r20, 0x02	; 2
    3f5a:	50 e0       	ldi	r21, 0x00	; 0
    3f5c:	0e 94 ab 22 	call	0x4556	; 0x4556 <prvWriteBytesToBuffer>
    3f60:	01 c0       	rjmp	.+2      	; 0x3f64 <prvWriteMessageToBuffer+0xa8>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
    3f62:	1b 82       	std	Y+3, r1	; 0x03
	}

	if( xShouldWrite != pdFALSE )
    3f64:	8b 81       	ldd	r24, Y+3	; 0x03
    3f66:	88 23       	and	r24, r24
    3f68:	61 f0       	breq	.+24     	; 0x3f82 <prvWriteMessageToBuffer+0xc6>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
    3f6a:	2e 81       	ldd	r18, Y+6	; 0x06
    3f6c:	3f 81       	ldd	r19, Y+7	; 0x07
    3f6e:	48 85       	ldd	r20, Y+8	; 0x08
    3f70:	59 85       	ldd	r21, Y+9	; 0x09
    3f72:	8c 81       	ldd	r24, Y+4	; 0x04
    3f74:	9d 81       	ldd	r25, Y+5	; 0x05
    3f76:	b9 01       	movw	r22, r18
    3f78:	0e 94 ab 22 	call	0x4556	; 0x4556 <prvWriteBytesToBuffer>
    3f7c:	9a 83       	std	Y+2, r25	; 0x02
    3f7e:	89 83       	std	Y+1, r24	; 0x01
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <prvWriteMessageToBuffer+0xca>
	}
	else
	{
		xReturn = 0;
    3f82:	1a 82       	std	Y+2, r1	; 0x02
    3f84:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f8a:	61 96       	adiw	r28, 0x11	; 17
    3f8c:	0f b6       	in	r0, 0x3f	; 63
    3f8e:	f8 94       	cli
    3f90:	de bf       	out	0x3e, r29	; 62
    3f92:	0f be       	out	0x3f, r0	; 63
    3f94:	cd bf       	out	0x3d, r28	; 61
    3f96:	cf 91       	pop	r28
    3f98:	df 91       	pop	r29
    3f9a:	1f 91       	pop	r17
    3f9c:	0f 91       	pop	r16
    3f9e:	08 95       	ret

00003fa0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
    3fa0:	ef 92       	push	r14
    3fa2:	ff 92       	push	r15
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	df 93       	push	r29
    3faa:	cf 93       	push	r28
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
    3fb0:	60 97       	sbiw	r28, 0x10	; 16
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	9a 87       	std	Y+10, r25	; 0x0a
    3fbe:	89 87       	std	Y+9, r24	; 0x09
    3fc0:	7c 87       	std	Y+12, r23	; 0x0c
    3fc2:	6b 87       	std	Y+11, r22	; 0x0b
    3fc4:	5e 87       	std	Y+14, r21	; 0x0e
    3fc6:	4d 87       	std	Y+13, r20	; 0x0d
    3fc8:	38 8b       	std	Y+16, r19	; 0x10
    3fca:	2f 87       	std	Y+15, r18	; 0x0f
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    3fcc:	89 85       	ldd	r24, Y+9	; 0x09
    3fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd0:	98 87       	std	Y+8, r25	; 0x08
    3fd2:	8f 83       	std	Y+7, r24	; 0x07
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    3fd4:	1e 82       	std	Y+6, r1	; 0x06
    3fd6:	1d 82       	std	Y+5, r1	; 0x05
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3fd8:	ef 81       	ldd	r30, Y+7	; 0x07
    3fda:	f8 85       	ldd	r31, Y+8	; 0x08
    3fdc:	86 85       	ldd	r24, Z+14	; 0x0e
    3fde:	88 2f       	mov	r24, r24
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	81 70       	andi	r24, 0x01	; 1
    3fe4:	90 70       	andi	r25, 0x00	; 0
    3fe6:	88 23       	and	r24, r24
    3fe8:	29 f0       	breq	.+10     	; 0x3ff4 <xStreamBufferReceive+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    3fea:	82 e0       	ldi	r24, 0x02	; 2
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	9a 83       	std	Y+2, r25	; 0x02
    3ff0:	89 83       	std	Y+1, r24	; 0x01
    3ff2:	02 c0       	rjmp	.+4      	; 0x3ff8 <xStreamBufferReceive+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    3ff4:	1a 82       	std	Y+2, r1	; 0x02
    3ff6:	19 82       	std	Y+1, r1	; 0x01
	}

	if( xTicksToWait != ( TickType_t ) 0 )
    3ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ffa:	98 89       	ldd	r25, Y+16	; 0x10
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	09 f4       	brne	.+2      	; 0x4002 <xStreamBufferReceive+0x62>
    4000:	3d c0       	rjmp	.+122    	; 0x407c <xStreamBufferReceive+0xdc>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	0f 92       	push	r0
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    4008:	8f 81       	ldd	r24, Y+7	; 0x07
    400a:	98 85       	ldd	r25, Y+8	; 0x08
    400c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <prvBytesInBuffer>
    4010:	9c 83       	std	Y+4, r25	; 0x04
    4012:	8b 83       	std	Y+3, r24	; 0x03
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
    4014:	2b 81       	ldd	r18, Y+3	; 0x03
    4016:	3c 81       	ldd	r19, Y+4	; 0x04
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	9a 81       	ldd	r25, Y+2	; 0x02
    401c:	82 17       	cp	r24, r18
    401e:	93 07       	cpc	r25, r19
    4020:	50 f0       	brcs	.+20     	; 0x4036 <xStreamBufferReceive+0x96>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	0e 94 be 30 	call	0x617c	; 0x617c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    402a:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <xTaskGetCurrentTaskHandle>
    402e:	ef 81       	ldd	r30, Y+7	; 0x07
    4030:	f8 85       	ldd	r31, Y+8	; 0x08
    4032:	91 87       	std	Z+9, r25	; 0x09
    4034:	80 87       	std	Z+8, r24	; 0x08
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4036:	0f 90       	pop	r0
    4038:	0f be       	out	0x3f, r0	; 63

		if( xBytesAvailable <= xBytesToStoreMessageLength )
    403a:	2b 81       	ldd	r18, Y+3	; 0x03
    403c:	3c 81       	ldd	r19, Y+4	; 0x04
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	9a 81       	ldd	r25, Y+2	; 0x02
    4042:	82 17       	cp	r24, r18
    4044:	93 07       	cpc	r25, r19
    4046:	00 f1       	brcs	.+64     	; 0x4088 <xStreamBufferReceive+0xe8>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    4048:	ef 85       	ldd	r30, Y+15	; 0x0f
    404a:	f8 89       	ldd	r31, Y+16	; 0x10
    404c:	60 e0       	ldi	r22, 0x00	; 0
    404e:	70 e0       	ldi	r23, 0x00	; 0
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	40 e0       	ldi	r20, 0x00	; 0
    405a:	50 e0       	ldi	r21, 0x00	; 0
    405c:	00 e0       	ldi	r16, 0x00	; 0
    405e:	10 e0       	ldi	r17, 0x00	; 0
    4060:	7f 01       	movw	r14, r30
    4062:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
    4066:	ef 81       	ldd	r30, Y+7	; 0x07
    4068:	f8 85       	ldd	r31, Y+8	; 0x08
    406a:	11 86       	std	Z+9, r1	; 0x09
    406c:	10 86       	std	Z+8, r1	; 0x08

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    406e:	8f 81       	ldd	r24, Y+7	; 0x07
    4070:	98 85       	ldd	r25, Y+8	; 0x08
    4072:	0e 94 e5 23 	call	0x47ca	; 0x47ca <prvBytesInBuffer>
    4076:	9c 83       	std	Y+4, r25	; 0x04
    4078:	8b 83       	std	Y+3, r24	; 0x03
    407a:	06 c0       	rjmp	.+12     	; 0x4088 <xStreamBufferReceive+0xe8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    407c:	8f 81       	ldd	r24, Y+7	; 0x07
    407e:	98 85       	ldd	r25, Y+8	; 0x08
    4080:	0e 94 e5 23 	call	0x47ca	; 0x47ca <prvBytesInBuffer>
    4084:	9c 83       	std	Y+4, r25	; 0x04
    4086:	8b 83       	std	Y+3, r24	; 0x03
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    4088:	2b 81       	ldd	r18, Y+3	; 0x03
    408a:	3c 81       	ldd	r19, Y+4	; 0x04
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	9a 81       	ldd	r25, Y+2	; 0x02
    4090:	82 17       	cp	r24, r18
    4092:	93 07       	cpc	r25, r19
    4094:	80 f5       	brcc	.+96     	; 0x40f6 <xStreamBufferReceive+0x156>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    4096:	8f 81       	ldd	r24, Y+7	; 0x07
    4098:	98 85       	ldd	r25, Y+8	; 0x08
    409a:	2b 85       	ldd	r18, Y+11	; 0x0b
    409c:	3c 85       	ldd	r19, Y+12	; 0x0c
    409e:	4d 85       	ldd	r20, Y+13	; 0x0d
    40a0:	5e 85       	ldd	r21, Y+14	; 0x0e
    40a2:	eb 81       	ldd	r30, Y+3	; 0x03
    40a4:	fc 81       	ldd	r31, Y+4	; 0x04
    40a6:	a9 81       	ldd	r26, Y+1	; 0x01
    40a8:	ba 81       	ldd	r27, Y+2	; 0x02
    40aa:	b9 01       	movw	r22, r18
    40ac:	9f 01       	movw	r18, r30
    40ae:	8d 01       	movw	r16, r26
    40b0:	0e 94 54 21 	call	0x42a8	; 0x42a8 <prvReadMessageFromBuffer>
    40b4:	9e 83       	std	Y+6, r25	; 0x06
    40b6:	8d 83       	std	Y+5, r24	; 0x05

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    40b8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ba:	9e 81       	ldd	r25, Y+6	; 0x06
    40bc:	00 97       	sbiw	r24, 0x00	; 0
    40be:	d9 f0       	breq	.+54     	; 0x40f6 <xStreamBufferReceive+0x156>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
    40c0:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
    40c4:	ef 81       	ldd	r30, Y+7	; 0x07
    40c6:	f8 85       	ldd	r31, Y+8	; 0x08
    40c8:	82 85       	ldd	r24, Z+10	; 0x0a
    40ca:	93 85       	ldd	r25, Z+11	; 0x0b
    40cc:	00 97       	sbiw	r24, 0x00	; 0
    40ce:	89 f0       	breq	.+34     	; 0x40f2 <xStreamBufferReceive+0x152>
    40d0:	ef 81       	ldd	r30, Y+7	; 0x07
    40d2:	f8 85       	ldd	r31, Y+8	; 0x08
    40d4:	82 85       	ldd	r24, Z+10	; 0x0a
    40d6:	93 85       	ldd	r25, Z+11	; 0x0b
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	50 e0       	ldi	r21, 0x00	; 0
    40dc:	60 e0       	ldi	r22, 0x00	; 0
    40de:	70 e0       	ldi	r23, 0x00	; 0
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	00 e0       	ldi	r16, 0x00	; 0
    40e4:	10 e0       	ldi	r17, 0x00	; 0
    40e6:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <xTaskGenericNotify>
    40ea:	ef 81       	ldd	r30, Y+7	; 0x07
    40ec:	f8 85       	ldd	r31, Y+8	; 0x08
    40ee:	13 86       	std	Z+11, r1	; 0x0b
    40f0:	12 86       	std	Z+10, r1	; 0x0a
    40f2:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
    40f6:	8d 81       	ldd	r24, Y+5	; 0x05
    40f8:	9e 81       	ldd	r25, Y+6	; 0x06
}
    40fa:	60 96       	adiw	r28, 0x10	; 16
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	f8 94       	cli
    4100:	de bf       	out	0x3e, r29	; 62
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	cd bf       	out	0x3d, r28	; 61
    4106:	cf 91       	pop	r28
    4108:	df 91       	pop	r29
    410a:	1f 91       	pop	r17
    410c:	0f 91       	pop	r16
    410e:	ff 90       	pop	r15
    4110:	ef 90       	pop	r14
    4112:	08 95       	ret

00004114 <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
    4114:	df 93       	push	r29
    4116:	cf 93       	push	r28
    4118:	cd b7       	in	r28, 0x3d	; 61
    411a:	de b7       	in	r29, 0x3e	; 62
    411c:	2c 97       	sbiw	r28, 0x0c	; 12
    411e:	0f b6       	in	r0, 0x3f	; 63
    4120:	f8 94       	cli
    4122:	de bf       	out	0x3e, r29	; 62
    4124:	0f be       	out	0x3f, r0	; 63
    4126:	cd bf       	out	0x3d, r28	; 61
    4128:	9c 87       	std	Y+12, r25	; 0x0c
    412a:	8b 87       	std	Y+11, r24	; 0x0b
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    412c:	8b 85       	ldd	r24, Y+11	; 0x0b
    412e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4130:	98 87       	std	Y+8, r25	; 0x08
    4132:	8f 83       	std	Y+7, r24	; 0x07
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    4134:	ef 81       	ldd	r30, Y+7	; 0x07
    4136:	f8 85       	ldd	r31, Y+8	; 0x08
    4138:	86 85       	ldd	r24, Z+14	; 0x0e
    413a:	88 2f       	mov	r24, r24
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	81 70       	andi	r24, 0x01	; 1
    4140:	90 70       	andi	r25, 0x00	; 0
    4142:	88 23       	and	r24, r24
    4144:	61 f1       	breq	.+88     	; 0x419e <xStreamBufferNextMessageLengthBytes+0x8a>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    4146:	8f 81       	ldd	r24, Y+7	; 0x07
    4148:	98 85       	ldd	r25, Y+8	; 0x08
    414a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <prvBytesInBuffer>
    414e:	9c 83       	std	Y+4, r25	; 0x04
    4150:	8b 83       	std	Y+3, r24	; 0x03
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
    4152:	8b 81       	ldd	r24, Y+3	; 0x03
    4154:	9c 81       	ldd	r25, Y+4	; 0x04
    4156:	83 30       	cpi	r24, 0x03	; 3
    4158:	91 05       	cpc	r25, r1
    415a:	f0 f0       	brcs	.+60     	; 0x4198 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
    415c:	ef 81       	ldd	r30, Y+7	; 0x07
    415e:	f8 85       	ldd	r31, Y+8	; 0x08
    4160:	80 81       	ld	r24, Z
    4162:	91 81       	ldd	r25, Z+1	; 0x01
    4164:	9a 83       	std	Y+2, r25	; 0x02
    4166:	89 83       	std	Y+1, r24	; 0x01
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
    4168:	9e 01       	movw	r18, r28
    416a:	27 5f       	subi	r18, 0xF7	; 247
    416c:	3f 4f       	sbci	r19, 0xFF	; 255
    416e:	8f 81       	ldd	r24, Y+7	; 0x07
    4170:	98 85       	ldd	r25, Y+8	; 0x08
    4172:	eb 81       	ldd	r30, Y+3	; 0x03
    4174:	fc 81       	ldd	r31, Y+4	; 0x04
    4176:	b9 01       	movw	r22, r18
    4178:	42 e0       	ldi	r20, 0x02	; 2
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	9f 01       	movw	r18, r30
    417e:	0e 94 38 23 	call	0x4670	; 0x4670 <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
    4182:	89 85       	ldd	r24, Y+9	; 0x09
    4184:	9a 85       	ldd	r25, Y+10	; 0x0a
    4186:	9e 83       	std	Y+6, r25	; 0x06
    4188:	8d 83       	std	Y+5, r24	; 0x05
			pxStreamBuffer->xTail = xOriginalTail;
    418a:	ef 81       	ldd	r30, Y+7	; 0x07
    418c:	f8 85       	ldd	r31, Y+8	; 0x08
    418e:	89 81       	ldd	r24, Y+1	; 0x01
    4190:	9a 81       	ldd	r25, Y+2	; 0x02
    4192:	91 83       	std	Z+1, r25	; 0x01
    4194:	80 83       	st	Z, r24
    4196:	05 c0       	rjmp	.+10     	; 0x41a2 <xStreamBufferNextMessageLengthBytes+0x8e>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
    4198:	1e 82       	std	Y+6, r1	; 0x06
    419a:	1d 82       	std	Y+5, r1	; 0x05
    419c:	02 c0       	rjmp	.+4      	; 0x41a2 <xStreamBufferNextMessageLengthBytes+0x8e>
		}
	}
	else
	{
		xReturn = 0;
    419e:	1e 82       	std	Y+6, r1	; 0x06
    41a0:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    41a2:	8d 81       	ldd	r24, Y+5	; 0x05
    41a4:	9e 81       	ldd	r25, Y+6	; 0x06
}
    41a6:	2c 96       	adiw	r28, 0x0c	; 12
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	cf 91       	pop	r28
    41b4:	df 91       	pop	r29
    41b6:	08 95       	ret

000041b8 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
    41b8:	ef 92       	push	r14
    41ba:	ff 92       	push	r15
    41bc:	0f 93       	push	r16
    41be:	1f 93       	push	r17
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	61 97       	sbiw	r28, 0x11	; 17
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
    41d4:	9b 87       	std	Y+11, r25	; 0x0b
    41d6:	8a 87       	std	Y+10, r24	; 0x0a
    41d8:	7d 87       	std	Y+13, r23	; 0x0d
    41da:	6c 87       	std	Y+12, r22	; 0x0c
    41dc:	5f 87       	std	Y+15, r21	; 0x0f
    41de:	4e 87       	std	Y+14, r20	; 0x0e
    41e0:	39 8b       	std	Y+17, r19	; 0x11
    41e2:	28 8b       	std	Y+16, r18	; 0x10
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    41e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    41e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    41e8:	99 87       	std	Y+9, r25	; 0x09
    41ea:	88 87       	std	Y+8, r24	; 0x08
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    41ec:	1f 82       	std	Y+7, r1	; 0x07
    41ee:	1e 82       	std	Y+6, r1	; 0x06
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    41f0:	e8 85       	ldd	r30, Y+8	; 0x08
    41f2:	f9 85       	ldd	r31, Y+9	; 0x09
    41f4:	86 85       	ldd	r24, Z+14	; 0x0e
    41f6:	88 2f       	mov	r24, r24
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	81 70       	andi	r24, 0x01	; 1
    41fc:	90 70       	andi	r25, 0x00	; 0
    41fe:	88 23       	and	r24, r24
    4200:	29 f0       	breq	.+10     	; 0x420c <xStreamBufferReceiveFromISR+0x54>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    4202:	82 e0       	ldi	r24, 0x02	; 2
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	9b 83       	std	Y+3, r25	; 0x03
    4208:	8a 83       	std	Y+2, r24	; 0x02
    420a:	02 c0       	rjmp	.+4      	; 0x4210 <xStreamBufferReceiveFromISR+0x58>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    420c:	1b 82       	std	Y+3, r1	; 0x03
    420e:	1a 82       	std	Y+2, r1	; 0x02
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    4210:	88 85       	ldd	r24, Y+8	; 0x08
    4212:	99 85       	ldd	r25, Y+9	; 0x09
    4214:	0e 94 e5 23 	call	0x47ca	; 0x47ca <prvBytesInBuffer>
    4218:	9d 83       	std	Y+5, r25	; 0x05
    421a:	8c 83       	std	Y+4, r24	; 0x04
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
    421c:	2c 81       	ldd	r18, Y+4	; 0x04
    421e:	3d 81       	ldd	r19, Y+5	; 0x05
    4220:	8a 81       	ldd	r24, Y+2	; 0x02
    4222:	9b 81       	ldd	r25, Y+3	; 0x03
    4224:	82 17       	cp	r24, r18
    4226:	93 07       	cpc	r25, r19
    4228:	80 f5       	brcc	.+96     	; 0x428a <xStreamBufferReceiveFromISR+0xd2>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    422a:	88 85       	ldd	r24, Y+8	; 0x08
    422c:	99 85       	ldd	r25, Y+9	; 0x09
    422e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4230:	3d 85       	ldd	r19, Y+13	; 0x0d
    4232:	4e 85       	ldd	r20, Y+14	; 0x0e
    4234:	5f 85       	ldd	r21, Y+15	; 0x0f
    4236:	ec 81       	ldd	r30, Y+4	; 0x04
    4238:	fd 81       	ldd	r31, Y+5	; 0x05
    423a:	aa 81       	ldd	r26, Y+2	; 0x02
    423c:	bb 81       	ldd	r27, Y+3	; 0x03
    423e:	b9 01       	movw	r22, r18
    4240:	9f 01       	movw	r18, r30
    4242:	8d 01       	movw	r16, r26
    4244:	0e 94 54 21 	call	0x42a8	; 0x42a8 <prvReadMessageFromBuffer>
    4248:	9f 83       	std	Y+7, r25	; 0x07
    424a:	8e 83       	std	Y+6, r24	; 0x06

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
    424c:	8e 81       	ldd	r24, Y+6	; 0x06
    424e:	9f 81       	ldd	r25, Y+7	; 0x07
    4250:	00 97       	sbiw	r24, 0x00	; 0
    4252:	d9 f0       	breq	.+54     	; 0x428a <xStreamBufferReceiveFromISR+0xd2>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    4254:	19 82       	std	Y+1, r1	; 0x01
    4256:	e8 85       	ldd	r30, Y+8	; 0x08
    4258:	f9 85       	ldd	r31, Y+9	; 0x09
    425a:	82 85       	ldd	r24, Z+10	; 0x0a
    425c:	93 85       	ldd	r25, Z+11	; 0x0b
    425e:	00 97       	sbiw	r24, 0x00	; 0
    4260:	a1 f0       	breq	.+40     	; 0x428a <xStreamBufferReceiveFromISR+0xd2>
    4262:	e8 85       	ldd	r30, Y+8	; 0x08
    4264:	f9 85       	ldd	r31, Y+9	; 0x09
    4266:	82 85       	ldd	r24, Z+10	; 0x0a
    4268:	93 85       	ldd	r25, Z+11	; 0x0b
    426a:	e8 89       	ldd	r30, Y+16	; 0x10
    426c:	f9 89       	ldd	r31, Y+17	; 0x11
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	50 e0       	ldi	r21, 0x00	; 0
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	00 e0       	ldi	r16, 0x00	; 0
    427a:	10 e0       	ldi	r17, 0x00	; 0
    427c:	7f 01       	movw	r14, r30
    427e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <xTaskGenericNotifyFromISR>
    4282:	e8 85       	ldd	r30, Y+8	; 0x08
    4284:	f9 85       	ldd	r31, Y+9	; 0x09
    4286:	13 86       	std	Z+11, r1	; 0x0b
    4288:	12 86       	std	Z+10, r1	; 0x0a
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
    428a:	8e 81       	ldd	r24, Y+6	; 0x06
    428c:	9f 81       	ldd	r25, Y+7	; 0x07
}
    428e:	61 96       	adiw	r28, 0x11	; 17
    4290:	0f b6       	in	r0, 0x3f	; 63
    4292:	f8 94       	cli
    4294:	de bf       	out	0x3e, r29	; 62
    4296:	0f be       	out	0x3f, r0	; 63
    4298:	cd bf       	out	0x3d, r28	; 61
    429a:	cf 91       	pop	r28
    429c:	df 91       	pop	r29
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	ff 90       	pop	r15
    42a4:	ef 90       	pop	r14
    42a6:	08 95       	ret

000042a8 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	df 93       	push	r29
    42ae:	cf 93       	push	r28
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62
    42b4:	62 97       	sbiw	r28, 0x12	; 18
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	9a 87       	std	Y+10, r25	; 0x0a
    42c2:	89 87       	std	Y+9, r24	; 0x09
    42c4:	7c 87       	std	Y+12, r23	; 0x0c
    42c6:	6b 87       	std	Y+11, r22	; 0x0b
    42c8:	5e 87       	std	Y+14, r21	; 0x0e
    42ca:	4d 87       	std	Y+13, r20	; 0x0d
    42cc:	38 8b       	std	Y+16, r19	; 0x10
    42ce:	2f 87       	std	Y+15, r18	; 0x0f
    42d0:	1a 8b       	std	Y+18, r17	; 0x12
    42d2:	09 8b       	std	Y+17, r16	; 0x11
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
    42d4:	89 89       	ldd	r24, Y+17	; 0x11
    42d6:	9a 89       	ldd	r25, Y+18	; 0x12
    42d8:	00 97       	sbiw	r24, 0x00	; 0
    42da:	91 f1       	breq	.+100    	; 0x4340 <prvReadMessageFromBuffer+0x98>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
    42dc:	e9 85       	ldd	r30, Y+9	; 0x09
    42de:	fa 85       	ldd	r31, Y+10	; 0x0a
    42e0:	80 81       	ld	r24, Z
    42e2:	91 81       	ldd	r25, Z+1	; 0x01
    42e4:	9e 83       	std	Y+6, r25	; 0x06
    42e6:	8d 83       	std	Y+5, r24	; 0x05
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    42e8:	ae 01       	movw	r20, r28
    42ea:	49 5f       	subi	r20, 0xF9	; 249
    42ec:	5f 4f       	sbci	r21, 0xFF	; 255
    42ee:	89 85       	ldd	r24, Y+9	; 0x09
    42f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f2:	29 89       	ldd	r18, Y+17	; 0x11
    42f4:	3a 89       	ldd	r19, Y+18	; 0x12
    42f6:	ef 85       	ldd	r30, Y+15	; 0x0f
    42f8:	f8 89       	ldd	r31, Y+16	; 0x10
    42fa:	ba 01       	movw	r22, r20
    42fc:	a9 01       	movw	r20, r18
    42fe:	9f 01       	movw	r18, r30
    4300:	0e 94 38 23 	call	0x4670	; 0x4670 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
    4304:	8f 81       	ldd	r24, Y+7	; 0x07
    4306:	98 85       	ldd	r25, Y+8	; 0x08
    4308:	9a 83       	std	Y+2, r25	; 0x02
    430a:	89 83       	std	Y+1, r24	; 0x01

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
    430c:	2f 85       	ldd	r18, Y+15	; 0x0f
    430e:	38 89       	ldd	r19, Y+16	; 0x10
    4310:	89 89       	ldd	r24, Y+17	; 0x11
    4312:	9a 89       	ldd	r25, Y+18	; 0x12
    4314:	a9 01       	movw	r20, r18
    4316:	48 1b       	sub	r20, r24
    4318:	59 0b       	sbc	r21, r25
    431a:	ca 01       	movw	r24, r20
    431c:	98 8b       	std	Y+16, r25	; 0x10
    431e:	8f 87       	std	Y+15, r24	; 0x0f

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
    4320:	29 81       	ldd	r18, Y+1	; 0x01
    4322:	3a 81       	ldd	r19, Y+2	; 0x02
    4324:	8d 85       	ldd	r24, Y+13	; 0x0d
    4326:	9e 85       	ldd	r25, Y+14	; 0x0e
    4328:	82 17       	cp	r24, r18
    432a:	93 07       	cpc	r25, r19
    432c:	68 f4       	brcc	.+26     	; 0x4348 <prvReadMessageFromBuffer+0xa0>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
    432e:	e9 85       	ldd	r30, Y+9	; 0x09
    4330:	fa 85       	ldd	r31, Y+10	; 0x0a
    4332:	8d 81       	ldd	r24, Y+5	; 0x05
    4334:	9e 81       	ldd	r25, Y+6	; 0x06
    4336:	91 83       	std	Z+1, r25	; 0x01
    4338:	80 83       	st	Z, r24
			xNextMessageLength = 0;
    433a:	1a 82       	std	Y+2, r1	; 0x02
    433c:	19 82       	std	Y+1, r1	; 0x01
    433e:	04 c0       	rjmp	.+8      	; 0x4348 <prvReadMessageFromBuffer+0xa0>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
    4340:	8d 85       	ldd	r24, Y+13	; 0x0d
    4342:	9e 85       	ldd	r25, Y+14	; 0x0e
    4344:	9a 83       	std	Y+2, r25	; 0x02
    4346:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    4348:	4b 85       	ldd	r20, Y+11	; 0x0b
    434a:	5c 85       	ldd	r21, Y+12	; 0x0c
    434c:	89 85       	ldd	r24, Y+9	; 0x09
    434e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4350:	29 81       	ldd	r18, Y+1	; 0x01
    4352:	3a 81       	ldd	r19, Y+2	; 0x02
    4354:	ef 85       	ldd	r30, Y+15	; 0x0f
    4356:	f8 89       	ldd	r31, Y+16	; 0x10
    4358:	ba 01       	movw	r22, r20
    435a:	a9 01       	movw	r20, r18
    435c:	9f 01       	movw	r18, r30
    435e:	0e 94 38 23 	call	0x4670	; 0x4670 <prvReadBytesFromBuffer>
    4362:	9c 83       	std	Y+4, r25	; 0x04
    4364:	8b 83       	std	Y+3, r24	; 0x03

	return xReceivedLength;
    4366:	8b 81       	ldd	r24, Y+3	; 0x03
    4368:	9c 81       	ldd	r25, Y+4	; 0x04
}
    436a:	62 96       	adiw	r28, 0x12	; 18
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	f8 94       	cli
    4370:	de bf       	out	0x3e, r29	; 62
    4372:	0f be       	out	0x3f, r0	; 63
    4374:	cd bf       	out	0x3d, r28	; 61
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	1f 91       	pop	r17
    437c:	0f 91       	pop	r16
    437e:	08 95       	ret

00004380 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
    4380:	df 93       	push	r29
    4382:	cf 93       	push	r28
    4384:	cd b7       	in	r28, 0x3d	; 61
    4386:	de b7       	in	r29, 0x3e	; 62
    4388:	27 97       	sbiw	r28, 0x07	; 7
    438a:	0f b6       	in	r0, 0x3f	; 63
    438c:	f8 94       	cli
    438e:	de bf       	out	0x3e, r29	; 62
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	cd bf       	out	0x3d, r28	; 61
    4394:	9f 83       	std	Y+7, r25	; 0x07
    4396:	8e 83       	std	Y+6, r24	; 0x06
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    4398:	8e 81       	ldd	r24, Y+6	; 0x06
    439a:	9f 81       	ldd	r25, Y+7	; 0x07
    439c:	9d 83       	std	Y+5, r25	; 0x05
    439e:	8c 83       	std	Y+4, r24	; 0x04
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
    43a0:	ec 81       	ldd	r30, Y+4	; 0x04
    43a2:	fd 81       	ldd	r31, Y+5	; 0x05
    43a4:	80 81       	ld	r24, Z
    43a6:	91 81       	ldd	r25, Z+1	; 0x01
    43a8:	9a 83       	std	Y+2, r25	; 0x02
    43aa:	89 83       	std	Y+1, r24	; 0x01
	if( pxStreamBuffer->xHead == xTail )
    43ac:	ec 81       	ldd	r30, Y+4	; 0x04
    43ae:	fd 81       	ldd	r31, Y+5	; 0x05
    43b0:	22 81       	ldd	r18, Z+2	; 0x02
    43b2:	33 81       	ldd	r19, Z+3	; 0x03
    43b4:	89 81       	ldd	r24, Y+1	; 0x01
    43b6:	9a 81       	ldd	r25, Y+2	; 0x02
    43b8:	28 17       	cp	r18, r24
    43ba:	39 07       	cpc	r19, r25
    43bc:	19 f4       	brne	.+6      	; 0x43c4 <xStreamBufferIsEmpty+0x44>
	{
		xReturn = pdTRUE;
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	8b 83       	std	Y+3, r24	; 0x03
    43c2:	01 c0       	rjmp	.+2      	; 0x43c6 <xStreamBufferIsEmpty+0x46>
	}
	else
	{
		xReturn = pdFALSE;
    43c4:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    43c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    43c8:	27 96       	adiw	r28, 0x07	; 7
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	f8 94       	cli
    43ce:	de bf       	out	0x3e, r29	; 62
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	cd bf       	out	0x3d, r28	; 61
    43d4:	cf 91       	pop	r28
    43d6:	df 91       	pop	r29
    43d8:	08 95       	ret

000043da <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
    43da:	df 93       	push	r29
    43dc:	cf 93       	push	r28
    43de:	cd b7       	in	r28, 0x3d	; 61
    43e0:	de b7       	in	r29, 0x3e	; 62
    43e2:	27 97       	sbiw	r28, 0x07	; 7
    43e4:	0f b6       	in	r0, 0x3f	; 63
    43e6:	f8 94       	cli
    43e8:	de bf       	out	0x3e, r29	; 62
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	cd bf       	out	0x3d, r28	; 61
    43ee:	9f 83       	std	Y+7, r25	; 0x07
    43f0:	8e 83       	std	Y+6, r24	; 0x06
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    43f2:	8e 81       	ldd	r24, Y+6	; 0x06
    43f4:	9f 81       	ldd	r25, Y+7	; 0x07
    43f6:	9a 83       	std	Y+2, r25	; 0x02
    43f8:	89 83       	std	Y+1, r24	; 0x01

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    43fa:	e9 81       	ldd	r30, Y+1	; 0x01
    43fc:	fa 81       	ldd	r31, Y+2	; 0x02
    43fe:	86 85       	ldd	r24, Z+14	; 0x0e
    4400:	88 2f       	mov	r24, r24
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	81 70       	andi	r24, 0x01	; 1
    4406:	90 70       	andi	r25, 0x00	; 0
    4408:	88 23       	and	r24, r24
    440a:	29 f0       	breq	.+10     	; 0x4416 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    440c:	82 e0       	ldi	r24, 0x02	; 2
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	9c 83       	std	Y+4, r25	; 0x04
    4412:	8b 83       	std	Y+3, r24	; 0x03
    4414:	02 c0       	rjmp	.+4      	; 0x441a <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
    4416:	1c 82       	std	Y+4, r1	; 0x04
    4418:	1b 82       	std	Y+3, r1	; 0x03
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
    441a:	8e 81       	ldd	r24, Y+6	; 0x06
    441c:	9f 81       	ldd	r25, Y+7	; 0x07
    441e:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <xStreamBufferSpacesAvailable>
    4422:	9c 01       	movw	r18, r24
    4424:	8b 81       	ldd	r24, Y+3	; 0x03
    4426:	9c 81       	ldd	r25, Y+4	; 0x04
    4428:	82 17       	cp	r24, r18
    442a:	93 07       	cpc	r25, r19
    442c:	18 f0       	brcs	.+6      	; 0x4434 <xStreamBufferIsFull+0x5a>
	{
		xReturn = pdTRUE;
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	8d 83       	std	Y+5, r24	; 0x05
    4432:	01 c0       	rjmp	.+2      	; 0x4436 <xStreamBufferIsFull+0x5c>
	}
	else
	{
		xReturn = pdFALSE;
    4434:	1d 82       	std	Y+5, r1	; 0x05
	}

	return xReturn;
    4436:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4438:	27 96       	adiw	r28, 0x07	; 7
    443a:	0f b6       	in	r0, 0x3f	; 63
    443c:	f8 94       	cli
    443e:	de bf       	out	0x3e, r29	; 62
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	cd bf       	out	0x3d, r28	; 61
    4444:	cf 91       	pop	r28
    4446:	df 91       	pop	r29
    4448:	08 95       	ret

0000444a <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    444a:	ef 92       	push	r14
    444c:	ff 92       	push	r15
    444e:	0f 93       	push	r16
    4450:	1f 93       	push	r17
    4452:	df 93       	push	r29
    4454:	cf 93       	push	r28
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
    445a:	28 97       	sbiw	r28, 0x08	; 8
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	f8 94       	cli
    4460:	de bf       	out	0x3e, r29	; 62
    4462:	0f be       	out	0x3f, r0	; 63
    4464:	cd bf       	out	0x3d, r28	; 61
    4466:	9e 83       	std	Y+6, r25	; 0x06
    4468:	8d 83       	std	Y+5, r24	; 0x05
    446a:	78 87       	std	Y+8, r23	; 0x08
    446c:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    446e:	8d 81       	ldd	r24, Y+5	; 0x05
    4470:	9e 81       	ldd	r25, Y+6	; 0x06
    4472:	9c 83       	std	Y+4, r25	; 0x04
    4474:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    4476:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
    4478:	eb 81       	ldd	r30, Y+3	; 0x03
    447a:	fc 81       	ldd	r31, Y+4	; 0x04
    447c:	80 85       	ldd	r24, Z+8	; 0x08
    447e:	91 85       	ldd	r25, Z+9	; 0x09
    4480:	00 97       	sbiw	r24, 0x00	; 0
    4482:	b9 f0       	breq	.+46     	; 0x44b2 <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
    4484:	eb 81       	ldd	r30, Y+3	; 0x03
    4486:	fc 81       	ldd	r31, Y+4	; 0x04
    4488:	80 85       	ldd	r24, Z+8	; 0x08
    448a:	91 85       	ldd	r25, Z+9	; 0x09
    448c:	ef 81       	ldd	r30, Y+7	; 0x07
    448e:	f8 85       	ldd	r31, Y+8	; 0x08
    4490:	40 e0       	ldi	r20, 0x00	; 0
    4492:	50 e0       	ldi	r21, 0x00	; 0
    4494:	60 e0       	ldi	r22, 0x00	; 0
    4496:	70 e0       	ldi	r23, 0x00	; 0
    4498:	20 e0       	ldi	r18, 0x00	; 0
    449a:	00 e0       	ldi	r16, 0x00	; 0
    449c:	10 e0       	ldi	r17, 0x00	; 0
    449e:	7f 01       	movw	r14, r30
    44a0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
    44a4:	eb 81       	ldd	r30, Y+3	; 0x03
    44a6:	fc 81       	ldd	r31, Y+4	; 0x04
    44a8:	11 86       	std	Z+9, r1	; 0x09
    44aa:	10 86       	std	Z+8, r1	; 0x08
			xReturn = pdTRUE;
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	8a 83       	std	Y+2, r24	; 0x02
    44b0:	01 c0       	rjmp	.+2      	; 0x44b4 <xStreamBufferSendCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    44b2:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    44b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    44b6:	28 96       	adiw	r28, 0x08	; 8
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	f8 94       	cli
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	cd bf       	out	0x3d, r28	; 61
    44c2:	cf 91       	pop	r28
    44c4:	df 91       	pop	r29
    44c6:	1f 91       	pop	r17
    44c8:	0f 91       	pop	r16
    44ca:	ff 90       	pop	r15
    44cc:	ef 90       	pop	r14
    44ce:	08 95       	ret

000044d0 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
    44d0:	ef 92       	push	r14
    44d2:	ff 92       	push	r15
    44d4:	0f 93       	push	r16
    44d6:	1f 93       	push	r17
    44d8:	df 93       	push	r29
    44da:	cf 93       	push	r28
    44dc:	cd b7       	in	r28, 0x3d	; 61
    44de:	de b7       	in	r29, 0x3e	; 62
    44e0:	28 97       	sbiw	r28, 0x08	; 8
    44e2:	0f b6       	in	r0, 0x3f	; 63
    44e4:	f8 94       	cli
    44e6:	de bf       	out	0x3e, r29	; 62
    44e8:	0f be       	out	0x3f, r0	; 63
    44ea:	cd bf       	out	0x3d, r28	; 61
    44ec:	9e 83       	std	Y+6, r25	; 0x06
    44ee:	8d 83       	std	Y+5, r24	; 0x05
    44f0:	78 87       	std	Y+8, r23	; 0x08
    44f2:	6f 83       	std	Y+7, r22	; 0x07
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    44f4:	8d 81       	ldd	r24, Y+5	; 0x05
    44f6:	9e 81       	ldd	r25, Y+6	; 0x06
    44f8:	9c 83       	std	Y+4, r25	; 0x04
    44fa:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
    44fc:	19 82       	std	Y+1, r1	; 0x01
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
    44fe:	eb 81       	ldd	r30, Y+3	; 0x03
    4500:	fc 81       	ldd	r31, Y+4	; 0x04
    4502:	82 85       	ldd	r24, Z+10	; 0x0a
    4504:	93 85       	ldd	r25, Z+11	; 0x0b
    4506:	00 97       	sbiw	r24, 0x00	; 0
    4508:	b9 f0       	breq	.+46     	; 0x4538 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
    450a:	eb 81       	ldd	r30, Y+3	; 0x03
    450c:	fc 81       	ldd	r31, Y+4	; 0x04
    450e:	82 85       	ldd	r24, Z+10	; 0x0a
    4510:	93 85       	ldd	r25, Z+11	; 0x0b
    4512:	ef 81       	ldd	r30, Y+7	; 0x07
    4514:	f8 85       	ldd	r31, Y+8	; 0x08
    4516:	40 e0       	ldi	r20, 0x00	; 0
    4518:	50 e0       	ldi	r21, 0x00	; 0
    451a:	60 e0       	ldi	r22, 0x00	; 0
    451c:	70 e0       	ldi	r23, 0x00	; 0
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	00 e0       	ldi	r16, 0x00	; 0
    4522:	10 e0       	ldi	r17, 0x00	; 0
    4524:	7f 01       	movw	r14, r30
    4526:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
    452a:	eb 81       	ldd	r30, Y+3	; 0x03
    452c:	fc 81       	ldd	r31, Y+4	; 0x04
    452e:	13 86       	std	Z+11, r1	; 0x0b
    4530:	12 86       	std	Z+10, r1	; 0x0a
			xReturn = pdTRUE;
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	8a 83       	std	Y+2, r24	; 0x02
    4536:	01 c0       	rjmp	.+2      	; 0x453a <xStreamBufferReceiveCompletedFromISR+0x6a>
		}
		else
		{
			xReturn = pdFALSE;
    4538:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    453a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    453c:	28 96       	adiw	r28, 0x08	; 8
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	cf 91       	pop	r28
    454a:	df 91       	pop	r29
    454c:	1f 91       	pop	r17
    454e:	0f 91       	pop	r16
    4550:	ff 90       	pop	r15
    4552:	ef 90       	pop	r14
    4554:	08 95       	ret

00004556 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    4556:	df 93       	push	r29
    4558:	cf 93       	push	r28
    455a:	cd b7       	in	r28, 0x3d	; 61
    455c:	de b7       	in	r29, 0x3e	; 62
    455e:	2e 97       	sbiw	r28, 0x0e	; 14
    4560:	0f b6       	in	r0, 0x3f	; 63
    4562:	f8 94       	cli
    4564:	de bf       	out	0x3e, r29	; 62
    4566:	0f be       	out	0x3f, r0	; 63
    4568:	cd bf       	out	0x3d, r28	; 61
    456a:	9e 83       	std	Y+6, r25	; 0x06
    456c:	8d 83       	std	Y+5, r24	; 0x05
    456e:	78 87       	std	Y+8, r23	; 0x08
    4570:	6f 83       	std	Y+7, r22	; 0x07
    4572:	5a 87       	std	Y+10, r21	; 0x0a
    4574:	49 87       	std	Y+9, r20	; 0x09
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
    4576:	ed 81       	ldd	r30, Y+5	; 0x05
    4578:	fe 81       	ldd	r31, Y+6	; 0x06
    457a:	82 81       	ldd	r24, Z+2	; 0x02
    457c:	93 81       	ldd	r25, Z+3	; 0x03
    457e:	9c 83       	std	Y+4, r25	; 0x04
    4580:	8b 83       	std	Y+3, r24	; 0x03

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    4582:	ed 81       	ldd	r30, Y+5	; 0x05
    4584:	fe 81       	ldd	r31, Y+6	; 0x06
    4586:	24 81       	ldd	r18, Z+4	; 0x04
    4588:	35 81       	ldd	r19, Z+5	; 0x05
    458a:	8b 81       	ldd	r24, Y+3	; 0x03
    458c:	9c 81       	ldd	r25, Y+4	; 0x04
    458e:	a9 01       	movw	r20, r18
    4590:	48 1b       	sub	r20, r24
    4592:	59 0b       	sbc	r21, r25
    4594:	ca 01       	movw	r24, r20
    4596:	29 85       	ldd	r18, Y+9	; 0x09
    4598:	3a 85       	ldd	r19, Y+10	; 0x0a
    459a:	3e 87       	std	Y+14, r19	; 0x0e
    459c:	2d 87       	std	Y+13, r18	; 0x0d
    459e:	9c 87       	std	Y+12, r25	; 0x0c
    45a0:	8b 87       	std	Y+11, r24	; 0x0b
    45a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    45a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    45a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    45aa:	84 17       	cp	r24, r20
    45ac:	95 07       	cpc	r25, r21
    45ae:	20 f4       	brcc	.+8      	; 0x45b8 <prvWriteBytesToBuffer+0x62>
    45b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    45b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    45b4:	3c 87       	std	Y+12, r19	; 0x0c
    45b6:	2b 87       	std	Y+11, r18	; 0x0b
    45b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    45ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    45bc:	5a 83       	std	Y+2, r21	; 0x02
    45be:	49 83       	std	Y+1, r20	; 0x01

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    45c0:	ed 81       	ldd	r30, Y+5	; 0x05
    45c2:	fe 81       	ldd	r31, Y+6	; 0x06
    45c4:	24 85       	ldd	r18, Z+12	; 0x0c
    45c6:	35 85       	ldd	r19, Z+13	; 0x0d
    45c8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ca:	9c 81       	ldd	r25, Y+4	; 0x04
    45cc:	82 0f       	add	r24, r18
    45ce:	93 1f       	adc	r25, r19
    45d0:	2f 81       	ldd	r18, Y+7	; 0x07
    45d2:	38 85       	ldd	r19, Y+8	; 0x08
    45d4:	49 81       	ldd	r20, Y+1	; 0x01
    45d6:	5a 81       	ldd	r21, Y+2	; 0x02
    45d8:	b9 01       	movw	r22, r18
    45da:	0e 94 ab 31 	call	0x6356	; 0x6356 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
    45de:	29 85       	ldd	r18, Y+9	; 0x09
    45e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    45e2:	89 81       	ldd	r24, Y+1	; 0x01
    45e4:	9a 81       	ldd	r25, Y+2	; 0x02
    45e6:	82 17       	cp	r24, r18
    45e8:	93 07       	cpc	r25, r19
    45ea:	b0 f4       	brcc	.+44     	; 0x4618 <prvWriteBytesToBuffer+0xc2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    45ec:	ed 81       	ldd	r30, Y+5	; 0x05
    45ee:	fe 81       	ldd	r31, Y+6	; 0x06
    45f0:	64 85       	ldd	r22, Z+12	; 0x0c
    45f2:	75 85       	ldd	r23, Z+13	; 0x0d
    45f4:	2f 81       	ldd	r18, Y+7	; 0x07
    45f6:	38 85       	ldd	r19, Y+8	; 0x08
    45f8:	89 81       	ldd	r24, Y+1	; 0x01
    45fa:	9a 81       	ldd	r25, Y+2	; 0x02
    45fc:	a9 01       	movw	r20, r18
    45fe:	48 0f       	add	r20, r24
    4600:	59 1f       	adc	r21, r25
    4602:	29 85       	ldd	r18, Y+9	; 0x09
    4604:	3a 85       	ldd	r19, Y+10	; 0x0a
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	9a 81       	ldd	r25, Y+2	; 0x02
    460a:	28 1b       	sub	r18, r24
    460c:	39 0b       	sbc	r19, r25
    460e:	cb 01       	movw	r24, r22
    4610:	ba 01       	movw	r22, r20
    4612:	a9 01       	movw	r20, r18
    4614:	0e 94 ab 31 	call	0x6356	; 0x6356 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
    4618:	2b 81       	ldd	r18, Y+3	; 0x03
    461a:	3c 81       	ldd	r19, Y+4	; 0x04
    461c:	89 85       	ldd	r24, Y+9	; 0x09
    461e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4620:	82 0f       	add	r24, r18
    4622:	93 1f       	adc	r25, r19
    4624:	9c 83       	std	Y+4, r25	; 0x04
    4626:	8b 83       	std	Y+3, r24	; 0x03
	if( xNextHead >= pxStreamBuffer->xLength )
    4628:	ed 81       	ldd	r30, Y+5	; 0x05
    462a:	fe 81       	ldd	r31, Y+6	; 0x06
    462c:	24 81       	ldd	r18, Z+4	; 0x04
    462e:	35 81       	ldd	r19, Z+5	; 0x05
    4630:	8b 81       	ldd	r24, Y+3	; 0x03
    4632:	9c 81       	ldd	r25, Y+4	; 0x04
    4634:	82 17       	cp	r24, r18
    4636:	93 07       	cpc	r25, r19
    4638:	50 f0       	brcs	.+20     	; 0x464e <prvWriteBytesToBuffer+0xf8>
	{
		xNextHead -= pxStreamBuffer->xLength;
    463a:	ed 81       	ldd	r30, Y+5	; 0x05
    463c:	fe 81       	ldd	r31, Y+6	; 0x06
    463e:	24 81       	ldd	r18, Z+4	; 0x04
    4640:	35 81       	ldd	r19, Z+5	; 0x05
    4642:	8b 81       	ldd	r24, Y+3	; 0x03
    4644:	9c 81       	ldd	r25, Y+4	; 0x04
    4646:	82 1b       	sub	r24, r18
    4648:	93 0b       	sbc	r25, r19
    464a:	9c 83       	std	Y+4, r25	; 0x04
    464c:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
    464e:	ed 81       	ldd	r30, Y+5	; 0x05
    4650:	fe 81       	ldd	r31, Y+6	; 0x06
    4652:	8b 81       	ldd	r24, Y+3	; 0x03
    4654:	9c 81       	ldd	r25, Y+4	; 0x04
    4656:	93 83       	std	Z+3, r25	; 0x03
    4658:	82 83       	std	Z+2, r24	; 0x02

	return xCount;
    465a:	89 85       	ldd	r24, Y+9	; 0x09
    465c:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    465e:	2e 96       	adiw	r28, 0x0e	; 14
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	f8 94       	cli
    4664:	de bf       	out	0x3e, r29	; 62
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	cd bf       	out	0x3d, r28	; 61
    466a:	cf 91       	pop	r28
    466c:	df 91       	pop	r29
    466e:	08 95       	ret

00004670 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    4670:	df 93       	push	r29
    4672:	cf 93       	push	r28
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	66 97       	sbiw	r28, 0x16	; 22
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	98 87       	std	Y+8, r25	; 0x08
    4686:	8f 83       	std	Y+7, r24	; 0x07
    4688:	7a 87       	std	Y+10, r23	; 0x0a
    468a:	69 87       	std	Y+9, r22	; 0x09
    468c:	5c 87       	std	Y+12, r21	; 0x0c
    468e:	4b 87       	std	Y+11, r20	; 0x0b
    4690:	3e 87       	std	Y+14, r19	; 0x0e
    4692:	2d 87       	std	Y+13, r18	; 0x0d
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
    4694:	2d 85       	ldd	r18, Y+13	; 0x0d
    4696:	3e 85       	ldd	r19, Y+14	; 0x0e
    4698:	3a 8b       	std	Y+18, r19	; 0x12
    469a:	29 8b       	std	Y+17, r18	; 0x11
    469c:	4b 85       	ldd	r20, Y+11	; 0x0b
    469e:	5c 85       	ldd	r21, Y+12	; 0x0c
    46a0:	58 8b       	std	Y+16, r21	; 0x10
    46a2:	4f 87       	std	Y+15, r20	; 0x0f
    46a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    46a6:	98 89       	ldd	r25, Y+16	; 0x10
    46a8:	29 89       	ldd	r18, Y+17	; 0x11
    46aa:	3a 89       	ldd	r19, Y+18	; 0x12
    46ac:	28 17       	cp	r18, r24
    46ae:	39 07       	cpc	r19, r25
    46b0:	20 f4       	brcc	.+8      	; 0x46ba <prvReadBytesFromBuffer+0x4a>
    46b2:	49 89       	ldd	r20, Y+17	; 0x11
    46b4:	5a 89       	ldd	r21, Y+18	; 0x12
    46b6:	58 8b       	std	Y+16, r21	; 0x10
    46b8:	4f 87       	std	Y+15, r20	; 0x0f
    46ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    46bc:	98 89       	ldd	r25, Y+16	; 0x10
    46be:	9e 83       	std	Y+6, r25	; 0x06
    46c0:	8d 83       	std	Y+5, r24	; 0x05

	if( xCount > ( size_t ) 0 )
    46c2:	8d 81       	ldd	r24, Y+5	; 0x05
    46c4:	9e 81       	ldd	r25, Y+6	; 0x06
    46c6:	00 97       	sbiw	r24, 0x00	; 0
    46c8:	09 f4       	brne	.+2      	; 0x46cc <prvReadBytesFromBuffer+0x5c>
    46ca:	74 c0       	rjmp	.+232    	; 0x47b4 <prvReadBytesFromBuffer+0x144>
	{
		xNextTail = pxStreamBuffer->xTail;
    46cc:	ef 81       	ldd	r30, Y+7	; 0x07
    46ce:	f8 85       	ldd	r31, Y+8	; 0x08
    46d0:	80 81       	ld	r24, Z
    46d2:	91 81       	ldd	r25, Z+1	; 0x01
    46d4:	9a 83       	std	Y+2, r25	; 0x02
    46d6:	89 83       	std	Y+1, r24	; 0x01

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    46d8:	ef 81       	ldd	r30, Y+7	; 0x07
    46da:	f8 85       	ldd	r31, Y+8	; 0x08
    46dc:	24 81       	ldd	r18, Z+4	; 0x04
    46de:	35 81       	ldd	r19, Z+5	; 0x05
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	a9 01       	movw	r20, r18
    46e6:	48 1b       	sub	r20, r24
    46e8:	59 0b       	sbc	r21, r25
    46ea:	ca 01       	movw	r24, r20
    46ec:	2d 81       	ldd	r18, Y+5	; 0x05
    46ee:	3e 81       	ldd	r19, Y+6	; 0x06
    46f0:	3e 8b       	std	Y+22, r19	; 0x16
    46f2:	2d 8b       	std	Y+21, r18	; 0x15
    46f4:	9c 8b       	std	Y+20, r25	; 0x14
    46f6:	8b 8b       	std	Y+19, r24	; 0x13
    46f8:	4b 89       	ldd	r20, Y+19	; 0x13
    46fa:	5c 89       	ldd	r21, Y+20	; 0x14
    46fc:	8d 89       	ldd	r24, Y+21	; 0x15
    46fe:	9e 89       	ldd	r25, Y+22	; 0x16
    4700:	84 17       	cp	r24, r20
    4702:	95 07       	cpc	r25, r21
    4704:	20 f4       	brcc	.+8      	; 0x470e <prvReadBytesFromBuffer+0x9e>
    4706:	2d 89       	ldd	r18, Y+21	; 0x15
    4708:	3e 89       	ldd	r19, Y+22	; 0x16
    470a:	3c 8b       	std	Y+20, r19	; 0x14
    470c:	2b 8b       	std	Y+19, r18	; 0x13
    470e:	4b 89       	ldd	r20, Y+19	; 0x13
    4710:	5c 89       	ldd	r21, Y+20	; 0x14
    4712:	5c 83       	std	Y+4, r21	; 0x04
    4714:	4b 83       	std	Y+3, r20	; 0x03

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4716:	ef 81       	ldd	r30, Y+7	; 0x07
    4718:	f8 85       	ldd	r31, Y+8	; 0x08
    471a:	24 85       	ldd	r18, Z+12	; 0x0c
    471c:	35 85       	ldd	r19, Z+13	; 0x0d
    471e:	89 81       	ldd	r24, Y+1	; 0x01
    4720:	9a 81       	ldd	r25, Y+2	; 0x02
    4722:	a9 01       	movw	r20, r18
    4724:	48 0f       	add	r20, r24
    4726:	59 1f       	adc	r21, r25
    4728:	89 85       	ldd	r24, Y+9	; 0x09
    472a:	9a 85       	ldd	r25, Y+10	; 0x0a
    472c:	2b 81       	ldd	r18, Y+3	; 0x03
    472e:	3c 81       	ldd	r19, Y+4	; 0x04
    4730:	ba 01       	movw	r22, r20
    4732:	a9 01       	movw	r20, r18
    4734:	0e 94 ab 31 	call	0x6356	; 0x6356 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
    4738:	2d 81       	ldd	r18, Y+5	; 0x05
    473a:	3e 81       	ldd	r19, Y+6	; 0x06
    473c:	8b 81       	ldd	r24, Y+3	; 0x03
    473e:	9c 81       	ldd	r25, Y+4	; 0x04
    4740:	82 17       	cp	r24, r18
    4742:	93 07       	cpc	r25, r19
    4744:	b0 f4       	brcc	.+44     	; 0x4772 <prvReadBytesFromBuffer+0x102>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    4746:	29 85       	ldd	r18, Y+9	; 0x09
    4748:	3a 85       	ldd	r19, Y+10	; 0x0a
    474a:	8b 81       	ldd	r24, Y+3	; 0x03
    474c:	9c 81       	ldd	r25, Y+4	; 0x04
    474e:	b9 01       	movw	r22, r18
    4750:	68 0f       	add	r22, r24
    4752:	79 1f       	adc	r23, r25
    4754:	ef 81       	ldd	r30, Y+7	; 0x07
    4756:	f8 85       	ldd	r31, Y+8	; 0x08
    4758:	44 85       	ldd	r20, Z+12	; 0x0c
    475a:	55 85       	ldd	r21, Z+13	; 0x0d
    475c:	2d 81       	ldd	r18, Y+5	; 0x05
    475e:	3e 81       	ldd	r19, Y+6	; 0x06
    4760:	8b 81       	ldd	r24, Y+3	; 0x03
    4762:	9c 81       	ldd	r25, Y+4	; 0x04
    4764:	28 1b       	sub	r18, r24
    4766:	39 0b       	sbc	r19, r25
    4768:	cb 01       	movw	r24, r22
    476a:	ba 01       	movw	r22, r20
    476c:	a9 01       	movw	r20, r18
    476e:	0e 94 ab 31 	call	0x6356	; 0x6356 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
    4772:	29 81       	ldd	r18, Y+1	; 0x01
    4774:	3a 81       	ldd	r19, Y+2	; 0x02
    4776:	8d 81       	ldd	r24, Y+5	; 0x05
    4778:	9e 81       	ldd	r25, Y+6	; 0x06
    477a:	82 0f       	add	r24, r18
    477c:	93 1f       	adc	r25, r19
    477e:	9a 83       	std	Y+2, r25	; 0x02
    4780:	89 83       	std	Y+1, r24	; 0x01

		if( xNextTail >= pxStreamBuffer->xLength )
    4782:	ef 81       	ldd	r30, Y+7	; 0x07
    4784:	f8 85       	ldd	r31, Y+8	; 0x08
    4786:	24 81       	ldd	r18, Z+4	; 0x04
    4788:	35 81       	ldd	r19, Z+5	; 0x05
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	9a 81       	ldd	r25, Y+2	; 0x02
    478e:	82 17       	cp	r24, r18
    4790:	93 07       	cpc	r25, r19
    4792:	50 f0       	brcs	.+20     	; 0x47a8 <prvReadBytesFromBuffer+0x138>
		{
			xNextTail -= pxStreamBuffer->xLength;
    4794:	ef 81       	ldd	r30, Y+7	; 0x07
    4796:	f8 85       	ldd	r31, Y+8	; 0x08
    4798:	24 81       	ldd	r18, Z+4	; 0x04
    479a:	35 81       	ldd	r19, Z+5	; 0x05
    479c:	89 81       	ldd	r24, Y+1	; 0x01
    479e:	9a 81       	ldd	r25, Y+2	; 0x02
    47a0:	82 1b       	sub	r24, r18
    47a2:	93 0b       	sbc	r25, r19
    47a4:	9a 83       	std	Y+2, r25	; 0x02
    47a6:	89 83       	std	Y+1, r24	; 0x01
		}

		pxStreamBuffer->xTail = xNextTail;
    47a8:	ef 81       	ldd	r30, Y+7	; 0x07
    47aa:	f8 85       	ldd	r31, Y+8	; 0x08
    47ac:	89 81       	ldd	r24, Y+1	; 0x01
    47ae:	9a 81       	ldd	r25, Y+2	; 0x02
    47b0:	91 83       	std	Z+1, r25	; 0x01
    47b2:	80 83       	st	Z, r24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    47b4:	8d 81       	ldd	r24, Y+5	; 0x05
    47b6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    47b8:	66 96       	adiw	r28, 0x16	; 22
    47ba:	0f b6       	in	r0, 0x3f	; 63
    47bc:	f8 94       	cli
    47be:	de bf       	out	0x3e, r29	; 62
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	cd bf       	out	0x3d, r28	; 61
    47c4:	cf 91       	pop	r28
    47c6:	df 91       	pop	r29
    47c8:	08 95       	ret

000047ca <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    47ca:	df 93       	push	r29
    47cc:	cf 93       	push	r28
    47ce:	00 d0       	rcall	.+0      	; 0x47d0 <prvBytesInBuffer+0x6>
    47d0:	00 d0       	rcall	.+0      	; 0x47d2 <prvBytesInBuffer+0x8>
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	9c 83       	std	Y+4, r25	; 0x04
    47d8:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    47da:	eb 81       	ldd	r30, Y+3	; 0x03
    47dc:	fc 81       	ldd	r31, Y+4	; 0x04
    47de:	24 81       	ldd	r18, Z+4	; 0x04
    47e0:	35 81       	ldd	r19, Z+5	; 0x05
    47e2:	eb 81       	ldd	r30, Y+3	; 0x03
    47e4:	fc 81       	ldd	r31, Y+4	; 0x04
    47e6:	82 81       	ldd	r24, Z+2	; 0x02
    47e8:	93 81       	ldd	r25, Z+3	; 0x03
    47ea:	82 0f       	add	r24, r18
    47ec:	93 1f       	adc	r25, r19
    47ee:	9a 83       	std	Y+2, r25	; 0x02
    47f0:	89 83       	std	Y+1, r24	; 0x01
	xCount -= pxStreamBuffer->xTail;
    47f2:	eb 81       	ldd	r30, Y+3	; 0x03
    47f4:	fc 81       	ldd	r31, Y+4	; 0x04
    47f6:	20 81       	ld	r18, Z
    47f8:	31 81       	ldd	r19, Z+1	; 0x01
    47fa:	89 81       	ldd	r24, Y+1	; 0x01
    47fc:	9a 81       	ldd	r25, Y+2	; 0x02
    47fe:	82 1b       	sub	r24, r18
    4800:	93 0b       	sbc	r25, r19
    4802:	9a 83       	std	Y+2, r25	; 0x02
    4804:	89 83       	std	Y+1, r24	; 0x01
	if ( xCount >= pxStreamBuffer->xLength )
    4806:	eb 81       	ldd	r30, Y+3	; 0x03
    4808:	fc 81       	ldd	r31, Y+4	; 0x04
    480a:	24 81       	ldd	r18, Z+4	; 0x04
    480c:	35 81       	ldd	r19, Z+5	; 0x05
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	9a 81       	ldd	r25, Y+2	; 0x02
    4812:	82 17       	cp	r24, r18
    4814:	93 07       	cpc	r25, r19
    4816:	50 f0       	brcs	.+20     	; 0x482c <prvBytesInBuffer+0x62>
	{
		xCount -= pxStreamBuffer->xLength;
    4818:	eb 81       	ldd	r30, Y+3	; 0x03
    481a:	fc 81       	ldd	r31, Y+4	; 0x04
    481c:	24 81       	ldd	r18, Z+4	; 0x04
    481e:	35 81       	ldd	r19, Z+5	; 0x05
    4820:	89 81       	ldd	r24, Y+1	; 0x01
    4822:	9a 81       	ldd	r25, Y+2	; 0x02
    4824:	82 1b       	sub	r24, r18
    4826:	93 0b       	sbc	r25, r19
    4828:	9a 83       	std	Y+2, r25	; 0x02
    482a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
    482c:	89 81       	ldd	r24, Y+1	; 0x01
    482e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4830:	0f 90       	pop	r0
    4832:	0f 90       	pop	r0
    4834:	0f 90       	pop	r0
    4836:	0f 90       	pop	r0
    4838:	cf 91       	pop	r28
    483a:	df 91       	pop	r29
    483c:	08 95       	ret

0000483e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
    483e:	0f 93       	push	r16
    4840:	df 93       	push	r29
    4842:	cf 93       	push	r28
    4844:	cd b7       	in	r28, 0x3d	; 61
    4846:	de b7       	in	r29, 0x3e	; 62
    4848:	29 97       	sbiw	r28, 0x09	; 9
    484a:	0f b6       	in	r0, 0x3f	; 63
    484c:	f8 94       	cli
    484e:	de bf       	out	0x3e, r29	; 62
    4850:	0f be       	out	0x3f, r0	; 63
    4852:	cd bf       	out	0x3d, r28	; 61
    4854:	9a 83       	std	Y+2, r25	; 0x02
    4856:	89 83       	std	Y+1, r24	; 0x01
    4858:	7c 83       	std	Y+4, r23	; 0x04
    485a:	6b 83       	std	Y+3, r22	; 0x03
    485c:	5e 83       	std	Y+6, r21	; 0x06
    485e:	4d 83       	std	Y+5, r20	; 0x05
    4860:	38 87       	std	Y+8, r19	; 0x08
    4862:	2f 83       	std	Y+7, r18	; 0x07
    4864:	09 87       	std	Y+9, r16	; 0x09
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    4866:	89 81       	ldd	r24, Y+1	; 0x01
    4868:	9a 81       	ldd	r25, Y+2	; 0x02
    486a:	60 e0       	ldi	r22, 0x00	; 0
    486c:	70 e0       	ldi	r23, 0x00	; 0
    486e:	4f e0       	ldi	r20, 0x0F	; 15
    4870:	50 e0       	ldi	r21, 0x00	; 0
    4872:	0e 94 b4 31 	call	0x6368	; 0x6368 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    4876:	e9 81       	ldd	r30, Y+1	; 0x01
    4878:	fa 81       	ldd	r31, Y+2	; 0x02
    487a:	8b 81       	ldd	r24, Y+3	; 0x03
    487c:	9c 81       	ldd	r25, Y+4	; 0x04
    487e:	95 87       	std	Z+13, r25	; 0x0d
    4880:	84 87       	std	Z+12, r24	; 0x0c
	pxStreamBuffer->xLength = xBufferSizeBytes;
    4882:	e9 81       	ldd	r30, Y+1	; 0x01
    4884:	fa 81       	ldd	r31, Y+2	; 0x02
    4886:	8d 81       	ldd	r24, Y+5	; 0x05
    4888:	9e 81       	ldd	r25, Y+6	; 0x06
    488a:	95 83       	std	Z+5, r25	; 0x05
    488c:	84 83       	std	Z+4, r24	; 0x04
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    488e:	e9 81       	ldd	r30, Y+1	; 0x01
    4890:	fa 81       	ldd	r31, Y+2	; 0x02
    4892:	8f 81       	ldd	r24, Y+7	; 0x07
    4894:	98 85       	ldd	r25, Y+8	; 0x08
    4896:	97 83       	std	Z+7, r25	; 0x07
    4898:	86 83       	std	Z+6, r24	; 0x06
	pxStreamBuffer->ucFlags = ucFlags;
    489a:	e9 81       	ldd	r30, Y+1	; 0x01
    489c:	fa 81       	ldd	r31, Y+2	; 0x02
    489e:	89 85       	ldd	r24, Y+9	; 0x09
    48a0:	86 87       	std	Z+14, r24	; 0x0e
}
    48a2:	29 96       	adiw	r28, 0x09	; 9
    48a4:	0f b6       	in	r0, 0x3f	; 63
    48a6:	f8 94       	cli
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	0f be       	out	0x3f, r0	; 63
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	cf 91       	pop	r28
    48b0:	df 91       	pop	r29
    48b2:	0f 91       	pop	r16
    48b4:	08 95       	ret

000048b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    48b6:	8f 92       	push	r8
    48b8:	9f 92       	push	r9
    48ba:	af 92       	push	r10
    48bc:	bf 92       	push	r11
    48be:	cf 92       	push	r12
    48c0:	df 92       	push	r13
    48c2:	ef 92       	push	r14
    48c4:	ff 92       	push	r15
    48c6:	0f 93       	push	r16
    48c8:	1f 93       	push	r17
    48ca:	df 93       	push	r29
    48cc:	cf 93       	push	r28
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
    48d2:	60 97       	sbiw	r28, 0x10	; 16
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
    48de:	9f 83       	std	Y+7, r25	; 0x07
    48e0:	8e 83       	std	Y+6, r24	; 0x06
    48e2:	79 87       	std	Y+9, r23	; 0x09
    48e4:	68 87       	std	Y+8, r22	; 0x08
    48e6:	5b 87       	std	Y+11, r21	; 0x0b
    48e8:	4a 87       	std	Y+10, r20	; 0x0a
    48ea:	3d 87       	std	Y+13, r19	; 0x0d
    48ec:	2c 87       	std	Y+12, r18	; 0x0c
    48ee:	0e 87       	std	Y+14, r16	; 0x0e
    48f0:	f8 8a       	std	Y+16, r15	; 0x10
    48f2:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    48f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    48f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    48f8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    48fc:	9a 83       	std	Y+2, r25	; 0x02
    48fe:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    4900:	89 81       	ldd	r24, Y+1	; 0x01
    4902:	9a 81       	ldd	r25, Y+2	; 0x02
    4904:	00 97       	sbiw	r24, 0x00	; 0
    4906:	b1 f0       	breq	.+44     	; 0x4934 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    4908:	86 e2       	ldi	r24, 0x26	; 38
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <pvPortMalloc>
    4910:	9d 83       	std	Y+5, r25	; 0x05
    4912:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    4914:	8c 81       	ldd	r24, Y+4	; 0x04
    4916:	9d 81       	ldd	r25, Y+5	; 0x05
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	39 f0       	breq	.+14     	; 0x492a <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    491c:	ec 81       	ldd	r30, Y+4	; 0x04
    491e:	fd 81       	ldd	r31, Y+5	; 0x05
    4920:	89 81       	ldd	r24, Y+1	; 0x01
    4922:	9a 81       	ldd	r25, Y+2	; 0x02
    4924:	90 8f       	std	Z+24, r25	; 0x18
    4926:	87 8b       	std	Z+23, r24	; 0x17
    4928:	07 c0       	rjmp	.+14     	; 0x4938 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	9a 81       	ldd	r25, Y+2	; 0x02
    492e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
    4932:	02 c0       	rjmp	.+4      	; 0x4938 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    4934:	1d 82       	std	Y+5, r1	; 0x05
    4936:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    4938:	8c 81       	ldd	r24, Y+4	; 0x04
    493a:	9d 81       	ldd	r25, Y+5	; 0x05
    493c:	00 97       	sbiw	r24, 0x00	; 0
    493e:	e9 f0       	breq	.+58     	; 0x497a <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    4940:	8a 85       	ldd	r24, Y+10	; 0x0a
    4942:	9b 85       	ldd	r25, Y+11	; 0x0b
    4944:	9c 01       	movw	r18, r24
    4946:	40 e0       	ldi	r20, 0x00	; 0
    4948:	50 e0       	ldi	r21, 0x00	; 0
    494a:	8e 81       	ldd	r24, Y+6	; 0x06
    494c:	9f 81       	ldd	r25, Y+7	; 0x07
    494e:	68 85       	ldd	r22, Y+8	; 0x08
    4950:	79 85       	ldd	r23, Y+9	; 0x09
    4952:	ec 85       	ldd	r30, Y+12	; 0x0c
    4954:	fd 85       	ldd	r31, Y+13	; 0x0d
    4956:	af 85       	ldd	r26, Y+15	; 0x0f
    4958:	b8 89       	ldd	r27, Y+16	; 0x10
    495a:	ac 80       	ldd	r10, Y+4	; 0x04
    495c:	bd 80       	ldd	r11, Y+5	; 0x05
    495e:	8f 01       	movw	r16, r30
    4960:	ee 84       	ldd	r14, Y+14	; 0x0e
    4962:	6d 01       	movw	r12, r26
    4964:	88 24       	eor	r8, r8
    4966:	99 24       	eor	r9, r9
    4968:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    496c:	8c 81       	ldd	r24, Y+4	; 0x04
    496e:	9d 81       	ldd	r25, Y+5	; 0x05
    4970:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	8b 83       	std	Y+3, r24	; 0x03
    4978:	02 c0       	rjmp	.+4      	; 0x497e <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    497a:	8f ef       	ldi	r24, 0xFF	; 255
    497c:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    497e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    4980:	60 96       	adiw	r28, 0x10	; 16
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	f8 94       	cli
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	0f be       	out	0x3f, r0	; 63
    498a:	cd bf       	out	0x3d, r28	; 61
    498c:	cf 91       	pop	r28
    498e:	df 91       	pop	r29
    4990:	1f 91       	pop	r17
    4992:	0f 91       	pop	r16
    4994:	ff 90       	pop	r15
    4996:	ef 90       	pop	r14
    4998:	df 90       	pop	r13
    499a:	cf 90       	pop	r12
    499c:	bf 90       	pop	r11
    499e:	af 90       	pop	r10
    49a0:	9f 90       	pop	r9
    49a2:	8f 90       	pop	r8
    49a4:	08 95       	ret

000049a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    49a6:	8f 92       	push	r8
    49a8:	9f 92       	push	r9
    49aa:	af 92       	push	r10
    49ac:	bf 92       	push	r11
    49ae:	cf 92       	push	r12
    49b0:	df 92       	push	r13
    49b2:	ef 92       	push	r14
    49b4:	0f 93       	push	r16
    49b6:	1f 93       	push	r17
    49b8:	df 93       	push	r29
    49ba:	cf 93       	push	r28
    49bc:	cd b7       	in	r28, 0x3d	; 61
    49be:	de b7       	in	r29, 0x3e	; 62
    49c0:	64 97       	sbiw	r28, 0x14	; 20
    49c2:	0f b6       	in	r0, 0x3f	; 63
    49c4:	f8 94       	cli
    49c6:	de bf       	out	0x3e, r29	; 62
    49c8:	0f be       	out	0x3f, r0	; 63
    49ca:	cd bf       	out	0x3d, r28	; 61
    49cc:	9d 83       	std	Y+5, r25	; 0x05
    49ce:	8c 83       	std	Y+4, r24	; 0x04
    49d0:	7f 83       	std	Y+7, r23	; 0x07
    49d2:	6e 83       	std	Y+6, r22	; 0x06
    49d4:	28 87       	std	Y+8, r18	; 0x08
    49d6:	39 87       	std	Y+9, r19	; 0x09
    49d8:	4a 87       	std	Y+10, r20	; 0x0a
    49da:	5b 87       	std	Y+11, r21	; 0x0b
    49dc:	1d 87       	std	Y+13, r17	; 0x0d
    49de:	0c 87       	std	Y+12, r16	; 0x0c
    49e0:	ee 86       	std	Y+14, r14	; 0x0e
    49e2:	d8 8a       	std	Y+16, r13	; 0x10
    49e4:	cf 86       	std	Y+15, r12	; 0x0f
    49e6:	ba 8a       	std	Y+18, r11	; 0x12
    49e8:	a9 8a       	std	Y+17, r10	; 0x11
    49ea:	9c 8a       	std	Y+20, r9	; 0x14
    49ec:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    49ee:	e9 89       	ldd	r30, Y+17	; 0x11
    49f0:	fa 89       	ldd	r31, Y+18	; 0x12
    49f2:	27 89       	ldd	r18, Z+23	; 0x17
    49f4:	30 8d       	ldd	r19, Z+24	; 0x18
    49f6:	88 85       	ldd	r24, Y+8	; 0x08
    49f8:	99 85       	ldd	r25, Y+9	; 0x09
    49fa:	01 97       	sbiw	r24, 0x01	; 1
    49fc:	82 0f       	add	r24, r18
    49fe:	93 1f       	adc	r25, r19
    4a00:	9b 83       	std	Y+3, r25	; 0x03
    4a02:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    4a04:	8e 81       	ldd	r24, Y+6	; 0x06
    4a06:	9f 81       	ldd	r25, Y+7	; 0x07
    4a08:	00 97       	sbiw	r24, 0x00	; 0
    4a0a:	51 f1       	breq	.+84     	; 0x4a60 <prvInitialiseNewTask+0xba>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4a0c:	19 82       	std	Y+1, r1	; 0x01
    4a0e:	21 c0       	rjmp	.+66     	; 0x4a52 <prvInitialiseNewTask+0xac>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4a10:	89 81       	ldd	r24, Y+1	; 0x01
    4a12:	48 2f       	mov	r20, r24
    4a14:	50 e0       	ldi	r21, 0x00	; 0
    4a16:	89 81       	ldd	r24, Y+1	; 0x01
    4a18:	28 2f       	mov	r18, r24
    4a1a:	30 e0       	ldi	r19, 0x00	; 0
    4a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a1e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a20:	fc 01       	movw	r30, r24
    4a22:	e2 0f       	add	r30, r18
    4a24:	f3 1f       	adc	r31, r19
    4a26:	20 81       	ld	r18, Z
    4a28:	89 89       	ldd	r24, Y+17	; 0x11
    4a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    4a2c:	84 0f       	add	r24, r20
    4a2e:	95 1f       	adc	r25, r21
    4a30:	fc 01       	movw	r30, r24
    4a32:	79 96       	adiw	r30, 0x19	; 25
    4a34:	20 83       	st	Z, r18

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    4a36:	89 81       	ldd	r24, Y+1	; 0x01
    4a38:	28 2f       	mov	r18, r24
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a40:	fc 01       	movw	r30, r24
    4a42:	e2 0f       	add	r30, r18
    4a44:	f3 1f       	adc	r31, r19
    4a46:	80 81       	ld	r24, Z
    4a48:	88 23       	and	r24, r24
    4a4a:	31 f0       	breq	.+12     	; 0x4a58 <prvInitialiseNewTask+0xb2>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4a4c:	89 81       	ldd	r24, Y+1	; 0x01
    4a4e:	8f 5f       	subi	r24, 0xFF	; 255
    4a50:	89 83       	std	Y+1, r24	; 0x01
    4a52:	89 81       	ldd	r24, Y+1	; 0x01
    4a54:	88 30       	cpi	r24, 0x08	; 8
    4a56:	e0 f2       	brcs	.-72     	; 0x4a10 <prvInitialiseNewTask+0x6a>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    4a58:	e9 89       	ldd	r30, Y+17	; 0x11
    4a5a:	fa 89       	ldd	r31, Y+18	; 0x12
    4a5c:	10 a2       	std	Z+32, r1	; 0x20
    4a5e:	03 c0       	rjmp	.+6      	; 0x4a66 <prvInitialiseNewTask+0xc0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    4a60:	e9 89       	ldd	r30, Y+17	; 0x11
    4a62:	fa 89       	ldd	r31, Y+18	; 0x12
    4a64:	11 8e       	std	Z+25, r1	; 0x19
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    4a66:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a68:	84 30       	cpi	r24, 0x04	; 4
    4a6a:	10 f0       	brcs	.+4      	; 0x4a70 <prvInitialiseNewTask+0xca>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    4a6c:	83 e0       	ldi	r24, 0x03	; 3
    4a6e:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    4a70:	e9 89       	ldd	r30, Y+17	; 0x11
    4a72:	fa 89       	ldd	r31, Y+18	; 0x12
    4a74:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a76:	86 8b       	std	Z+22, r24	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    4a78:	89 89       	ldd	r24, Y+17	; 0x11
    4a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    4a7c:	02 96       	adiw	r24, 0x02	; 2
    4a7e:	0e 94 13 11 	call	0x2226	; 0x2226 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    4a82:	89 89       	ldd	r24, Y+17	; 0x11
    4a84:	9a 89       	ldd	r25, Y+18	; 0x12
    4a86:	0c 96       	adiw	r24, 0x0c	; 12
    4a88:	0e 94 13 11 	call	0x2226	; 0x2226 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    4a8c:	e9 89       	ldd	r30, Y+17	; 0x11
    4a8e:	fa 89       	ldd	r31, Y+18	; 0x12
    4a90:	89 89       	ldd	r24, Y+17	; 0x11
    4a92:	9a 89       	ldd	r25, Y+18	; 0x12
    4a94:	91 87       	std	Z+9, r25	; 0x09
    4a96:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4a98:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a9a:	28 2f       	mov	r18, r24
    4a9c:	30 e0       	ldi	r19, 0x00	; 0
    4a9e:	84 e0       	ldi	r24, 0x04	; 4
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	82 1b       	sub	r24, r18
    4aa4:	93 0b       	sbc	r25, r19
    4aa6:	e9 89       	ldd	r30, Y+17	; 0x11
    4aa8:	fa 89       	ldd	r31, Y+18	; 0x12
    4aaa:	95 87       	std	Z+13, r25	; 0x0d
    4aac:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    4aae:	e9 89       	ldd	r30, Y+17	; 0x11
    4ab0:	fa 89       	ldd	r31, Y+18	; 0x12
    4ab2:	89 89       	ldd	r24, Y+17	; 0x11
    4ab4:	9a 89       	ldd	r25, Y+18	; 0x12
    4ab6:	93 8b       	std	Z+19, r25	; 0x13
    4ab8:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    4aba:	e9 89       	ldd	r30, Y+17	; 0x11
    4abc:	fa 89       	ldd	r31, Y+18	; 0x12
    4abe:	11 a2       	std	Z+33, r1	; 0x21
    4ac0:	12 a2       	std	Z+34, r1	; 0x22
    4ac2:	13 a2       	std	Z+35, r1	; 0x23
    4ac4:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4ac6:	e9 89       	ldd	r30, Y+17	; 0x11
    4ac8:	fa 89       	ldd	r31, Y+18	; 0x12
    4aca:	15 a2       	std	Z+37, r1	; 0x25
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4acc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ace:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad0:	2c 81       	ldd	r18, Y+4	; 0x04
    4ad2:	3d 81       	ldd	r19, Y+5	; 0x05
    4ad4:	4c 85       	ldd	r20, Y+12	; 0x0c
    4ad6:	5d 85       	ldd	r21, Y+13	; 0x0d
    4ad8:	b9 01       	movw	r22, r18
    4ada:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <pxPortInitialiseStack>
    4ade:	e9 89       	ldd	r30, Y+17	; 0x11
    4ae0:	fa 89       	ldd	r31, Y+18	; 0x12
    4ae2:	91 83       	std	Z+1, r25	; 0x01
    4ae4:	80 83       	st	Z, r24
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    4ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ae8:	98 89       	ldd	r25, Y+16	; 0x10
    4aea:	00 97       	sbiw	r24, 0x00	; 0
    4aec:	31 f0       	breq	.+12     	; 0x4afa <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    4aee:	ef 85       	ldd	r30, Y+15	; 0x0f
    4af0:	f8 89       	ldd	r31, Y+16	; 0x10
    4af2:	89 89       	ldd	r24, Y+17	; 0x11
    4af4:	9a 89       	ldd	r25, Y+18	; 0x12
    4af6:	91 83       	std	Z+1, r25	; 0x01
    4af8:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    4afa:	64 96       	adiw	r28, 0x14	; 20
    4afc:	0f b6       	in	r0, 0x3f	; 63
    4afe:	f8 94       	cli
    4b00:	de bf       	out	0x3e, r29	; 62
    4b02:	0f be       	out	0x3f, r0	; 63
    4b04:	cd bf       	out	0x3d, r28	; 61
    4b06:	cf 91       	pop	r28
    4b08:	df 91       	pop	r29
    4b0a:	1f 91       	pop	r17
    4b0c:	0f 91       	pop	r16
    4b0e:	ef 90       	pop	r14
    4b10:	df 90       	pop	r13
    4b12:	cf 90       	pop	r12
    4b14:	bf 90       	pop	r11
    4b16:	af 90       	pop	r10
    4b18:	9f 90       	pop	r9
    4b1a:	8f 90       	pop	r8
    4b1c:	08 95       	ret

00004b1e <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    4b1e:	df 93       	push	r29
    4b20:	cf 93       	push	r28
    4b22:	00 d0       	rcall	.+0      	; 0x4b24 <prvAddNewTaskToReadyList+0x6>
    4b24:	cd b7       	in	r28, 0x3d	; 61
    4b26:	de b7       	in	r29, 0x3e	; 62
    4b28:	9a 83       	std	Y+2, r25	; 0x02
    4b2a:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	f8 94       	cli
    4b30:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    4b32:	80 91 68 06 	lds	r24, 0x0668
    4b36:	8f 5f       	subi	r24, 0xFF	; 255
    4b38:	80 93 68 06 	sts	0x0668, r24
		if( pxCurrentTCB == NULL )
    4b3c:	80 91 65 06 	lds	r24, 0x0665
    4b40:	90 91 66 06 	lds	r25, 0x0666
    4b44:	00 97       	sbiw	r24, 0x00	; 0
    4b46:	69 f4       	brne	.+26     	; 0x4b62 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    4b48:	89 81       	ldd	r24, Y+1	; 0x01
    4b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4c:	90 93 66 06 	sts	0x0666, r25
    4b50:	80 93 65 06 	sts	0x0665, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    4b54:	80 91 68 06 	lds	r24, 0x0668
    4b58:	81 30       	cpi	r24, 0x01	; 1
    4b5a:	b9 f4       	brne	.+46     	; 0x4b8a <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    4b5c:	0e 94 66 2c 	call	0x58cc	; 0x58cc <prvInitialiseTaskLists>
    4b60:	14 c0       	rjmp	.+40     	; 0x4b8a <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    4b62:	80 91 6c 06 	lds	r24, 0x066C
    4b66:	88 23       	and	r24, r24
    4b68:	81 f4       	brne	.+32     	; 0x4b8a <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    4b6a:	e0 91 65 06 	lds	r30, 0x0665
    4b6e:	f0 91 66 06 	lds	r31, 0x0666
    4b72:	96 89       	ldd	r25, Z+22	; 0x16
    4b74:	e9 81       	ldd	r30, Y+1	; 0x01
    4b76:	fa 81       	ldd	r31, Y+2	; 0x02
    4b78:	86 89       	ldd	r24, Z+22	; 0x16
    4b7a:	89 17       	cp	r24, r25
    4b7c:	30 f0       	brcs	.+12     	; 0x4b8a <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    4b7e:	89 81       	ldd	r24, Y+1	; 0x01
    4b80:	9a 81       	ldd	r25, Y+2	; 0x02
    4b82:	90 93 66 06 	sts	0x0666, r25
    4b86:	80 93 65 06 	sts	0x0665, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    4b8a:	80 91 70 06 	lds	r24, 0x0670
    4b8e:	8f 5f       	subi	r24, 0xFF	; 255
    4b90:	80 93 70 06 	sts	0x0670, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    4b94:	e9 81       	ldd	r30, Y+1	; 0x01
    4b96:	fa 81       	ldd	r31, Y+2	; 0x02
    4b98:	96 89       	ldd	r25, Z+22	; 0x16
    4b9a:	80 91 6b 06 	lds	r24, 0x066B
    4b9e:	89 17       	cp	r24, r25
    4ba0:	28 f4       	brcc	.+10     	; 0x4bac <prvAddNewTaskToReadyList+0x8e>
    4ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ba6:	86 89       	ldd	r24, Z+22	; 0x16
    4ba8:	80 93 6b 06 	sts	0x066B, r24
    4bac:	e9 81       	ldd	r30, Y+1	; 0x01
    4bae:	fa 81       	ldd	r31, Y+2	; 0x02
    4bb0:	86 89       	ldd	r24, Z+22	; 0x16
    4bb2:	28 2f       	mov	r18, r24
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	c9 01       	movw	r24, r18
    4bb8:	88 0f       	add	r24, r24
    4bba:	99 1f       	adc	r25, r25
    4bbc:	88 0f       	add	r24, r24
    4bbe:	99 1f       	adc	r25, r25
    4bc0:	88 0f       	add	r24, r24
    4bc2:	99 1f       	adc	r25, r25
    4bc4:	82 0f       	add	r24, r18
    4bc6:	93 1f       	adc	r25, r19
    4bc8:	ac 01       	movw	r20, r24
    4bca:	4a 58       	subi	r20, 0x8A	; 138
    4bcc:	59 4f       	sbci	r21, 0xF9	; 249
    4bce:	89 81       	ldd	r24, Y+1	; 0x01
    4bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd2:	9c 01       	movw	r18, r24
    4bd4:	2e 5f       	subi	r18, 0xFE	; 254
    4bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd8:	ca 01       	movw	r24, r20
    4bda:	b9 01       	movw	r22, r18
    4bdc:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    4be0:	0f 90       	pop	r0
    4be2:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    4be4:	80 91 6c 06 	lds	r24, 0x066C
    4be8:	88 23       	and	r24, r24
    4bea:	61 f0       	breq	.+24     	; 0x4c04 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    4bec:	e0 91 65 06 	lds	r30, 0x0665
    4bf0:	f0 91 66 06 	lds	r31, 0x0666
    4bf4:	96 89       	ldd	r25, Z+22	; 0x16
    4bf6:	e9 81       	ldd	r30, Y+1	; 0x01
    4bf8:	fa 81       	ldd	r31, Y+2	; 0x02
    4bfa:	86 89       	ldd	r24, Z+22	; 0x16
    4bfc:	98 17       	cp	r25, r24
    4bfe:	10 f4       	brcc	.+4      	; 0x4c04 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    4c00:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    4c04:	0f 90       	pop	r0
    4c06:	0f 90       	pop	r0
    4c08:	cf 91       	pop	r28
    4c0a:	df 91       	pop	r29
    4c0c:	08 95       	ret

00004c0e <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    4c0e:	df 93       	push	r29
    4c10:	cf 93       	push	r28
    4c12:	00 d0       	rcall	.+0      	; 0x4c14 <vTaskDelete+0x6>
    4c14:	00 d0       	rcall	.+0      	; 0x4c16 <vTaskDelete+0x8>
    4c16:	00 d0       	rcall	.+0      	; 0x4c18 <vTaskDelete+0xa>
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
    4c1c:	9c 83       	std	Y+4, r25	; 0x04
    4c1e:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	f8 94       	cli
    4c24:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    4c26:	8b 81       	ldd	r24, Y+3	; 0x03
    4c28:	9c 81       	ldd	r25, Y+4	; 0x04
    4c2a:	00 97       	sbiw	r24, 0x00	; 0
    4c2c:	39 f4       	brne	.+14     	; 0x4c3c <vTaskDelete+0x2e>
    4c2e:	80 91 65 06 	lds	r24, 0x0665
    4c32:	90 91 66 06 	lds	r25, 0x0666
    4c36:	9e 83       	std	Y+6, r25	; 0x06
    4c38:	8d 83       	std	Y+5, r24	; 0x05
    4c3a:	04 c0       	rjmp	.+8      	; 0x4c44 <vTaskDelete+0x36>
    4c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c40:	9e 83       	std	Y+6, r25	; 0x06
    4c42:	8d 83       	std	Y+5, r24	; 0x05
    4c44:	8d 81       	ldd	r24, Y+5	; 0x05
    4c46:	9e 81       	ldd	r25, Y+6	; 0x06
    4c48:	9a 83       	std	Y+2, r25	; 0x02
    4c4a:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c50:	02 96       	adiw	r24, 0x02	; 2
    4c52:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4c56:	e9 81       	ldd	r30, Y+1	; 0x01
    4c58:	fa 81       	ldd	r31, Y+2	; 0x02
    4c5a:	84 89       	ldd	r24, Z+20	; 0x14
    4c5c:	95 89       	ldd	r25, Z+21	; 0x15
    4c5e:	00 97       	sbiw	r24, 0x00	; 0
    4c60:	29 f0       	breq	.+10     	; 0x4c6c <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4c62:	89 81       	ldd	r24, Y+1	; 0x01
    4c64:	9a 81       	ldd	r25, Y+2	; 0x02
    4c66:	0c 96       	adiw	r24, 0x0c	; 12
    4c68:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    4c6c:	80 91 70 06 	lds	r24, 0x0670
    4c70:	8f 5f       	subi	r24, 0xFF	; 255
    4c72:	80 93 70 06 	sts	0x0670, r24

			if( pxTCB == pxCurrentTCB )
    4c76:	20 91 65 06 	lds	r18, 0x0665
    4c7a:	30 91 66 06 	lds	r19, 0x0666
    4c7e:	89 81       	ldd	r24, Y+1	; 0x01
    4c80:	9a 81       	ldd	r25, Y+2	; 0x02
    4c82:	82 17       	cp	r24, r18
    4c84:	93 07       	cpc	r25, r19
    4c86:	81 f4       	brne	.+32     	; 0x4ca8 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c8c:	9c 01       	movw	r18, r24
    4c8e:	2e 5f       	subi	r18, 0xFE	; 254
    4c90:	3f 4f       	sbci	r19, 0xFF	; 255
    4c92:	89 eb       	ldi	r24, 0xB9	; 185
    4c94:	96 e0       	ldi	r25, 0x06	; 6
    4c96:	b9 01       	movw	r22, r18
    4c98:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    4c9c:	80 91 67 06 	lds	r24, 0x0667
    4ca0:	8f 5f       	subi	r24, 0xFF	; 255
    4ca2:	80 93 67 06 	sts	0x0667, r24
    4ca6:	0b c0       	rjmp	.+22     	; 0x4cbe <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    4ca8:	80 91 68 06 	lds	r24, 0x0668
    4cac:	81 50       	subi	r24, 0x01	; 1
    4cae:	80 93 68 06 	sts	0x0668, r24
				prvDeleteTCB( pxTCB );
    4cb2:	89 81       	ldd	r24, Y+1	; 0x01
    4cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cb6:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    4cba:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4cbe:	0f 90       	pop	r0
    4cc0:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    4cc2:	80 91 6c 06 	lds	r24, 0x066C
    4cc6:	88 23       	and	r24, r24
    4cc8:	59 f0       	breq	.+22     	; 0x4ce0 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    4cca:	20 91 65 06 	lds	r18, 0x0665
    4cce:	30 91 66 06 	lds	r19, 0x0666
    4cd2:	89 81       	ldd	r24, Y+1	; 0x01
    4cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd6:	82 17       	cp	r24, r18
    4cd8:	93 07       	cpc	r25, r19
    4cda:	11 f4       	brne	.+4      	; 0x4ce0 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    4cdc:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    4ce0:	26 96       	adiw	r28, 0x06	; 6
    4ce2:	0f b6       	in	r0, 0x3f	; 63
    4ce4:	f8 94       	cli
    4ce6:	de bf       	out	0x3e, r29	; 62
    4ce8:	0f be       	out	0x3f, r0	; 63
    4cea:	cd bf       	out	0x3d, r28	; 61
    4cec:	cf 91       	pop	r28
    4cee:	df 91       	pop	r29
    4cf0:	08 95       	ret

00004cf2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    4cf2:	df 93       	push	r29
    4cf4:	cf 93       	push	r28
    4cf6:	00 d0       	rcall	.+0      	; 0x4cf8 <vTaskDelay+0x6>
    4cf8:	0f 92       	push	r0
    4cfa:	cd b7       	in	r28, 0x3d	; 61
    4cfc:	de b7       	in	r29, 0x3e	; 62
    4cfe:	9b 83       	std	Y+3, r25	; 0x03
    4d00:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    4d02:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    4d04:	8a 81       	ldd	r24, Y+2	; 0x02
    4d06:	9b 81       	ldd	r25, Y+3	; 0x03
    4d08:	00 97       	sbiw	r24, 0x00	; 0
    4d0a:	51 f0       	breq	.+20     	; 0x4d20 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    4d0c:	0e 94 46 28 	call	0x508c	; 0x508c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    4d10:	8a 81       	ldd	r24, Y+2	; 0x02
    4d12:	9b 81       	ldd	r25, Y+3	; 0x03
    4d14:	60 e0       	ldi	r22, 0x00	; 0
    4d16:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4d1a:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xTaskResumeAll>
    4d1e:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d20:	89 81       	ldd	r24, Y+1	; 0x01
    4d22:	88 23       	and	r24, r24
    4d24:	11 f4       	brne	.+4      	; 0x4d2a <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    4d26:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4d2a:	0f 90       	pop	r0
    4d2c:	0f 90       	pop	r0
    4d2e:	0f 90       	pop	r0
    4d30:	cf 91       	pop	r28
    4d32:	df 91       	pop	r29
    4d34:	08 95       	ret

00004d36 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    4d36:	df 93       	push	r29
    4d38:	cf 93       	push	r28
    4d3a:	00 d0       	rcall	.+0      	; 0x4d3c <vTaskSuspend+0x6>
    4d3c:	00 d0       	rcall	.+0      	; 0x4d3e <vTaskSuspend+0x8>
    4d3e:	00 d0       	rcall	.+0      	; 0x4d40 <vTaskSuspend+0xa>
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62
    4d44:	9c 83       	std	Y+4, r25	; 0x04
    4d46:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4d48:	0f b6       	in	r0, 0x3f	; 63
    4d4a:	f8 94       	cli
    4d4c:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d50:	9c 81       	ldd	r25, Y+4	; 0x04
    4d52:	00 97       	sbiw	r24, 0x00	; 0
    4d54:	39 f4       	brne	.+14     	; 0x4d64 <vTaskSuspend+0x2e>
    4d56:	80 91 65 06 	lds	r24, 0x0665
    4d5a:	90 91 66 06 	lds	r25, 0x0666
    4d5e:	9e 83       	std	Y+6, r25	; 0x06
    4d60:	8d 83       	std	Y+5, r24	; 0x05
    4d62:	04 c0       	rjmp	.+8      	; 0x4d6c <vTaskSuspend+0x36>
    4d64:	8b 81       	ldd	r24, Y+3	; 0x03
    4d66:	9c 81       	ldd	r25, Y+4	; 0x04
    4d68:	9e 83       	std	Y+6, r25	; 0x06
    4d6a:	8d 83       	std	Y+5, r24	; 0x05
    4d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d70:	9a 83       	std	Y+2, r25	; 0x02
    4d72:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4d74:	89 81       	ldd	r24, Y+1	; 0x01
    4d76:	9a 81       	ldd	r25, Y+2	; 0x02
    4d78:	02 96       	adiw	r24, 0x02	; 2
    4d7a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    4d80:	fa 81       	ldd	r31, Y+2	; 0x02
    4d82:	84 89       	ldd	r24, Z+20	; 0x14
    4d84:	95 89       	ldd	r25, Z+21	; 0x15
    4d86:	00 97       	sbiw	r24, 0x00	; 0
    4d88:	29 f0       	breq	.+10     	; 0x4d94 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4d8a:	89 81       	ldd	r24, Y+1	; 0x01
    4d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d8e:	0c 96       	adiw	r24, 0x0c	; 12
    4d90:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    4d94:	89 81       	ldd	r24, Y+1	; 0x01
    4d96:	9a 81       	ldd	r25, Y+2	; 0x02
    4d98:	9c 01       	movw	r18, r24
    4d9a:	2e 5f       	subi	r18, 0xFE	; 254
    4d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d9e:	82 ec       	ldi	r24, 0xC2	; 194
    4da0:	96 e0       	ldi	r25, 0x06	; 6
    4da2:	b9 01       	movw	r22, r18
    4da4:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4da8:	e9 81       	ldd	r30, Y+1	; 0x01
    4daa:	fa 81       	ldd	r31, Y+2	; 0x02
    4dac:	85 a1       	ldd	r24, Z+37	; 0x25
    4dae:	81 30       	cpi	r24, 0x01	; 1
    4db0:	19 f4       	brne	.+6      	; 0x4db8 <vTaskSuspend+0x82>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4db2:	e9 81       	ldd	r30, Y+1	; 0x01
    4db4:	fa 81       	ldd	r31, Y+2	; 0x02
    4db6:	15 a2       	std	Z+37, r1	; 0x25
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    4db8:	0f 90       	pop	r0
    4dba:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    4dbc:	80 91 6c 06 	lds	r24, 0x066C
    4dc0:	88 23       	and	r24, r24
    4dc2:	39 f0       	breq	.+14     	; 0x4dd2 <vTaskSuspend+0x9c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    4dc4:	0f b6       	in	r0, 0x3f	; 63
    4dc6:	f8 94       	cli
    4dc8:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    4dca:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    4dce:	0f 90       	pop	r0
    4dd0:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    4dd2:	20 91 65 06 	lds	r18, 0x0665
    4dd6:	30 91 66 06 	lds	r19, 0x0666
    4dda:	89 81       	ldd	r24, Y+1	; 0x01
    4ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dde:	82 17       	cp	r24, r18
    4de0:	93 07       	cpc	r25, r19
    4de2:	a1 f4       	brne	.+40     	; 0x4e0c <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
    4de4:	80 91 6c 06 	lds	r24, 0x066C
    4de8:	88 23       	and	r24, r24
    4dea:	19 f0       	breq	.+6      	; 0x4df2 <vTaskSuspend+0xbc>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    4dec:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
    4df0:	0d c0       	rjmp	.+26     	; 0x4e0c <vTaskSuspend+0xd6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
    4df2:	90 91 c2 06 	lds	r25, 0x06C2
    4df6:	80 91 68 06 	lds	r24, 0x0668
    4dfa:	98 17       	cp	r25, r24
    4dfc:	29 f4       	brne	.+10     	; 0x4e08 <vTaskSuspend+0xd2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4dfe:	10 92 66 06 	sts	0x0666, r1
    4e02:	10 92 65 06 	sts	0x0665, r1
    4e06:	02 c0       	rjmp	.+4      	; 0x4e0c <vTaskSuspend+0xd6>
				}
				else
				{
					vTaskSwitchContext();
    4e08:	0e 94 27 2a 	call	0x544e	; 0x544e <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4e0c:	26 96       	adiw	r28, 0x06	; 6
    4e0e:	0f b6       	in	r0, 0x3f	; 63
    4e10:	f8 94       	cli
    4e12:	de bf       	out	0x3e, r29	; 62
    4e14:	0f be       	out	0x3f, r0	; 63
    4e16:	cd bf       	out	0x3d, r28	; 61
    4e18:	cf 91       	pop	r28
    4e1a:	df 91       	pop	r29
    4e1c:	08 95       	ret

00004e1e <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    4e1e:	df 93       	push	r29
    4e20:	cf 93       	push	r28
    4e22:	00 d0       	rcall	.+0      	; 0x4e24 <prvTaskIsTaskSuspended+0x6>
    4e24:	00 d0       	rcall	.+0      	; 0x4e26 <prvTaskIsTaskSuspended+0x8>
    4e26:	0f 92       	push	r0
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	9d 83       	std	Y+5, r25	; 0x05
    4e2e:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    4e30:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = xTask;
    4e32:	8c 81       	ldd	r24, Y+4	; 0x04
    4e34:	9d 81       	ldd	r25, Y+5	; 0x05
    4e36:	9a 83       	std	Y+2, r25	; 0x02
    4e38:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    4e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    4e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    4e3e:	82 85       	ldd	r24, Z+10	; 0x0a
    4e40:	93 85       	ldd	r25, Z+11	; 0x0b
    4e42:	26 e0       	ldi	r18, 0x06	; 6
    4e44:	82 3c       	cpi	r24, 0xC2	; 194
    4e46:	92 07       	cpc	r25, r18
    4e48:	81 f4       	brne	.+32     	; 0x4e6a <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    4e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    4e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    4e4e:	84 89       	ldd	r24, Z+20	; 0x14
    4e50:	95 89       	ldd	r25, Z+21	; 0x15
    4e52:	26 e0       	ldi	r18, 0x06	; 6
    4e54:	80 3b       	cpi	r24, 0xB0	; 176
    4e56:	92 07       	cpc	r25, r18
    4e58:	41 f0       	breq	.+16     	; 0x4e6a <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    4e5a:	e9 81       	ldd	r30, Y+1	; 0x01
    4e5c:	fa 81       	ldd	r31, Y+2	; 0x02
    4e5e:	84 89       	ldd	r24, Z+20	; 0x14
    4e60:	95 89       	ldd	r25, Z+21	; 0x15
    4e62:	00 97       	sbiw	r24, 0x00	; 0
    4e64:	11 f4       	brne	.+4      	; 0x4e6a <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4e6a:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	0f 90       	pop	r0
    4e72:	0f 90       	pop	r0
    4e74:	0f 90       	pop	r0
    4e76:	cf 91       	pop	r28
    4e78:	df 91       	pop	r29
    4e7a:	08 95       	ret

00004e7c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    4e7c:	df 93       	push	r29
    4e7e:	cf 93       	push	r28
    4e80:	00 d0       	rcall	.+0      	; 0x4e82 <vTaskResume+0x6>
    4e82:	00 d0       	rcall	.+0      	; 0x4e84 <vTaskResume+0x8>
    4e84:	cd b7       	in	r28, 0x3d	; 61
    4e86:	de b7       	in	r29, 0x3e	; 62
    4e88:	9c 83       	std	Y+4, r25	; 0x04
    4e8a:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = xTaskToResume;
    4e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e90:	9a 83       	std	Y+2, r25	; 0x02
    4e92:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
    4e94:	20 91 65 06 	lds	r18, 0x0665
    4e98:	30 91 66 06 	lds	r19, 0x0666
    4e9c:	89 81       	ldd	r24, Y+1	; 0x01
    4e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea0:	82 17       	cp	r24, r18
    4ea2:	93 07       	cpc	r25, r19
    4ea4:	09 f4       	brne	.+2      	; 0x4ea8 <vTaskResume+0x2c>
    4ea6:	47 c0       	rjmp	.+142    	; 0x4f36 <vTaskResume+0xba>
    4ea8:	89 81       	ldd	r24, Y+1	; 0x01
    4eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    4eac:	00 97       	sbiw	r24, 0x00	; 0
    4eae:	09 f4       	brne	.+2      	; 0x4eb2 <vTaskResume+0x36>
    4eb0:	42 c0       	rjmp	.+132    	; 0x4f36 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	f8 94       	cli
    4eb6:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    4eb8:	89 81       	ldd	r24, Y+1	; 0x01
    4eba:	9a 81       	ldd	r25, Y+2	; 0x02
    4ebc:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <prvTaskIsTaskSuspended>
    4ec0:	88 23       	and	r24, r24
    4ec2:	b9 f1       	breq	.+110    	; 0x4f32 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    4ec4:	89 81       	ldd	r24, Y+1	; 0x01
    4ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec8:	02 96       	adiw	r24, 0x02	; 2
    4eca:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4ece:	e9 81       	ldd	r30, Y+1	; 0x01
    4ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ed2:	96 89       	ldd	r25, Z+22	; 0x16
    4ed4:	80 91 6b 06 	lds	r24, 0x066B
    4ed8:	89 17       	cp	r24, r25
    4eda:	28 f4       	brcc	.+10     	; 0x4ee6 <vTaskResume+0x6a>
    4edc:	e9 81       	ldd	r30, Y+1	; 0x01
    4ede:	fa 81       	ldd	r31, Y+2	; 0x02
    4ee0:	86 89       	ldd	r24, Z+22	; 0x16
    4ee2:	80 93 6b 06 	sts	0x066B, r24
    4ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eea:	86 89       	ldd	r24, Z+22	; 0x16
    4eec:	28 2f       	mov	r18, r24
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	c9 01       	movw	r24, r18
    4ef2:	88 0f       	add	r24, r24
    4ef4:	99 1f       	adc	r25, r25
    4ef6:	88 0f       	add	r24, r24
    4ef8:	99 1f       	adc	r25, r25
    4efa:	88 0f       	add	r24, r24
    4efc:	99 1f       	adc	r25, r25
    4efe:	82 0f       	add	r24, r18
    4f00:	93 1f       	adc	r25, r19
    4f02:	ac 01       	movw	r20, r24
    4f04:	4a 58       	subi	r20, 0x8A	; 138
    4f06:	59 4f       	sbci	r21, 0xF9	; 249
    4f08:	89 81       	ldd	r24, Y+1	; 0x01
    4f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0c:	9c 01       	movw	r18, r24
    4f0e:	2e 5f       	subi	r18, 0xFE	; 254
    4f10:	3f 4f       	sbci	r19, 0xFF	; 255
    4f12:	ca 01       	movw	r24, r20
    4f14:	b9 01       	movw	r22, r18
    4f16:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    4f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    4f1e:	96 89       	ldd	r25, Z+22	; 0x16
    4f20:	e0 91 65 06 	lds	r30, 0x0665
    4f24:	f0 91 66 06 	lds	r31, 0x0666
    4f28:	86 89       	ldd	r24, Z+22	; 0x16
    4f2a:	98 17       	cp	r25, r24
    4f2c:	10 f0       	brcs	.+4      	; 0x4f32 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    4f2e:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    4f32:	0f 90       	pop	r0
    4f34:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4f36:	0f 90       	pop	r0
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
    4f3c:	0f 90       	pop	r0
    4f3e:	cf 91       	pop	r28
    4f40:	df 91       	pop	r29
    4f42:	08 95       	ret

00004f44 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    4f44:	df 93       	push	r29
    4f46:	cf 93       	push	r28
    4f48:	00 d0       	rcall	.+0      	; 0x4f4a <xTaskResumeFromISR+0x6>
    4f4a:	00 d0       	rcall	.+0      	; 0x4f4c <xTaskResumeFromISR+0x8>
    4f4c:	00 d0       	rcall	.+0      	; 0x4f4e <xTaskResumeFromISR+0xa>
    4f4e:	cd b7       	in	r28, 0x3d	; 61
    4f50:	de b7       	in	r29, 0x3e	; 62
    4f52:	9e 83       	std	Y+6, r25	; 0x06
    4f54:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    4f56:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = xTaskToResume;
    4f58:	8d 81       	ldd	r24, Y+5	; 0x05
    4f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f5c:	9b 83       	std	Y+3, r25	; 0x03
    4f5e:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4f60:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    4f62:	8a 81       	ldd	r24, Y+2	; 0x02
    4f64:	9b 81       	ldd	r25, Y+3	; 0x03
    4f66:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <prvTaskIsTaskSuspended>
    4f6a:	88 23       	and	r24, r24
    4f6c:	09 f4       	brne	.+2      	; 0x4f70 <xTaskResumeFromISR+0x2c>
    4f6e:	46 c0       	rjmp	.+140    	; 0x4ffc <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4f70:	80 91 75 06 	lds	r24, 0x0675
    4f74:	88 23       	and	r24, r24
    4f76:	c1 f5       	brne	.+112    	; 0x4fe8 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4f78:	ea 81       	ldd	r30, Y+2	; 0x02
    4f7a:	fb 81       	ldd	r31, Y+3	; 0x03
    4f7c:	96 89       	ldd	r25, Z+22	; 0x16
    4f7e:	e0 91 65 06 	lds	r30, 0x0665
    4f82:	f0 91 66 06 	lds	r31, 0x0666
    4f86:	86 89       	ldd	r24, Z+22	; 0x16
    4f88:	98 17       	cp	r25, r24
    4f8a:	10 f0       	brcs	.+4      	; 0x4f90 <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4f90:	8a 81       	ldd	r24, Y+2	; 0x02
    4f92:	9b 81       	ldd	r25, Y+3	; 0x03
    4f94:	02 96       	adiw	r24, 0x02	; 2
    4f96:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4f9a:	ea 81       	ldd	r30, Y+2	; 0x02
    4f9c:	fb 81       	ldd	r31, Y+3	; 0x03
    4f9e:	96 89       	ldd	r25, Z+22	; 0x16
    4fa0:	80 91 6b 06 	lds	r24, 0x066B
    4fa4:	89 17       	cp	r24, r25
    4fa6:	28 f4       	brcc	.+10     	; 0x4fb2 <xTaskResumeFromISR+0x6e>
    4fa8:	ea 81       	ldd	r30, Y+2	; 0x02
    4faa:	fb 81       	ldd	r31, Y+3	; 0x03
    4fac:	86 89       	ldd	r24, Z+22	; 0x16
    4fae:	80 93 6b 06 	sts	0x066B, r24
    4fb2:	ea 81       	ldd	r30, Y+2	; 0x02
    4fb4:	fb 81       	ldd	r31, Y+3	; 0x03
    4fb6:	86 89       	ldd	r24, Z+22	; 0x16
    4fb8:	28 2f       	mov	r18, r24
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	c9 01       	movw	r24, r18
    4fbe:	88 0f       	add	r24, r24
    4fc0:	99 1f       	adc	r25, r25
    4fc2:	88 0f       	add	r24, r24
    4fc4:	99 1f       	adc	r25, r25
    4fc6:	88 0f       	add	r24, r24
    4fc8:	99 1f       	adc	r25, r25
    4fca:	82 0f       	add	r24, r18
    4fcc:	93 1f       	adc	r25, r19
    4fce:	ac 01       	movw	r20, r24
    4fd0:	4a 58       	subi	r20, 0x8A	; 138
    4fd2:	59 4f       	sbci	r21, 0xF9	; 249
    4fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    4fd8:	9c 01       	movw	r18, r24
    4fda:	2e 5f       	subi	r18, 0xFE	; 254
    4fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    4fde:	ca 01       	movw	r24, r20
    4fe0:	b9 01       	movw	r22, r18
    4fe2:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
    4fe6:	0a c0       	rjmp	.+20     	; 0x4ffc <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fea:	9b 81       	ldd	r25, Y+3	; 0x03
    4fec:	9c 01       	movw	r18, r24
    4fee:	24 5f       	subi	r18, 0xF4	; 244
    4ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff2:	80 eb       	ldi	r24, 0xB0	; 176
    4ff4:	96 e0       	ldi	r25, 0x06	; 6
    4ff6:	b9 01       	movw	r22, r18
    4ff8:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    4ffc:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    4ffe:	26 96       	adiw	r28, 0x06	; 6
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	f8 94       	cli
    5004:	de bf       	out	0x3e, r29	; 62
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	cd bf       	out	0x3d, r28	; 61
    500a:	cf 91       	pop	r28
    500c:	df 91       	pop	r29
    500e:	08 95       	ret

00005010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    5010:	ef 92       	push	r14
    5012:	ff 92       	push	r15
    5014:	0f 93       	push	r16
    5016:	df 93       	push	r29
    5018:	cf 93       	push	r28
    501a:	0f 92       	push	r0
    501c:	cd b7       	in	r28, 0x3d	; 61
    501e:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    5020:	8c e5       	ldi	r24, 0x5C	; 92
    5022:	9c e2       	ldi	r25, 0x2C	; 44
    5024:	2d e6       	ldi	r18, 0x6D	; 109
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	e3 e7       	ldi	r30, 0x73	; 115
    502a:	f6 e0       	ldi	r31, 0x06	; 6
    502c:	b9 01       	movw	r22, r18
    502e:	45 e5       	ldi	r20, 0x55	; 85
    5030:	50 e0       	ldi	r21, 0x00	; 0
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	00 e0       	ldi	r16, 0x00	; 0
    5038:	7f 01       	movw	r14, r30
    503a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <xTaskCreate>
    503e:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    5040:	89 81       	ldd	r24, Y+1	; 0x01
    5042:	81 30       	cpi	r24, 0x01	; 1
    5044:	81 f4       	brne	.+32     	; 0x5066 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    5046:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    5048:	8f ef       	ldi	r24, 0xFF	; 255
    504a:	9f ef       	ldi	r25, 0xFF	; 255
    504c:	90 93 72 06 	sts	0x0672, r25
    5050:	80 93 71 06 	sts	0x0671, r24
		xSchedulerRunning = pdTRUE;
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	80 93 6c 06 	sts	0x066C, r24
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    505a:	10 92 6a 06 	sts	0x066A, r1
    505e:	10 92 69 06 	sts	0x0669, r1

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    5062:	0e 94 54 14 	call	0x28a8	; 0x28a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    5066:	0f 90       	pop	r0
    5068:	cf 91       	pop	r28
    506a:	df 91       	pop	r29
    506c:	0f 91       	pop	r16
    506e:	ff 90       	pop	r15
    5070:	ef 90       	pop	r14
    5072:	08 95       	ret

00005074 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5074:	df 93       	push	r29
    5076:	cf 93       	push	r28
    5078:	cd b7       	in	r28, 0x3d	; 61
    507a:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    507c:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    507e:	10 92 6c 06 	sts	0x066C, r1
	vPortEndScheduler();
    5082:	0e 94 89 14 	call	0x2912	; 0x2912 <vPortEndScheduler>
}
    5086:	cf 91       	pop	r28
    5088:	df 91       	pop	r29
    508a:	08 95       	ret

0000508c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    508c:	df 93       	push	r29
    508e:	cf 93       	push	r28
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    5094:	80 91 75 06 	lds	r24, 0x0675
    5098:	8f 5f       	subi	r24, 0xFF	; 255
    509a:	80 93 75 06 	sts	0x0675, r24
}
    509e:	cf 91       	pop	r28
    50a0:	df 91       	pop	r29
    50a2:	08 95       	ret

000050a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    50a4:	df 93       	push	r29
    50a6:	cf 93       	push	r28
    50a8:	00 d0       	rcall	.+0      	; 0x50aa <xTaskResumeAll+0x6>
    50aa:	00 d0       	rcall	.+0      	; 0x50ac <xTaskResumeAll+0x8>
    50ac:	cd b7       	in	r28, 0x3d	; 61
    50ae:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    50b0:	1c 82       	std	Y+4, r1	; 0x04
    50b2:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    50b4:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    50b6:	0f b6       	in	r0, 0x3f	; 63
    50b8:	f8 94       	cli
    50ba:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    50bc:	80 91 75 06 	lds	r24, 0x0675
    50c0:	81 50       	subi	r24, 0x01	; 1
    50c2:	80 93 75 06 	sts	0x0675, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    50c6:	80 91 75 06 	lds	r24, 0x0675
    50ca:	88 23       	and	r24, r24
    50cc:	09 f0       	breq	.+2      	; 0x50d0 <xTaskResumeAll+0x2c>
    50ce:	73 c0       	rjmp	.+230    	; 0x51b6 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    50d0:	80 91 68 06 	lds	r24, 0x0668
    50d4:	88 23       	and	r24, r24
    50d6:	09 f4       	brne	.+2      	; 0x50da <xTaskResumeAll+0x36>
    50d8:	6e c0       	rjmp	.+220    	; 0x51b6 <xTaskResumeAll+0x112>
    50da:	45 c0       	rjmp	.+138    	; 0x5166 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    50dc:	e0 91 b5 06 	lds	r30, 0x06B5
    50e0:	f0 91 b6 06 	lds	r31, 0x06B6
    50e4:	86 81       	ldd	r24, Z+6	; 0x06
    50e6:	97 81       	ldd	r25, Z+7	; 0x07
    50e8:	9c 83       	std	Y+4, r25	; 0x04
    50ea:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    50ec:	8b 81       	ldd	r24, Y+3	; 0x03
    50ee:	9c 81       	ldd	r25, Y+4	; 0x04
    50f0:	0c 96       	adiw	r24, 0x0c	; 12
    50f2:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    50f6:	8b 81       	ldd	r24, Y+3	; 0x03
    50f8:	9c 81       	ldd	r25, Y+4	; 0x04
    50fa:	02 96       	adiw	r24, 0x02	; 2
    50fc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5100:	eb 81       	ldd	r30, Y+3	; 0x03
    5102:	fc 81       	ldd	r31, Y+4	; 0x04
    5104:	96 89       	ldd	r25, Z+22	; 0x16
    5106:	80 91 6b 06 	lds	r24, 0x066B
    510a:	89 17       	cp	r24, r25
    510c:	28 f4       	brcc	.+10     	; 0x5118 <xTaskResumeAll+0x74>
    510e:	eb 81       	ldd	r30, Y+3	; 0x03
    5110:	fc 81       	ldd	r31, Y+4	; 0x04
    5112:	86 89       	ldd	r24, Z+22	; 0x16
    5114:	80 93 6b 06 	sts	0x066B, r24
    5118:	eb 81       	ldd	r30, Y+3	; 0x03
    511a:	fc 81       	ldd	r31, Y+4	; 0x04
    511c:	86 89       	ldd	r24, Z+22	; 0x16
    511e:	28 2f       	mov	r18, r24
    5120:	30 e0       	ldi	r19, 0x00	; 0
    5122:	c9 01       	movw	r24, r18
    5124:	88 0f       	add	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	88 0f       	add	r24, r24
    512a:	99 1f       	adc	r25, r25
    512c:	88 0f       	add	r24, r24
    512e:	99 1f       	adc	r25, r25
    5130:	82 0f       	add	r24, r18
    5132:	93 1f       	adc	r25, r19
    5134:	ac 01       	movw	r20, r24
    5136:	4a 58       	subi	r20, 0x8A	; 138
    5138:	59 4f       	sbci	r21, 0xF9	; 249
    513a:	8b 81       	ldd	r24, Y+3	; 0x03
    513c:	9c 81       	ldd	r25, Y+4	; 0x04
    513e:	9c 01       	movw	r18, r24
    5140:	2e 5f       	subi	r18, 0xFE	; 254
    5142:	3f 4f       	sbci	r19, 0xFF	; 255
    5144:	ca 01       	movw	r24, r20
    5146:	b9 01       	movw	r22, r18
    5148:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    514c:	eb 81       	ldd	r30, Y+3	; 0x03
    514e:	fc 81       	ldd	r31, Y+4	; 0x04
    5150:	96 89       	ldd	r25, Z+22	; 0x16
    5152:	e0 91 65 06 	lds	r30, 0x0665
    5156:	f0 91 66 06 	lds	r31, 0x0666
    515a:	86 89       	ldd	r24, Z+22	; 0x16
    515c:	98 17       	cp	r25, r24
    515e:	18 f0       	brcs	.+6      	; 0x5166 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	80 93 6e 06 	sts	0x066E, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    5166:	80 91 b0 06 	lds	r24, 0x06B0
    516a:	88 23       	and	r24, r24
    516c:	09 f0       	breq	.+2      	; 0x5170 <xTaskResumeAll+0xcc>
    516e:	b6 cf       	rjmp	.-148    	; 0x50dc <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    5170:	8b 81       	ldd	r24, Y+3	; 0x03
    5172:	9c 81       	ldd	r25, Y+4	; 0x04
    5174:	00 97       	sbiw	r24, 0x00	; 0
    5176:	11 f0       	breq	.+4      	; 0x517c <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    5178:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    517c:	80 91 6d 06 	lds	r24, 0x066D
    5180:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    5182:	89 81       	ldd	r24, Y+1	; 0x01
    5184:	88 23       	and	r24, r24
    5186:	79 f0       	breq	.+30     	; 0x51a6 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    5188:	0e 94 42 29 	call	0x5284	; 0x5284 <xTaskIncrementTick>
    518c:	88 23       	and	r24, r24
    518e:	19 f0       	breq	.+6      	; 0x5196 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	80 93 6e 06 	sts	0x066E, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	81 50       	subi	r24, 0x01	; 1
    519a:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    519c:	89 81       	ldd	r24, Y+1	; 0x01
    519e:	88 23       	and	r24, r24
    51a0:	99 f7       	brne	.-26     	; 0x5188 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    51a2:	10 92 6d 06 	sts	0x066D, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    51a6:	80 91 6e 06 	lds	r24, 0x066E
    51aa:	88 23       	and	r24, r24
    51ac:	21 f0       	breq	.+8      	; 0x51b6 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    51b2:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    51b6:	0f 90       	pop	r0
    51b8:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    51ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    51bc:	0f 90       	pop	r0
    51be:	0f 90       	pop	r0
    51c0:	0f 90       	pop	r0
    51c2:	0f 90       	pop	r0
    51c4:	cf 91       	pop	r28
    51c6:	df 91       	pop	r29
    51c8:	08 95       	ret

000051ca <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    51ca:	df 93       	push	r29
    51cc:	cf 93       	push	r28
    51ce:	00 d0       	rcall	.+0      	; 0x51d0 <xTaskGetTickCount+0x6>
    51d0:	cd b7       	in	r28, 0x3d	; 61
    51d2:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    51d4:	0f b6       	in	r0, 0x3f	; 63
    51d6:	f8 94       	cli
    51d8:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    51da:	80 91 69 06 	lds	r24, 0x0669
    51de:	90 91 6a 06 	lds	r25, 0x066A
    51e2:	9a 83       	std	Y+2, r25	; 0x02
    51e4:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    51e6:	0f 90       	pop	r0
    51e8:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    51ea:	89 81       	ldd	r24, Y+1	; 0x01
    51ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
    51ee:	0f 90       	pop	r0
    51f0:	0f 90       	pop	r0
    51f2:	cf 91       	pop	r28
    51f4:	df 91       	pop	r29
    51f6:	08 95       	ret

000051f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    51f8:	df 93       	push	r29
    51fa:	cf 93       	push	r28
    51fc:	00 d0       	rcall	.+0      	; 0x51fe <xTaskGetTickCountFromISR+0x6>
    51fe:	0f 92       	push	r0
    5200:	cd b7       	in	r28, 0x3d	; 61
    5202:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    5204:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    5206:	80 91 69 06 	lds	r24, 0x0669
    520a:	90 91 6a 06 	lds	r25, 0x066A
    520e:	9b 83       	std	Y+3, r25	; 0x03
    5210:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5212:	8a 81       	ldd	r24, Y+2	; 0x02
    5214:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5216:	0f 90       	pop	r0
    5218:	0f 90       	pop	r0
    521a:	0f 90       	pop	r0
    521c:	cf 91       	pop	r28
    521e:	df 91       	pop	r29
    5220:	08 95       	ret

00005222 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    5222:	df 93       	push	r29
    5224:	cf 93       	push	r28
    5226:	cd b7       	in	r28, 0x3d	; 61
    5228:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    522a:	80 91 68 06 	lds	r24, 0x0668
}
    522e:	cf 91       	pop	r28
    5230:	df 91       	pop	r29
    5232:	08 95       	ret

00005234 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    5234:	df 93       	push	r29
    5236:	cf 93       	push	r28
    5238:	00 d0       	rcall	.+0      	; 0x523a <pcTaskGetName+0x6>
    523a:	00 d0       	rcall	.+0      	; 0x523c <pcTaskGetName+0x8>
    523c:	00 d0       	rcall	.+0      	; 0x523e <pcTaskGetName+0xa>
    523e:	cd b7       	in	r28, 0x3d	; 61
    5240:	de b7       	in	r29, 0x3e	; 62
    5242:	9c 83       	std	Y+4, r25	; 0x04
    5244:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    5246:	8b 81       	ldd	r24, Y+3	; 0x03
    5248:	9c 81       	ldd	r25, Y+4	; 0x04
    524a:	00 97       	sbiw	r24, 0x00	; 0
    524c:	39 f4       	brne	.+14     	; 0x525c <pcTaskGetName+0x28>
    524e:	80 91 65 06 	lds	r24, 0x0665
    5252:	90 91 66 06 	lds	r25, 0x0666
    5256:	9e 83       	std	Y+6, r25	; 0x06
    5258:	8d 83       	std	Y+5, r24	; 0x05
    525a:	04 c0       	rjmp	.+8      	; 0x5264 <pcTaskGetName+0x30>
    525c:	8b 81       	ldd	r24, Y+3	; 0x03
    525e:	9c 81       	ldd	r25, Y+4	; 0x04
    5260:	9e 83       	std	Y+6, r25	; 0x06
    5262:	8d 83       	std	Y+5, r24	; 0x05
    5264:	8d 81       	ldd	r24, Y+5	; 0x05
    5266:	9e 81       	ldd	r25, Y+6	; 0x06
    5268:	9a 83       	std	Y+2, r25	; 0x02
    526a:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    526c:	89 81       	ldd	r24, Y+1	; 0x01
    526e:	9a 81       	ldd	r25, Y+2	; 0x02
    5270:	49 96       	adiw	r24, 0x19	; 25
}
    5272:	26 96       	adiw	r28, 0x06	; 6
    5274:	0f b6       	in	r0, 0x3f	; 63
    5276:	f8 94       	cli
    5278:	de bf       	out	0x3e, r29	; 62
    527a:	0f be       	out	0x3f, r0	; 63
    527c:	cd bf       	out	0x3d, r28	; 61
    527e:	cf 91       	pop	r28
    5280:	df 91       	pop	r29
    5282:	08 95       	ret

00005284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    5284:	df 93       	push	r29
    5286:	cf 93       	push	r28
    5288:	cd b7       	in	r28, 0x3d	; 61
    528a:	de b7       	in	r29, 0x3e	; 62
    528c:	29 97       	sbiw	r28, 0x09	; 9
    528e:	0f b6       	in	r0, 0x3f	; 63
    5290:	f8 94       	cli
    5292:	de bf       	out	0x3e, r29	; 62
    5294:	0f be       	out	0x3f, r0	; 63
    5296:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    5298:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    529a:	80 91 75 06 	lds	r24, 0x0675
    529e:	88 23       	and	r24, r24
    52a0:	09 f0       	breq	.+2      	; 0x52a4 <xTaskIncrementTick+0x20>
    52a2:	c0 c0       	rjmp	.+384    	; 0x5424 <xTaskIncrementTick+0x1a0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    52a4:	80 91 69 06 	lds	r24, 0x0669
    52a8:	90 91 6a 06 	lds	r25, 0x066A
    52ac:	01 96       	adiw	r24, 0x01	; 1
    52ae:	9c 83       	std	Y+4, r25	; 0x04
    52b0:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    52b2:	8b 81       	ldd	r24, Y+3	; 0x03
    52b4:	9c 81       	ldd	r25, Y+4	; 0x04
    52b6:	90 93 6a 06 	sts	0x066A, r25
    52ba:	80 93 69 06 	sts	0x0669, r24

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    52be:	8b 81       	ldd	r24, Y+3	; 0x03
    52c0:	9c 81       	ldd	r25, Y+4	; 0x04
    52c2:	00 97       	sbiw	r24, 0x00	; 0
    52c4:	d9 f4       	brne	.+54     	; 0x52fc <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    52c6:	80 91 ac 06 	lds	r24, 0x06AC
    52ca:	90 91 ad 06 	lds	r25, 0x06AD
    52ce:	9a 83       	std	Y+2, r25	; 0x02
    52d0:	89 83       	std	Y+1, r24	; 0x01
    52d2:	80 91 ae 06 	lds	r24, 0x06AE
    52d6:	90 91 af 06 	lds	r25, 0x06AF
    52da:	90 93 ad 06 	sts	0x06AD, r25
    52de:	80 93 ac 06 	sts	0x06AC, r24
    52e2:	89 81       	ldd	r24, Y+1	; 0x01
    52e4:	9a 81       	ldd	r25, Y+2	; 0x02
    52e6:	90 93 af 06 	sts	0x06AF, r25
    52ea:	80 93 ae 06 	sts	0x06AE, r24
    52ee:	80 91 6f 06 	lds	r24, 0x066F
    52f2:	8f 5f       	subi	r24, 0xFF	; 255
    52f4:	80 93 6f 06 	sts	0x066F, r24
    52f8:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    52fc:	20 91 71 06 	lds	r18, 0x0671
    5300:	30 91 72 06 	lds	r19, 0x0672
    5304:	8b 81       	ldd	r24, Y+3	; 0x03
    5306:	9c 81       	ldd	r25, Y+4	; 0x04
    5308:	82 17       	cp	r24, r18
    530a:	93 07       	cpc	r25, r19
    530c:	08 f4       	brcc	.+2      	; 0x5310 <xTaskIncrementTick+0x8c>
    530e:	71 c0       	rjmp	.+226    	; 0x53f2 <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5310:	e0 91 ac 06 	lds	r30, 0x06AC
    5314:	f0 91 ad 06 	lds	r31, 0x06AD
    5318:	80 81       	ld	r24, Z
    531a:	88 23       	and	r24, r24
    531c:	39 f4       	brne	.+14     	; 0x532c <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    531e:	8f ef       	ldi	r24, 0xFF	; 255
    5320:	9f ef       	ldi	r25, 0xFF	; 255
    5322:	90 93 72 06 	sts	0x0672, r25
    5326:	80 93 71 06 	sts	0x0671, r24
    532a:	63 c0       	rjmp	.+198    	; 0x53f2 <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    532c:	e0 91 ac 06 	lds	r30, 0x06AC
    5330:	f0 91 ad 06 	lds	r31, 0x06AD
    5334:	05 80       	ldd	r0, Z+5	; 0x05
    5336:	f6 81       	ldd	r31, Z+6	; 0x06
    5338:	e0 2d       	mov	r30, r0
    533a:	86 81       	ldd	r24, Z+6	; 0x06
    533c:	97 81       	ldd	r25, Z+7	; 0x07
    533e:	99 87       	std	Y+9, r25	; 0x09
    5340:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    5342:	e8 85       	ldd	r30, Y+8	; 0x08
    5344:	f9 85       	ldd	r31, Y+9	; 0x09
    5346:	82 81       	ldd	r24, Z+2	; 0x02
    5348:	93 81       	ldd	r25, Z+3	; 0x03
    534a:	9f 83       	std	Y+7, r25	; 0x07
    534c:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    534e:	2b 81       	ldd	r18, Y+3	; 0x03
    5350:	3c 81       	ldd	r19, Y+4	; 0x04
    5352:	8e 81       	ldd	r24, Y+6	; 0x06
    5354:	9f 81       	ldd	r25, Y+7	; 0x07
    5356:	28 17       	cp	r18, r24
    5358:	39 07       	cpc	r19, r25
    535a:	38 f4       	brcc	.+14     	; 0x536a <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    535c:	8e 81       	ldd	r24, Y+6	; 0x06
    535e:	9f 81       	ldd	r25, Y+7	; 0x07
    5360:	90 93 72 06 	sts	0x0672, r25
    5364:	80 93 71 06 	sts	0x0671, r24
    5368:	44 c0       	rjmp	.+136    	; 0x53f2 <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    536a:	88 85       	ldd	r24, Y+8	; 0x08
    536c:	99 85       	ldd	r25, Y+9	; 0x09
    536e:	02 96       	adiw	r24, 0x02	; 2
    5370:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    5374:	e8 85       	ldd	r30, Y+8	; 0x08
    5376:	f9 85       	ldd	r31, Y+9	; 0x09
    5378:	84 89       	ldd	r24, Z+20	; 0x14
    537a:	95 89       	ldd	r25, Z+21	; 0x15
    537c:	00 97       	sbiw	r24, 0x00	; 0
    537e:	29 f0       	breq	.+10     	; 0x538a <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5380:	88 85       	ldd	r24, Y+8	; 0x08
    5382:	99 85       	ldd	r25, Y+9	; 0x09
    5384:	0c 96       	adiw	r24, 0x0c	; 12
    5386:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    538a:	e8 85       	ldd	r30, Y+8	; 0x08
    538c:	f9 85       	ldd	r31, Y+9	; 0x09
    538e:	96 89       	ldd	r25, Z+22	; 0x16
    5390:	80 91 6b 06 	lds	r24, 0x066B
    5394:	89 17       	cp	r24, r25
    5396:	28 f4       	brcc	.+10     	; 0x53a2 <xTaskIncrementTick+0x11e>
    5398:	e8 85       	ldd	r30, Y+8	; 0x08
    539a:	f9 85       	ldd	r31, Y+9	; 0x09
    539c:	86 89       	ldd	r24, Z+22	; 0x16
    539e:	80 93 6b 06 	sts	0x066B, r24
    53a2:	e8 85       	ldd	r30, Y+8	; 0x08
    53a4:	f9 85       	ldd	r31, Y+9	; 0x09
    53a6:	86 89       	ldd	r24, Z+22	; 0x16
    53a8:	28 2f       	mov	r18, r24
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	c9 01       	movw	r24, r18
    53ae:	88 0f       	add	r24, r24
    53b0:	99 1f       	adc	r25, r25
    53b2:	88 0f       	add	r24, r24
    53b4:	99 1f       	adc	r25, r25
    53b6:	88 0f       	add	r24, r24
    53b8:	99 1f       	adc	r25, r25
    53ba:	82 0f       	add	r24, r18
    53bc:	93 1f       	adc	r25, r19
    53be:	ac 01       	movw	r20, r24
    53c0:	4a 58       	subi	r20, 0x8A	; 138
    53c2:	59 4f       	sbci	r21, 0xF9	; 249
    53c4:	88 85       	ldd	r24, Y+8	; 0x08
    53c6:	99 85       	ldd	r25, Y+9	; 0x09
    53c8:	9c 01       	movw	r18, r24
    53ca:	2e 5f       	subi	r18, 0xFE	; 254
    53cc:	3f 4f       	sbci	r19, 0xFF	; 255
    53ce:	ca 01       	movw	r24, r20
    53d0:	b9 01       	movw	r22, r18
    53d2:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    53d6:	e8 85       	ldd	r30, Y+8	; 0x08
    53d8:	f9 85       	ldd	r31, Y+9	; 0x09
    53da:	96 89       	ldd	r25, Z+22	; 0x16
    53dc:	e0 91 65 06 	lds	r30, 0x0665
    53e0:	f0 91 66 06 	lds	r31, 0x0666
    53e4:	86 89       	ldd	r24, Z+22	; 0x16
    53e6:	98 17       	cp	r25, r24
    53e8:	08 f4       	brcc	.+2      	; 0x53ec <xTaskIncrementTick+0x168>
    53ea:	92 cf       	rjmp	.-220    	; 0x5310 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	8d 83       	std	Y+5, r24	; 0x05
    53f0:	8f cf       	rjmp	.-226    	; 0x5310 <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    53f2:	e0 91 65 06 	lds	r30, 0x0665
    53f6:	f0 91 66 06 	lds	r31, 0x0666
    53fa:	86 89       	ldd	r24, Z+22	; 0x16
    53fc:	28 2f       	mov	r18, r24
    53fe:	30 e0       	ldi	r19, 0x00	; 0
    5400:	c9 01       	movw	r24, r18
    5402:	88 0f       	add	r24, r24
    5404:	99 1f       	adc	r25, r25
    5406:	88 0f       	add	r24, r24
    5408:	99 1f       	adc	r25, r25
    540a:	88 0f       	add	r24, r24
    540c:	99 1f       	adc	r25, r25
    540e:	82 0f       	add	r24, r18
    5410:	93 1f       	adc	r25, r19
    5412:	fc 01       	movw	r30, r24
    5414:	ea 58       	subi	r30, 0x8A	; 138
    5416:	f9 4f       	sbci	r31, 0xF9	; 249
    5418:	80 81       	ld	r24, Z
    541a:	82 30       	cpi	r24, 0x02	; 2
    541c:	40 f0       	brcs	.+16     	; 0x542e <xTaskIncrementTick+0x1aa>
			{
				xSwitchRequired = pdTRUE;
    541e:	81 e0       	ldi	r24, 0x01	; 1
    5420:	8d 83       	std	Y+5, r24	; 0x05
    5422:	05 c0       	rjmp	.+10     	; 0x542e <xTaskIncrementTick+0x1aa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    5424:	80 91 6d 06 	lds	r24, 0x066D
    5428:	8f 5f       	subi	r24, 0xFF	; 255
    542a:	80 93 6d 06 	sts	0x066D, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    542e:	80 91 6e 06 	lds	r24, 0x066E
    5432:	88 23       	and	r24, r24
    5434:	11 f0       	breq	.+4      	; 0x543a <xTaskIncrementTick+0x1b6>
		{
			xSwitchRequired = pdTRUE;
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    543a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    543c:	29 96       	adiw	r28, 0x09	; 9
    543e:	0f b6       	in	r0, 0x3f	; 63
    5440:	f8 94       	cli
    5442:	de bf       	out	0x3e, r29	; 62
    5444:	0f be       	out	0x3f, r0	; 63
    5446:	cd bf       	out	0x3d, r28	; 61
    5448:	cf 91       	pop	r28
    544a:	df 91       	pop	r29
    544c:	08 95       	ret

0000544e <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    544e:	df 93       	push	r29
    5450:	cf 93       	push	r28
    5452:	00 d0       	rcall	.+0      	; 0x5454 <vTaskSwitchContext+0x6>
    5454:	0f 92       	push	r0
    5456:	cd b7       	in	r28, 0x3d	; 61
    5458:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    545a:	80 91 75 06 	lds	r24, 0x0675
    545e:	88 23       	and	r24, r24
    5460:	21 f0       	breq	.+8      	; 0x546a <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	80 93 6e 06 	sts	0x066E, r24
    5468:	59 c0       	rjmp	.+178    	; 0x551c <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    546a:	10 92 6e 06 	sts	0x066E, r1
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    546e:	80 91 6b 06 	lds	r24, 0x066B
    5472:	8b 83       	std	Y+3, r24	; 0x03
    5474:	03 c0       	rjmp	.+6      	; 0x547c <vTaskSwitchContext+0x2e>
    5476:	8b 81       	ldd	r24, Y+3	; 0x03
    5478:	81 50       	subi	r24, 0x01	; 1
    547a:	8b 83       	std	Y+3, r24	; 0x03
    547c:	8b 81       	ldd	r24, Y+3	; 0x03
    547e:	28 2f       	mov	r18, r24
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	c9 01       	movw	r24, r18
    5484:	88 0f       	add	r24, r24
    5486:	99 1f       	adc	r25, r25
    5488:	88 0f       	add	r24, r24
    548a:	99 1f       	adc	r25, r25
    548c:	88 0f       	add	r24, r24
    548e:	99 1f       	adc	r25, r25
    5490:	82 0f       	add	r24, r18
    5492:	93 1f       	adc	r25, r19
    5494:	fc 01       	movw	r30, r24
    5496:	ea 58       	subi	r30, 0x8A	; 138
    5498:	f9 4f       	sbci	r31, 0xF9	; 249
    549a:	80 81       	ld	r24, Z
    549c:	88 23       	and	r24, r24
    549e:	59 f3       	breq	.-42     	; 0x5476 <vTaskSwitchContext+0x28>
    54a0:	8b 81       	ldd	r24, Y+3	; 0x03
    54a2:	28 2f       	mov	r18, r24
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	c9 01       	movw	r24, r18
    54a8:	88 0f       	add	r24, r24
    54aa:	99 1f       	adc	r25, r25
    54ac:	88 0f       	add	r24, r24
    54ae:	99 1f       	adc	r25, r25
    54b0:	88 0f       	add	r24, r24
    54b2:	99 1f       	adc	r25, r25
    54b4:	82 0f       	add	r24, r18
    54b6:	93 1f       	adc	r25, r19
    54b8:	8a 58       	subi	r24, 0x8A	; 138
    54ba:	99 4f       	sbci	r25, 0xF9	; 249
    54bc:	9a 83       	std	Y+2, r25	; 0x02
    54be:	89 83       	std	Y+1, r24	; 0x01
    54c0:	e9 81       	ldd	r30, Y+1	; 0x01
    54c2:	fa 81       	ldd	r31, Y+2	; 0x02
    54c4:	01 80       	ldd	r0, Z+1	; 0x01
    54c6:	f2 81       	ldd	r31, Z+2	; 0x02
    54c8:	e0 2d       	mov	r30, r0
    54ca:	82 81       	ldd	r24, Z+2	; 0x02
    54cc:	93 81       	ldd	r25, Z+3	; 0x03
    54ce:	e9 81       	ldd	r30, Y+1	; 0x01
    54d0:	fa 81       	ldd	r31, Y+2	; 0x02
    54d2:	92 83       	std	Z+2, r25	; 0x02
    54d4:	81 83       	std	Z+1, r24	; 0x01
    54d6:	e9 81       	ldd	r30, Y+1	; 0x01
    54d8:	fa 81       	ldd	r31, Y+2	; 0x02
    54da:	21 81       	ldd	r18, Z+1	; 0x01
    54dc:	32 81       	ldd	r19, Z+2	; 0x02
    54de:	89 81       	ldd	r24, Y+1	; 0x01
    54e0:	9a 81       	ldd	r25, Y+2	; 0x02
    54e2:	03 96       	adiw	r24, 0x03	; 3
    54e4:	28 17       	cp	r18, r24
    54e6:	39 07       	cpc	r19, r25
    54e8:	59 f4       	brne	.+22     	; 0x5500 <vTaskSwitchContext+0xb2>
    54ea:	e9 81       	ldd	r30, Y+1	; 0x01
    54ec:	fa 81       	ldd	r31, Y+2	; 0x02
    54ee:	01 80       	ldd	r0, Z+1	; 0x01
    54f0:	f2 81       	ldd	r31, Z+2	; 0x02
    54f2:	e0 2d       	mov	r30, r0
    54f4:	82 81       	ldd	r24, Z+2	; 0x02
    54f6:	93 81       	ldd	r25, Z+3	; 0x03
    54f8:	e9 81       	ldd	r30, Y+1	; 0x01
    54fa:	fa 81       	ldd	r31, Y+2	; 0x02
    54fc:	92 83       	std	Z+2, r25	; 0x02
    54fe:	81 83       	std	Z+1, r24	; 0x01
    5500:	e9 81       	ldd	r30, Y+1	; 0x01
    5502:	fa 81       	ldd	r31, Y+2	; 0x02
    5504:	01 80       	ldd	r0, Z+1	; 0x01
    5506:	f2 81       	ldd	r31, Z+2	; 0x02
    5508:	e0 2d       	mov	r30, r0
    550a:	86 81       	ldd	r24, Z+6	; 0x06
    550c:	97 81       	ldd	r25, Z+7	; 0x07
    550e:	90 93 66 06 	sts	0x0666, r25
    5512:	80 93 65 06 	sts	0x0665, r24
    5516:	8b 81       	ldd	r24, Y+3	; 0x03
    5518:	80 93 6b 06 	sts	0x066B, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    551c:	0f 90       	pop	r0
    551e:	0f 90       	pop	r0
    5520:	0f 90       	pop	r0
    5522:	cf 91       	pop	r28
    5524:	df 91       	pop	r29
    5526:	08 95       	ret

00005528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    5528:	df 93       	push	r29
    552a:	cf 93       	push	r28
    552c:	00 d0       	rcall	.+0      	; 0x552e <vTaskPlaceOnEventList+0x6>
    552e:	00 d0       	rcall	.+0      	; 0x5530 <vTaskPlaceOnEventList+0x8>
    5530:	cd b7       	in	r28, 0x3d	; 61
    5532:	de b7       	in	r29, 0x3e	; 62
    5534:	9a 83       	std	Y+2, r25	; 0x02
    5536:	89 83       	std	Y+1, r24	; 0x01
    5538:	7c 83       	std	Y+4, r23	; 0x04
    553a:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    553c:	80 91 65 06 	lds	r24, 0x0665
    5540:	90 91 66 06 	lds	r25, 0x0666
    5544:	9c 01       	movw	r18, r24
    5546:	24 5f       	subi	r18, 0xF4	; 244
    5548:	3f 4f       	sbci	r19, 0xFF	; 255
    554a:	89 81       	ldd	r24, Y+1	; 0x01
    554c:	9a 81       	ldd	r25, Y+2	; 0x02
    554e:	b9 01       	movw	r22, r18
    5550:	0e 94 67 11 	call	0x22ce	; 0x22ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5554:	8b 81       	ldd	r24, Y+3	; 0x03
    5556:	9c 81       	ldd	r25, Y+4	; 0x04
    5558:	61 e0       	ldi	r22, 0x01	; 1
    555a:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <prvAddCurrentTaskToDelayedList>
}
    555e:	0f 90       	pop	r0
    5560:	0f 90       	pop	r0
    5562:	0f 90       	pop	r0
    5564:	0f 90       	pop	r0
    5566:	cf 91       	pop	r28
    5568:	df 91       	pop	r29
    556a:	08 95       	ret

0000556c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    556c:	df 93       	push	r29
    556e:	cf 93       	push	r28
    5570:	00 d0       	rcall	.+0      	; 0x5572 <vTaskPlaceOnUnorderedEventList+0x6>
    5572:	00 d0       	rcall	.+0      	; 0x5574 <vTaskPlaceOnUnorderedEventList+0x8>
    5574:	00 d0       	rcall	.+0      	; 0x5576 <vTaskPlaceOnUnorderedEventList+0xa>
    5576:	cd b7       	in	r28, 0x3d	; 61
    5578:	de b7       	in	r29, 0x3e	; 62
    557a:	9a 83       	std	Y+2, r25	; 0x02
    557c:	89 83       	std	Y+1, r24	; 0x01
    557e:	7c 83       	std	Y+4, r23	; 0x04
    5580:	6b 83       	std	Y+3, r22	; 0x03
    5582:	5e 83       	std	Y+6, r21	; 0x06
    5584:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    5586:	e0 91 65 06 	lds	r30, 0x0665
    558a:	f0 91 66 06 	lds	r31, 0x0666
    558e:	8b 81       	ldd	r24, Y+3	; 0x03
    5590:	9c 81       	ldd	r25, Y+4	; 0x04
    5592:	90 68       	ori	r25, 0x80	; 128
    5594:	95 87       	std	Z+13, r25	; 0x0d
    5596:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5598:	80 91 65 06 	lds	r24, 0x0665
    559c:	90 91 66 06 	lds	r25, 0x0666
    55a0:	9c 01       	movw	r18, r24
    55a2:	24 5f       	subi	r18, 0xF4	; 244
    55a4:	3f 4f       	sbci	r19, 0xFF	; 255
    55a6:	89 81       	ldd	r24, Y+1	; 0x01
    55a8:	9a 81       	ldd	r25, Y+2	; 0x02
    55aa:	b9 01       	movw	r22, r18
    55ac:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    55b0:	8d 81       	ldd	r24, Y+5	; 0x05
    55b2:	9e 81       	ldd	r25, Y+6	; 0x06
    55b4:	61 e0       	ldi	r22, 0x01	; 1
    55b6:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <prvAddCurrentTaskToDelayedList>
}
    55ba:	26 96       	adiw	r28, 0x06	; 6
    55bc:	0f b6       	in	r0, 0x3f	; 63
    55be:	f8 94       	cli
    55c0:	de bf       	out	0x3e, r29	; 62
    55c2:	0f be       	out	0x3f, r0	; 63
    55c4:	cd bf       	out	0x3d, r28	; 61
    55c6:	cf 91       	pop	r28
    55c8:	df 91       	pop	r29
    55ca:	08 95       	ret

000055cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    55cc:	df 93       	push	r29
    55ce:	cf 93       	push	r28
    55d0:	00 d0       	rcall	.+0      	; 0x55d2 <xTaskRemoveFromEventList+0x6>
    55d2:	00 d0       	rcall	.+0      	; 0x55d4 <xTaskRemoveFromEventList+0x8>
    55d4:	0f 92       	push	r0
    55d6:	cd b7       	in	r28, 0x3d	; 61
    55d8:	de b7       	in	r29, 0x3e	; 62
    55da:	9d 83       	std	Y+5, r25	; 0x05
    55dc:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    55de:	ec 81       	ldd	r30, Y+4	; 0x04
    55e0:	fd 81       	ldd	r31, Y+5	; 0x05
    55e2:	05 80       	ldd	r0, Z+5	; 0x05
    55e4:	f6 81       	ldd	r31, Z+6	; 0x06
    55e6:	e0 2d       	mov	r30, r0
    55e8:	86 81       	ldd	r24, Z+6	; 0x06
    55ea:	97 81       	ldd	r25, Z+7	; 0x07
    55ec:	9b 83       	std	Y+3, r25	; 0x03
    55ee:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    55f0:	8a 81       	ldd	r24, Y+2	; 0x02
    55f2:	9b 81       	ldd	r25, Y+3	; 0x03
    55f4:	0c 96       	adiw	r24, 0x0c	; 12
    55f6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    55fa:	80 91 75 06 	lds	r24, 0x0675
    55fe:	88 23       	and	r24, r24
    5600:	61 f5       	brne	.+88     	; 0x565a <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    5602:	8a 81       	ldd	r24, Y+2	; 0x02
    5604:	9b 81       	ldd	r25, Y+3	; 0x03
    5606:	02 96       	adiw	r24, 0x02	; 2
    5608:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    560c:	ea 81       	ldd	r30, Y+2	; 0x02
    560e:	fb 81       	ldd	r31, Y+3	; 0x03
    5610:	96 89       	ldd	r25, Z+22	; 0x16
    5612:	80 91 6b 06 	lds	r24, 0x066B
    5616:	89 17       	cp	r24, r25
    5618:	28 f4       	brcc	.+10     	; 0x5624 <xTaskRemoveFromEventList+0x58>
    561a:	ea 81       	ldd	r30, Y+2	; 0x02
    561c:	fb 81       	ldd	r31, Y+3	; 0x03
    561e:	86 89       	ldd	r24, Z+22	; 0x16
    5620:	80 93 6b 06 	sts	0x066B, r24
    5624:	ea 81       	ldd	r30, Y+2	; 0x02
    5626:	fb 81       	ldd	r31, Y+3	; 0x03
    5628:	86 89       	ldd	r24, Z+22	; 0x16
    562a:	28 2f       	mov	r18, r24
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	c9 01       	movw	r24, r18
    5630:	88 0f       	add	r24, r24
    5632:	99 1f       	adc	r25, r25
    5634:	88 0f       	add	r24, r24
    5636:	99 1f       	adc	r25, r25
    5638:	88 0f       	add	r24, r24
    563a:	99 1f       	adc	r25, r25
    563c:	82 0f       	add	r24, r18
    563e:	93 1f       	adc	r25, r19
    5640:	ac 01       	movw	r20, r24
    5642:	4a 58       	subi	r20, 0x8A	; 138
    5644:	59 4f       	sbci	r21, 0xF9	; 249
    5646:	8a 81       	ldd	r24, Y+2	; 0x02
    5648:	9b 81       	ldd	r25, Y+3	; 0x03
    564a:	9c 01       	movw	r18, r24
    564c:	2e 5f       	subi	r18, 0xFE	; 254
    564e:	3f 4f       	sbci	r19, 0xFF	; 255
    5650:	ca 01       	movw	r24, r20
    5652:	b9 01       	movw	r22, r18
    5654:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
    5658:	0a c0       	rjmp	.+20     	; 0x566e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    565a:	8a 81       	ldd	r24, Y+2	; 0x02
    565c:	9b 81       	ldd	r25, Y+3	; 0x03
    565e:	9c 01       	movw	r18, r24
    5660:	24 5f       	subi	r18, 0xF4	; 244
    5662:	3f 4f       	sbci	r19, 0xFF	; 255
    5664:	80 eb       	ldi	r24, 0xB0	; 176
    5666:	96 e0       	ldi	r25, 0x06	; 6
    5668:	b9 01       	movw	r22, r18
    566a:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    566e:	ea 81       	ldd	r30, Y+2	; 0x02
    5670:	fb 81       	ldd	r31, Y+3	; 0x03
    5672:	96 89       	ldd	r25, Z+22	; 0x16
    5674:	e0 91 65 06 	lds	r30, 0x0665
    5678:	f0 91 66 06 	lds	r31, 0x0666
    567c:	86 89       	ldd	r24, Z+22	; 0x16
    567e:	89 17       	cp	r24, r25
    5680:	30 f4       	brcc	.+12     	; 0x568e <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    5682:	81 e0       	ldi	r24, 0x01	; 1
    5684:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	80 93 6e 06 	sts	0x066E, r24
    568c:	01 c0       	rjmp	.+2      	; 0x5690 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    568e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    5690:	89 81       	ldd	r24, Y+1	; 0x01
}
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	0f 90       	pop	r0
    5698:	0f 90       	pop	r0
    569a:	0f 90       	pop	r0
    569c:	cf 91       	pop	r28
    569e:	df 91       	pop	r29
    56a0:	08 95       	ret

000056a2 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    56a2:	df 93       	push	r29
    56a4:	cf 93       	push	r28
    56a6:	00 d0       	rcall	.+0      	; 0x56a8 <vTaskRemoveFromUnorderedEventList+0x6>
    56a8:	00 d0       	rcall	.+0      	; 0x56aa <vTaskRemoveFromUnorderedEventList+0x8>
    56aa:	00 d0       	rcall	.+0      	; 0x56ac <vTaskRemoveFromUnorderedEventList+0xa>
    56ac:	cd b7       	in	r28, 0x3d	; 61
    56ae:	de b7       	in	r29, 0x3e	; 62
    56b0:	9c 83       	std	Y+4, r25	; 0x04
    56b2:	8b 83       	std	Y+3, r24	; 0x03
    56b4:	7e 83       	std	Y+6, r23	; 0x06
    56b6:	6d 83       	std	Y+5, r22	; 0x05
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    56b8:	8d 81       	ldd	r24, Y+5	; 0x05
    56ba:	9e 81       	ldd	r25, Y+6	; 0x06
    56bc:	90 68       	ori	r25, 0x80	; 128
    56be:	eb 81       	ldd	r30, Y+3	; 0x03
    56c0:	fc 81       	ldd	r31, Y+4	; 0x04
    56c2:	91 83       	std	Z+1, r25	; 0x01
    56c4:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    56c6:	eb 81       	ldd	r30, Y+3	; 0x03
    56c8:	fc 81       	ldd	r31, Y+4	; 0x04
    56ca:	86 81       	ldd	r24, Z+6	; 0x06
    56cc:	97 81       	ldd	r25, Z+7	; 0x07
    56ce:	9a 83       	std	Y+2, r25	; 0x02
    56d0:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    56d2:	8b 81       	ldd	r24, Y+3	; 0x03
    56d4:	9c 81       	ldd	r25, Y+4	; 0x04
    56d6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	9a 81       	ldd	r25, Y+2	; 0x02
    56de:	02 96       	adiw	r24, 0x02	; 2
    56e0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    56e4:	e9 81       	ldd	r30, Y+1	; 0x01
    56e6:	fa 81       	ldd	r31, Y+2	; 0x02
    56e8:	96 89       	ldd	r25, Z+22	; 0x16
    56ea:	80 91 6b 06 	lds	r24, 0x066B
    56ee:	89 17       	cp	r24, r25
    56f0:	28 f4       	brcc	.+10     	; 0x56fc <vTaskRemoveFromUnorderedEventList+0x5a>
    56f2:	e9 81       	ldd	r30, Y+1	; 0x01
    56f4:	fa 81       	ldd	r31, Y+2	; 0x02
    56f6:	86 89       	ldd	r24, Z+22	; 0x16
    56f8:	80 93 6b 06 	sts	0x066B, r24
    56fc:	e9 81       	ldd	r30, Y+1	; 0x01
    56fe:	fa 81       	ldd	r31, Y+2	; 0x02
    5700:	86 89       	ldd	r24, Z+22	; 0x16
    5702:	28 2f       	mov	r18, r24
    5704:	30 e0       	ldi	r19, 0x00	; 0
    5706:	c9 01       	movw	r24, r18
    5708:	88 0f       	add	r24, r24
    570a:	99 1f       	adc	r25, r25
    570c:	88 0f       	add	r24, r24
    570e:	99 1f       	adc	r25, r25
    5710:	88 0f       	add	r24, r24
    5712:	99 1f       	adc	r25, r25
    5714:	82 0f       	add	r24, r18
    5716:	93 1f       	adc	r25, r19
    5718:	ac 01       	movw	r20, r24
    571a:	4a 58       	subi	r20, 0x8A	; 138
    571c:	59 4f       	sbci	r21, 0xF9	; 249
    571e:	89 81       	ldd	r24, Y+1	; 0x01
    5720:	9a 81       	ldd	r25, Y+2	; 0x02
    5722:	9c 01       	movw	r18, r24
    5724:	2e 5f       	subi	r18, 0xFE	; 254
    5726:	3f 4f       	sbci	r19, 0xFF	; 255
    5728:	ca 01       	movw	r24, r20
    572a:	b9 01       	movw	r22, r18
    572c:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5730:	e9 81       	ldd	r30, Y+1	; 0x01
    5732:	fa 81       	ldd	r31, Y+2	; 0x02
    5734:	96 89       	ldd	r25, Z+22	; 0x16
    5736:	e0 91 65 06 	lds	r30, 0x0665
    573a:	f0 91 66 06 	lds	r31, 0x0666
    573e:	86 89       	ldd	r24, Z+22	; 0x16
    5740:	89 17       	cp	r24, r25
    5742:	18 f4       	brcc	.+6      	; 0x574a <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	80 93 6e 06 	sts	0x066E, r24
	}
}
    574a:	26 96       	adiw	r28, 0x06	; 6
    574c:	0f b6       	in	r0, 0x3f	; 63
    574e:	f8 94       	cli
    5750:	de bf       	out	0x3e, r29	; 62
    5752:	0f be       	out	0x3f, r0	; 63
    5754:	cd bf       	out	0x3d, r28	; 61
    5756:	cf 91       	pop	r28
    5758:	df 91       	pop	r29
    575a:	08 95       	ret

0000575c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    575c:	df 93       	push	r29
    575e:	cf 93       	push	r28
    5760:	00 d0       	rcall	.+0      	; 0x5762 <vTaskSetTimeOutState+0x6>
    5762:	cd b7       	in	r28, 0x3d	; 61
    5764:	de b7       	in	r29, 0x3e	; 62
    5766:	9a 83       	std	Y+2, r25	; 0x02
    5768:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    576a:	0f b6       	in	r0, 0x3f	; 63
    576c:	f8 94       	cli
    576e:	0f 92       	push	r0
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    5770:	80 91 6f 06 	lds	r24, 0x066F
    5774:	e9 81       	ldd	r30, Y+1	; 0x01
    5776:	fa 81       	ldd	r31, Y+2	; 0x02
    5778:	80 83       	st	Z, r24
		pxTimeOut->xTimeOnEntering = xTickCount;
    577a:	80 91 69 06 	lds	r24, 0x0669
    577e:	90 91 6a 06 	lds	r25, 0x066A
    5782:	e9 81       	ldd	r30, Y+1	; 0x01
    5784:	fa 81       	ldd	r31, Y+2	; 0x02
    5786:	92 83       	std	Z+2, r25	; 0x02
    5788:	81 83       	std	Z+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    578a:	0f 90       	pop	r0
    578c:	0f be       	out	0x3f, r0	; 63
}
    578e:	0f 90       	pop	r0
    5790:	0f 90       	pop	r0
    5792:	cf 91       	pop	r28
    5794:	df 91       	pop	r29
    5796:	08 95       	ret

00005798 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    5798:	df 93       	push	r29
    579a:	cf 93       	push	r28
    579c:	00 d0       	rcall	.+0      	; 0x579e <vTaskInternalSetTimeOutState+0x6>
    579e:	cd b7       	in	r28, 0x3d	; 61
    57a0:	de b7       	in	r29, 0x3e	; 62
    57a2:	9a 83       	std	Y+2, r25	; 0x02
    57a4:	89 83       	std	Y+1, r24	; 0x01
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    57a6:	80 91 6f 06 	lds	r24, 0x066F
    57aa:	e9 81       	ldd	r30, Y+1	; 0x01
    57ac:	fa 81       	ldd	r31, Y+2	; 0x02
    57ae:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    57b0:	80 91 69 06 	lds	r24, 0x0669
    57b4:	90 91 6a 06 	lds	r25, 0x066A
    57b8:	e9 81       	ldd	r30, Y+1	; 0x01
    57ba:	fa 81       	ldd	r31, Y+2	; 0x02
    57bc:	92 83       	std	Z+2, r25	; 0x02
    57be:	81 83       	std	Z+1, r24	; 0x01
}
    57c0:	0f 90       	pop	r0
    57c2:	0f 90       	pop	r0
    57c4:	cf 91       	pop	r28
    57c6:	df 91       	pop	r29
    57c8:	08 95       	ret

000057ca <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    57ca:	df 93       	push	r29
    57cc:	cf 93       	push	r28
    57ce:	cd b7       	in	r28, 0x3d	; 61
    57d0:	de b7       	in	r29, 0x3e	; 62
    57d2:	29 97       	sbiw	r28, 0x09	; 9
    57d4:	0f b6       	in	r0, 0x3f	; 63
    57d6:	f8 94       	cli
    57d8:	de bf       	out	0x3e, r29	; 62
    57da:	0f be       	out	0x3f, r0	; 63
    57dc:	cd bf       	out	0x3d, r28	; 61
    57de:	9f 83       	std	Y+7, r25	; 0x07
    57e0:	8e 83       	std	Y+6, r24	; 0x06
    57e2:	79 87       	std	Y+9, r23	; 0x09
    57e4:	68 87       	std	Y+8, r22	; 0x08
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    57e6:	0f b6       	in	r0, 0x3f	; 63
    57e8:	f8 94       	cli
    57ea:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    57ec:	80 91 69 06 	lds	r24, 0x0669
    57f0:	90 91 6a 06 	lds	r25, 0x066A
    57f4:	9c 83       	std	Y+4, r25	; 0x04
    57f6:	8b 83       	std	Y+3, r24	; 0x03
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    57f8:	ee 81       	ldd	r30, Y+6	; 0x06
    57fa:	ff 81       	ldd	r31, Y+7	; 0x07
    57fc:	21 81       	ldd	r18, Z+1	; 0x01
    57fe:	32 81       	ldd	r19, Z+2	; 0x02
    5800:	8b 81       	ldd	r24, Y+3	; 0x03
    5802:	9c 81       	ldd	r25, Y+4	; 0x04
    5804:	82 1b       	sub	r24, r18
    5806:	93 0b       	sbc	r25, r19
    5808:	9a 83       	std	Y+2, r25	; 0x02
    580a:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    580c:	e8 85       	ldd	r30, Y+8	; 0x08
    580e:	f9 85       	ldd	r31, Y+9	; 0x09
    5810:	80 81       	ld	r24, Z
    5812:	91 81       	ldd	r25, Z+1	; 0x01
    5814:	2f ef       	ldi	r18, 0xFF	; 255
    5816:	8f 3f       	cpi	r24, 0xFF	; 255
    5818:	92 07       	cpc	r25, r18
    581a:	11 f4       	brne	.+4      	; 0x5820 <xTaskCheckForTimeOut+0x56>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    581c:	1d 82       	std	Y+5, r1	; 0x05
    581e:	36 c0       	rjmp	.+108    	; 0x588c <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    5820:	ee 81       	ldd	r30, Y+6	; 0x06
    5822:	ff 81       	ldd	r31, Y+7	; 0x07
    5824:	90 81       	ld	r25, Z
    5826:	80 91 6f 06 	lds	r24, 0x066F
    582a:	98 17       	cp	r25, r24
    582c:	61 f0       	breq	.+24     	; 0x5846 <xTaskCheckForTimeOut+0x7c>
    582e:	ee 81       	ldd	r30, Y+6	; 0x06
    5830:	ff 81       	ldd	r31, Y+7	; 0x07
    5832:	21 81       	ldd	r18, Z+1	; 0x01
    5834:	32 81       	ldd	r19, Z+2	; 0x02
    5836:	8b 81       	ldd	r24, Y+3	; 0x03
    5838:	9c 81       	ldd	r25, Y+4	; 0x04
    583a:	82 17       	cp	r24, r18
    583c:	93 07       	cpc	r25, r19
    583e:	18 f0       	brcs	.+6      	; 0x5846 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5840:	81 e0       	ldi	r24, 0x01	; 1
    5842:	8d 83       	std	Y+5, r24	; 0x05
    5844:	23 c0       	rjmp	.+70     	; 0x588c <xTaskCheckForTimeOut+0xc2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    5846:	e8 85       	ldd	r30, Y+8	; 0x08
    5848:	f9 85       	ldd	r31, Y+9	; 0x09
    584a:	20 81       	ld	r18, Z
    584c:	31 81       	ldd	r19, Z+1	; 0x01
    584e:	89 81       	ldd	r24, Y+1	; 0x01
    5850:	9a 81       	ldd	r25, Y+2	; 0x02
    5852:	82 17       	cp	r24, r18
    5854:	93 07       	cpc	r25, r19
    5856:	a0 f4       	brcc	.+40     	; 0x5880 <xTaskCheckForTimeOut+0xb6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    5858:	e8 85       	ldd	r30, Y+8	; 0x08
    585a:	f9 85       	ldd	r31, Y+9	; 0x09
    585c:	20 81       	ld	r18, Z
    585e:	31 81       	ldd	r19, Z+1	; 0x01
    5860:	89 81       	ldd	r24, Y+1	; 0x01
    5862:	9a 81       	ldd	r25, Y+2	; 0x02
    5864:	a9 01       	movw	r20, r18
    5866:	48 1b       	sub	r20, r24
    5868:	59 0b       	sbc	r21, r25
    586a:	ca 01       	movw	r24, r20
    586c:	e8 85       	ldd	r30, Y+8	; 0x08
    586e:	f9 85       	ldd	r31, Y+9	; 0x09
    5870:	91 83       	std	Z+1, r25	; 0x01
    5872:	80 83       	st	Z, r24
			vTaskInternalSetTimeOutState( pxTimeOut );
    5874:	8e 81       	ldd	r24, Y+6	; 0x06
    5876:	9f 81       	ldd	r25, Y+7	; 0x07
    5878:	0e 94 cc 2b 	call	0x5798	; 0x5798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    587c:	1d 82       	std	Y+5, r1	; 0x05
    587e:	06 c0       	rjmp	.+12     	; 0x588c <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			*pxTicksToWait = 0;
    5880:	e8 85       	ldd	r30, Y+8	; 0x08
    5882:	f9 85       	ldd	r31, Y+9	; 0x09
    5884:	11 82       	std	Z+1, r1	; 0x01
    5886:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
	taskEXIT_CRITICAL();
    588c:	0f 90       	pop	r0
    588e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    5890:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5892:	29 96       	adiw	r28, 0x09	; 9
    5894:	0f b6       	in	r0, 0x3f	; 63
    5896:	f8 94       	cli
    5898:	de bf       	out	0x3e, r29	; 62
    589a:	0f be       	out	0x3f, r0	; 63
    589c:	cd bf       	out	0x3d, r28	; 61
    589e:	cf 91       	pop	r28
    58a0:	df 91       	pop	r29
    58a2:	08 95       	ret

000058a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    58a4:	df 93       	push	r29
    58a6:	cf 93       	push	r28
    58a8:	cd b7       	in	r28, 0x3d	; 61
    58aa:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    58ac:	81 e0       	ldi	r24, 0x01	; 1
    58ae:	80 93 6e 06 	sts	0x066E, r24
}
    58b2:	cf 91       	pop	r28
    58b4:	df 91       	pop	r29
    58b6:	08 95       	ret

000058b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    58b8:	df 93       	push	r29
    58ba:	cf 93       	push	r28
    58bc:	00 d0       	rcall	.+0      	; 0x58be <prvIdleTask+0x6>
    58be:	cd b7       	in	r28, 0x3d	; 61
    58c0:	de b7       	in	r29, 0x3e	; 62
    58c2:	9a 83       	std	Y+2, r25	; 0x02
    58c4:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    58c6:	0e 94 a7 2c 	call	0x594e	; 0x594e <prvCheckTasksWaitingTermination>
    58ca:	fd cf       	rjmp	.-6      	; 0x58c6 <prvIdleTask+0xe>

000058cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    58cc:	df 93       	push	r29
    58ce:	cf 93       	push	r28
    58d0:	0f 92       	push	r0
    58d2:	cd b7       	in	r28, 0x3d	; 61
    58d4:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    58d6:	19 82       	std	Y+1, r1	; 0x01
    58d8:	13 c0       	rjmp	.+38     	; 0x5900 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    58da:	89 81       	ldd	r24, Y+1	; 0x01
    58dc:	28 2f       	mov	r18, r24
    58de:	30 e0       	ldi	r19, 0x00	; 0
    58e0:	c9 01       	movw	r24, r18
    58e2:	88 0f       	add	r24, r24
    58e4:	99 1f       	adc	r25, r25
    58e6:	88 0f       	add	r24, r24
    58e8:	99 1f       	adc	r25, r25
    58ea:	88 0f       	add	r24, r24
    58ec:	99 1f       	adc	r25, r25
    58ee:	82 0f       	add	r24, r18
    58f0:	93 1f       	adc	r25, r19
    58f2:	8a 58       	subi	r24, 0x8A	; 138
    58f4:	99 4f       	sbci	r25, 0xF9	; 249
    58f6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    58fa:	89 81       	ldd	r24, Y+1	; 0x01
    58fc:	8f 5f       	subi	r24, 0xFF	; 255
    58fe:	89 83       	std	Y+1, r24	; 0x01
    5900:	89 81       	ldd	r24, Y+1	; 0x01
    5902:	84 30       	cpi	r24, 0x04	; 4
    5904:	50 f3       	brcs	.-44     	; 0x58da <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    5906:	8a e9       	ldi	r24, 0x9A	; 154
    5908:	96 e0       	ldi	r25, 0x06	; 6
    590a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    590e:	83 ea       	ldi	r24, 0xA3	; 163
    5910:	96 e0       	ldi	r25, 0x06	; 6
    5912:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    5916:	80 eb       	ldi	r24, 0xB0	; 176
    5918:	96 e0       	ldi	r25, 0x06	; 6
    591a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    591e:	89 eb       	ldi	r24, 0xB9	; 185
    5920:	96 e0       	ldi	r25, 0x06	; 6
    5922:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    5926:	82 ec       	ldi	r24, 0xC2	; 194
    5928:	96 e0       	ldi	r25, 0x06	; 6
    592a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    592e:	8a e9       	ldi	r24, 0x9A	; 154
    5930:	96 e0       	ldi	r25, 0x06	; 6
    5932:	90 93 ad 06 	sts	0x06AD, r25
    5936:	80 93 ac 06 	sts	0x06AC, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    593a:	83 ea       	ldi	r24, 0xA3	; 163
    593c:	96 e0       	ldi	r25, 0x06	; 6
    593e:	90 93 af 06 	sts	0x06AF, r25
    5942:	80 93 ae 06 	sts	0x06AE, r24
}
    5946:	0f 90       	pop	r0
    5948:	cf 91       	pop	r28
    594a:	df 91       	pop	r29
    594c:	08 95       	ret

0000594e <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    594e:	df 93       	push	r29
    5950:	cf 93       	push	r28
    5952:	00 d0       	rcall	.+0      	; 0x5954 <prvCheckTasksWaitingTermination+0x6>
    5954:	cd b7       	in	r28, 0x3d	; 61
    5956:	de b7       	in	r29, 0x3e	; 62
    5958:	20 c0       	rjmp	.+64     	; 0x599a <prvCheckTasksWaitingTermination+0x4c>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
    595a:	0f b6       	in	r0, 0x3f	; 63
    595c:	f8 94       	cli
    595e:	0f 92       	push	r0
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5960:	e0 91 be 06 	lds	r30, 0x06BE
    5964:	f0 91 bf 06 	lds	r31, 0x06BF
    5968:	86 81       	ldd	r24, Z+6	; 0x06
    596a:	97 81       	ldd	r25, Z+7	; 0x07
    596c:	9a 83       	std	Y+2, r25	; 0x02
    596e:	89 83       	std	Y+1, r24	; 0x01
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5970:	89 81       	ldd	r24, Y+1	; 0x01
    5972:	9a 81       	ldd	r25, Y+2	; 0x02
    5974:	02 96       	adiw	r24, 0x02	; 2
    5976:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
    597a:	80 91 68 06 	lds	r24, 0x0668
    597e:	81 50       	subi	r24, 0x01	; 1
    5980:	80 93 68 06 	sts	0x0668, r24
				--uxDeletedTasksWaitingCleanUp;
    5984:	80 91 67 06 	lds	r24, 0x0667
    5988:	81 50       	subi	r24, 0x01	; 1
    598a:	80 93 67 06 	sts	0x0667, r24
			}
			taskEXIT_CRITICAL();
    598e:	0f 90       	pop	r0
    5990:	0f be       	out	0x3f, r0	; 63

			prvDeleteTCB( pxTCB );
    5992:	89 81       	ldd	r24, Y+1	; 0x01
    5994:	9a 81       	ldd	r25, Y+2	; 0x02
    5996:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    599a:	80 91 67 06 	lds	r24, 0x0667
    599e:	88 23       	and	r24, r24
    59a0:	e1 f6       	brne	.-72     	; 0x595a <prvCheckTasksWaitingTermination+0xc>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    59a2:	0f 90       	pop	r0
    59a4:	0f 90       	pop	r0
    59a6:	cf 91       	pop	r28
    59a8:	df 91       	pop	r29
    59aa:	08 95       	ret

000059ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    59ac:	df 93       	push	r29
    59ae:	cf 93       	push	r28
    59b0:	00 d0       	rcall	.+0      	; 0x59b2 <prvDeleteTCB+0x6>
    59b2:	cd b7       	in	r28, 0x3d	; 61
    59b4:	de b7       	in	r29, 0x3e	; 62
    59b6:	9a 83       	std	Y+2, r25	; 0x02
    59b8:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    59ba:	e9 81       	ldd	r30, Y+1	; 0x01
    59bc:	fa 81       	ldd	r31, Y+2	; 0x02
    59be:	87 89       	ldd	r24, Z+23	; 0x17
    59c0:	90 8d       	ldd	r25, Z+24	; 0x18
    59c2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
			vPortFree( pxTCB );
    59c6:	89 81       	ldd	r24, Y+1	; 0x01
    59c8:	9a 81       	ldd	r25, Y+2	; 0x02
    59ca:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    59ce:	0f 90       	pop	r0
    59d0:	0f 90       	pop	r0
    59d2:	cf 91       	pop	r28
    59d4:	df 91       	pop	r29
    59d6:	08 95       	ret

000059d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    59d8:	df 93       	push	r29
    59da:	cf 93       	push	r28
    59dc:	00 d0       	rcall	.+0      	; 0x59de <prvResetNextTaskUnblockTime+0x6>
    59de:	cd b7       	in	r28, 0x3d	; 61
    59e0:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    59e2:	e0 91 ac 06 	lds	r30, 0x06AC
    59e6:	f0 91 ad 06 	lds	r31, 0x06AD
    59ea:	80 81       	ld	r24, Z
    59ec:	88 23       	and	r24, r24
    59ee:	39 f4       	brne	.+14     	; 0x59fe <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    59f0:	8f ef       	ldi	r24, 0xFF	; 255
    59f2:	9f ef       	ldi	r25, 0xFF	; 255
    59f4:	90 93 72 06 	sts	0x0672, r25
    59f8:	80 93 71 06 	sts	0x0671, r24
    59fc:	13 c0       	rjmp	.+38     	; 0x5a24 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    59fe:	e0 91 ac 06 	lds	r30, 0x06AC
    5a02:	f0 91 ad 06 	lds	r31, 0x06AD
    5a06:	05 80       	ldd	r0, Z+5	; 0x05
    5a08:	f6 81       	ldd	r31, Z+6	; 0x06
    5a0a:	e0 2d       	mov	r30, r0
    5a0c:	86 81       	ldd	r24, Z+6	; 0x06
    5a0e:	97 81       	ldd	r25, Z+7	; 0x07
    5a10:	9a 83       	std	Y+2, r25	; 0x02
    5a12:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    5a14:	e9 81       	ldd	r30, Y+1	; 0x01
    5a16:	fa 81       	ldd	r31, Y+2	; 0x02
    5a18:	82 81       	ldd	r24, Z+2	; 0x02
    5a1a:	93 81       	ldd	r25, Z+3	; 0x03
    5a1c:	90 93 72 06 	sts	0x0672, r25
    5a20:	80 93 71 06 	sts	0x0671, r24
	}
}
    5a24:	0f 90       	pop	r0
    5a26:	0f 90       	pop	r0
    5a28:	cf 91       	pop	r28
    5a2a:	df 91       	pop	r29
    5a2c:	08 95       	ret

00005a2e <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    5a2e:	df 93       	push	r29
    5a30:	cf 93       	push	r28
    5a32:	00 d0       	rcall	.+0      	; 0x5a34 <xTaskGetCurrentTaskHandle+0x6>
    5a34:	cd b7       	in	r28, 0x3d	; 61
    5a36:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5a38:	80 91 65 06 	lds	r24, 0x0665
    5a3c:	90 91 66 06 	lds	r25, 0x0666
    5a40:	9a 83       	std	Y+2, r25	; 0x02
    5a42:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    5a44:	89 81       	ldd	r24, Y+1	; 0x01
    5a46:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    5a48:	0f 90       	pop	r0
    5a4a:	0f 90       	pop	r0
    5a4c:	cf 91       	pop	r28
    5a4e:	df 91       	pop	r29
    5a50:	08 95       	ret

00005a52 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    5a52:	df 93       	push	r29
    5a54:	cf 93       	push	r28
    5a56:	00 d0       	rcall	.+0      	; 0x5a58 <uxTaskResetEventItemValue+0x6>
    5a58:	cd b7       	in	r28, 0x3d	; 61
    5a5a:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    5a5c:	e0 91 65 06 	lds	r30, 0x0665
    5a60:	f0 91 66 06 	lds	r31, 0x0666
    5a64:	84 85       	ldd	r24, Z+12	; 0x0c
    5a66:	95 85       	ldd	r25, Z+13	; 0x0d
    5a68:	9a 83       	std	Y+2, r25	; 0x02
    5a6a:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5a6c:	a0 91 65 06 	lds	r26, 0x0665
    5a70:	b0 91 66 06 	lds	r27, 0x0666
    5a74:	e0 91 65 06 	lds	r30, 0x0665
    5a78:	f0 91 66 06 	lds	r31, 0x0666
    5a7c:	86 89       	ldd	r24, Z+22	; 0x16
    5a7e:	28 2f       	mov	r18, r24
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	84 e0       	ldi	r24, 0x04	; 4
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	82 1b       	sub	r24, r18
    5a88:	93 0b       	sbc	r25, r19
    5a8a:	1d 96       	adiw	r26, 0x0d	; 13
    5a8c:	9c 93       	st	X, r25
    5a8e:	8e 93       	st	-X, r24
    5a90:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    5a92:	89 81       	ldd	r24, Y+1	; 0x01
    5a94:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5a96:	0f 90       	pop	r0
    5a98:	0f 90       	pop	r0
    5a9a:	cf 91       	pop	r28
    5a9c:	df 91       	pop	r29
    5a9e:	08 95       	ret

00005aa0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    5aa0:	df 93       	push	r29
    5aa2:	cf 93       	push	r28
    5aa4:	cd b7       	in	r28, 0x3d	; 61
    5aa6:	de b7       	in	r29, 0x3e	; 62
    5aa8:	27 97       	sbiw	r28, 0x07	; 7
    5aaa:	0f b6       	in	r0, 0x3f	; 63
    5aac:	f8 94       	cli
    5aae:	de bf       	out	0x3e, r29	; 62
    5ab0:	0f be       	out	0x3f, r0	; 63
    5ab2:	cd bf       	out	0x3d, r28	; 61
    5ab4:	8d 83       	std	Y+5, r24	; 0x05
    5ab6:	7f 83       	std	Y+7, r23	; 0x07
    5ab8:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    5aba:	0f b6       	in	r0, 0x3f	; 63
    5abc:	f8 94       	cli
    5abe:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    5ac0:	e0 91 65 06 	lds	r30, 0x0665
    5ac4:	f0 91 66 06 	lds	r31, 0x0666
    5ac8:	81 a1       	ldd	r24, Z+33	; 0x21
    5aca:	92 a1       	ldd	r25, Z+34	; 0x22
    5acc:	a3 a1       	ldd	r26, Z+35	; 0x23
    5ace:	b4 a1       	ldd	r27, Z+36	; 0x24
    5ad0:	00 97       	sbiw	r24, 0x00	; 0
    5ad2:	a1 05       	cpc	r26, r1
    5ad4:	b1 05       	cpc	r27, r1
    5ad6:	89 f4       	brne	.+34     	; 0x5afa <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5ad8:	e0 91 65 06 	lds	r30, 0x0665
    5adc:	f0 91 66 06 	lds	r31, 0x0666
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
    5ae2:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    5ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    5ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    5ae8:	00 97       	sbiw	r24, 0x00	; 0
    5aea:	39 f0       	breq	.+14     	; 0x5afa <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5aec:	8e 81       	ldd	r24, Y+6	; 0x06
    5aee:	9f 81       	ldd	r25, Y+7	; 0x07
    5af0:	61 e0       	ldi	r22, 0x01	; 1
    5af2:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    5af6:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    5afa:	0f 90       	pop	r0
    5afc:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    5afe:	0f b6       	in	r0, 0x3f	; 63
    5b00:	f8 94       	cli
    5b02:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    5b04:	e0 91 65 06 	lds	r30, 0x0665
    5b08:	f0 91 66 06 	lds	r31, 0x0666
    5b0c:	81 a1       	ldd	r24, Z+33	; 0x21
    5b0e:	92 a1       	ldd	r25, Z+34	; 0x22
    5b10:	a3 a1       	ldd	r26, Z+35	; 0x23
    5b12:	b4 a1       	ldd	r27, Z+36	; 0x24
    5b14:	89 83       	std	Y+1, r24	; 0x01
    5b16:	9a 83       	std	Y+2, r25	; 0x02
    5b18:	ab 83       	std	Y+3, r26	; 0x03
    5b1a:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    5b1c:	89 81       	ldd	r24, Y+1	; 0x01
    5b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b20:	ab 81       	ldd	r26, Y+3	; 0x03
    5b22:	bc 81       	ldd	r27, Y+4	; 0x04
    5b24:	00 97       	sbiw	r24, 0x00	; 0
    5b26:	a1 05       	cpc	r26, r1
    5b28:	b1 05       	cpc	r27, r1
    5b2a:	d9 f0       	breq	.+54     	; 0x5b62 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    5b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b2e:	88 23       	and	r24, r24
    5b30:	49 f0       	breq	.+18     	; 0x5b44 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    5b32:	e0 91 65 06 	lds	r30, 0x0665
    5b36:	f0 91 66 06 	lds	r31, 0x0666
    5b3a:	11 a2       	std	Z+33, r1	; 0x21
    5b3c:	12 a2       	std	Z+34, r1	; 0x22
    5b3e:	13 a2       	std	Z+35, r1	; 0x23
    5b40:	14 a2       	std	Z+36, r1	; 0x24
    5b42:	0f c0       	rjmp	.+30     	; 0x5b62 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    5b44:	e0 91 65 06 	lds	r30, 0x0665
    5b48:	f0 91 66 06 	lds	r31, 0x0666
    5b4c:	89 81       	ldd	r24, Y+1	; 0x01
    5b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b50:	ab 81       	ldd	r26, Y+3	; 0x03
    5b52:	bc 81       	ldd	r27, Y+4	; 0x04
    5b54:	01 97       	sbiw	r24, 0x01	; 1
    5b56:	a1 09       	sbc	r26, r1
    5b58:	b1 09       	sbc	r27, r1
    5b5a:	81 a3       	std	Z+33, r24	; 0x21
    5b5c:	92 a3       	std	Z+34, r25	; 0x22
    5b5e:	a3 a3       	std	Z+35, r26	; 0x23
    5b60:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5b62:	e0 91 65 06 	lds	r30, 0x0665
    5b66:	f0 91 66 06 	lds	r31, 0x0666
    5b6a:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    5b6c:	0f 90       	pop	r0
    5b6e:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    5b70:	89 81       	ldd	r24, Y+1	; 0x01
    5b72:	9a 81       	ldd	r25, Y+2	; 0x02
    5b74:	ab 81       	ldd	r26, Y+3	; 0x03
    5b76:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    5b78:	bc 01       	movw	r22, r24
    5b7a:	cd 01       	movw	r24, r26
    5b7c:	27 96       	adiw	r28, 0x07	; 7
    5b7e:	0f b6       	in	r0, 0x3f	; 63
    5b80:	f8 94       	cli
    5b82:	de bf       	out	0x3e, r29	; 62
    5b84:	0f be       	out	0x3f, r0	; 63
    5b86:	cd bf       	out	0x3d, r28	; 61
    5b88:	cf 91       	pop	r28
    5b8a:	df 91       	pop	r29
    5b8c:	08 95       	ret

00005b8e <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    5b8e:	ef 92       	push	r14
    5b90:	ff 92       	push	r15
    5b92:	0f 93       	push	r16
    5b94:	1f 93       	push	r17
    5b96:	df 93       	push	r29
    5b98:	cf 93       	push	r28
    5b9a:	cd b7       	in	r28, 0x3d	; 61
    5b9c:	de b7       	in	r29, 0x3e	; 62
    5b9e:	2d 97       	sbiw	r28, 0x0d	; 13
    5ba0:	0f b6       	in	r0, 0x3f	; 63
    5ba2:	f8 94       	cli
    5ba4:	de bf       	out	0x3e, r29	; 62
    5ba6:	0f be       	out	0x3f, r0	; 63
    5ba8:	cd bf       	out	0x3d, r28	; 61
    5baa:	6a 83       	std	Y+2, r22	; 0x02
    5bac:	7b 83       	std	Y+3, r23	; 0x03
    5bae:	8c 83       	std	Y+4, r24	; 0x04
    5bb0:	9d 83       	std	Y+5, r25	; 0x05
    5bb2:	2e 83       	std	Y+6, r18	; 0x06
    5bb4:	3f 83       	std	Y+7, r19	; 0x07
    5bb6:	48 87       	std	Y+8, r20	; 0x08
    5bb8:	59 87       	std	Y+9, r21	; 0x09
    5bba:	1b 87       	std	Y+11, r17	; 0x0b
    5bbc:	0a 87       	std	Y+10, r16	; 0x0a
    5bbe:	fd 86       	std	Y+13, r15	; 0x0d
    5bc0:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    5bc2:	0f b6       	in	r0, 0x3f	; 63
    5bc4:	f8 94       	cli
    5bc6:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    5bc8:	e0 91 65 06 	lds	r30, 0x0665
    5bcc:	f0 91 66 06 	lds	r31, 0x0666
    5bd0:	85 a1       	ldd	r24, Z+37	; 0x25
    5bd2:	82 30       	cpi	r24, 0x02	; 2
    5bd4:	49 f1       	breq	.+82     	; 0x5c28 <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    5bd6:	e0 91 65 06 	lds	r30, 0x0665
    5bda:	f0 91 66 06 	lds	r31, 0x0666
    5bde:	21 a1       	ldd	r18, Z+33	; 0x21
    5be0:	32 a1       	ldd	r19, Z+34	; 0x22
    5be2:	43 a1       	ldd	r20, Z+35	; 0x23
    5be4:	54 a1       	ldd	r21, Z+36	; 0x24
    5be6:	8a 81       	ldd	r24, Y+2	; 0x02
    5be8:	9b 81       	ldd	r25, Y+3	; 0x03
    5bea:	ac 81       	ldd	r26, Y+4	; 0x04
    5bec:	bd 81       	ldd	r27, Y+5	; 0x05
    5bee:	80 95       	com	r24
    5bf0:	90 95       	com	r25
    5bf2:	a0 95       	com	r26
    5bf4:	b0 95       	com	r27
    5bf6:	82 23       	and	r24, r18
    5bf8:	93 23       	and	r25, r19
    5bfa:	a4 23       	and	r26, r20
    5bfc:	b5 23       	and	r27, r21
    5bfe:	81 a3       	std	Z+33, r24	; 0x21
    5c00:	92 a3       	std	Z+34, r25	; 0x22
    5c02:	a3 a3       	std	Z+35, r26	; 0x23
    5c04:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5c06:	e0 91 65 06 	lds	r30, 0x0665
    5c0a:	f0 91 66 06 	lds	r31, 0x0666
    5c0e:	81 e0       	ldi	r24, 0x01	; 1
    5c10:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    5c12:	8c 85       	ldd	r24, Y+12	; 0x0c
    5c14:	9d 85       	ldd	r25, Y+13	; 0x0d
    5c16:	00 97       	sbiw	r24, 0x00	; 0
    5c18:	39 f0       	breq	.+14     	; 0x5c28 <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    5c1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    5c1e:	61 e0       	ldi	r22, 0x01	; 1
    5c20:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    5c24:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    5c28:	0f 90       	pop	r0
    5c2a:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    5c2c:	0f b6       	in	r0, 0x3f	; 63
    5c2e:	f8 94       	cli
    5c30:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    5c32:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c34:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c36:	00 97       	sbiw	r24, 0x00	; 0
    5c38:	71 f0       	breq	.+28     	; 0x5c56 <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    5c3a:	e0 91 65 06 	lds	r30, 0x0665
    5c3e:	f0 91 66 06 	lds	r31, 0x0666
    5c42:	81 a1       	ldd	r24, Z+33	; 0x21
    5c44:	92 a1       	ldd	r25, Z+34	; 0x22
    5c46:	a3 a1       	ldd	r26, Z+35	; 0x23
    5c48:	b4 a1       	ldd	r27, Z+36	; 0x24
    5c4a:	ea 85       	ldd	r30, Y+10	; 0x0a
    5c4c:	fb 85       	ldd	r31, Y+11	; 0x0b
    5c4e:	80 83       	st	Z, r24
    5c50:	91 83       	std	Z+1, r25	; 0x01
    5c52:	a2 83       	std	Z+2, r26	; 0x02
    5c54:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    5c56:	e0 91 65 06 	lds	r30, 0x0665
    5c5a:	f0 91 66 06 	lds	r31, 0x0666
    5c5e:	85 a1       	ldd	r24, Z+37	; 0x25
    5c60:	82 30       	cpi	r24, 0x02	; 2
    5c62:	11 f0       	breq	.+4      	; 0x5c68 <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    5c64:	19 82       	std	Y+1, r1	; 0x01
    5c66:	1a c0       	rjmp	.+52     	; 0x5c9c <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    5c68:	e0 91 65 06 	lds	r30, 0x0665
    5c6c:	f0 91 66 06 	lds	r31, 0x0666
    5c70:	21 a1       	ldd	r18, Z+33	; 0x21
    5c72:	32 a1       	ldd	r19, Z+34	; 0x22
    5c74:	43 a1       	ldd	r20, Z+35	; 0x23
    5c76:	54 a1       	ldd	r21, Z+36	; 0x24
    5c78:	8e 81       	ldd	r24, Y+6	; 0x06
    5c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    5c7c:	a8 85       	ldd	r26, Y+8	; 0x08
    5c7e:	b9 85       	ldd	r27, Y+9	; 0x09
    5c80:	80 95       	com	r24
    5c82:	90 95       	com	r25
    5c84:	a0 95       	com	r26
    5c86:	b0 95       	com	r27
    5c88:	82 23       	and	r24, r18
    5c8a:	93 23       	and	r25, r19
    5c8c:	a4 23       	and	r26, r20
    5c8e:	b5 23       	and	r27, r21
    5c90:	81 a3       	std	Z+33, r24	; 0x21
    5c92:	92 a3       	std	Z+34, r25	; 0x22
    5c94:	a3 a3       	std	Z+35, r26	; 0x23
    5c96:	b4 a3       	std	Z+36, r27	; 0x24
				xReturn = pdTRUE;
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5c9c:	e0 91 65 06 	lds	r30, 0x0665
    5ca0:	f0 91 66 06 	lds	r31, 0x0666
    5ca4:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    5ca6:	0f 90       	pop	r0
    5ca8:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5caa:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5cac:	2d 96       	adiw	r28, 0x0d	; 13
    5cae:	0f b6       	in	r0, 0x3f	; 63
    5cb0:	f8 94       	cli
    5cb2:	de bf       	out	0x3e, r29	; 62
    5cb4:	0f be       	out	0x3f, r0	; 63
    5cb6:	cd bf       	out	0x3d, r28	; 61
    5cb8:	cf 91       	pop	r28
    5cba:	df 91       	pop	r29
    5cbc:	1f 91       	pop	r17
    5cbe:	0f 91       	pop	r16
    5cc0:	ff 90       	pop	r15
    5cc2:	ef 90       	pop	r14
    5cc4:	08 95       	ret

00005cc6 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    5cc6:	0f 93       	push	r16
    5cc8:	1f 93       	push	r17
    5cca:	df 93       	push	r29
    5ccc:	cf 93       	push	r28
    5cce:	cd b7       	in	r28, 0x3d	; 61
    5cd0:	de b7       	in	r29, 0x3e	; 62
    5cd2:	2f 97       	sbiw	r28, 0x0f	; 15
    5cd4:	0f b6       	in	r0, 0x3f	; 63
    5cd6:	f8 94       	cli
    5cd8:	de bf       	out	0x3e, r29	; 62
    5cda:	0f be       	out	0x3f, r0	; 63
    5cdc:	cd bf       	out	0x3d, r28	; 61
    5cde:	9e 83       	std	Y+6, r25	; 0x06
    5ce0:	8d 83       	std	Y+5, r24	; 0x05
    5ce2:	4f 83       	std	Y+7, r20	; 0x07
    5ce4:	58 87       	std	Y+8, r21	; 0x08
    5ce6:	69 87       	std	Y+9, r22	; 0x09
    5ce8:	7a 87       	std	Y+10, r23	; 0x0a
    5cea:	2b 87       	std	Y+11, r18	; 0x0b
    5cec:	1d 87       	std	Y+13, r17	; 0x0d
    5cee:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
    5cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    5cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    5cf8:	9c 83       	std	Y+4, r25	; 0x04
    5cfa:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    5cfc:	0f b6       	in	r0, 0x3f	; 63
    5cfe:	f8 94       	cli
    5d00:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    5d02:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d04:	9d 85       	ldd	r25, Y+13	; 0x0d
    5d06:	00 97       	sbiw	r24, 0x00	; 0
    5d08:	61 f0       	breq	.+24     	; 0x5d22 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    5d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    5d0e:	81 a1       	ldd	r24, Z+33	; 0x21
    5d10:	92 a1       	ldd	r25, Z+34	; 0x22
    5d12:	a3 a1       	ldd	r26, Z+35	; 0x23
    5d14:	b4 a1       	ldd	r27, Z+36	; 0x24
    5d16:	ec 85       	ldd	r30, Y+12	; 0x0c
    5d18:	fd 85       	ldd	r31, Y+13	; 0x0d
    5d1a:	80 83       	st	Z, r24
    5d1c:	91 83       	std	Z+1, r25	; 0x01
    5d1e:	a2 83       	std	Z+2, r26	; 0x02
    5d20:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5d22:	eb 81       	ldd	r30, Y+3	; 0x03
    5d24:	fc 81       	ldd	r31, Y+4	; 0x04
    5d26:	85 a1       	ldd	r24, Z+37	; 0x25
    5d28:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5d2a:	eb 81       	ldd	r30, Y+3	; 0x03
    5d2c:	fc 81       	ldd	r31, Y+4	; 0x04
    5d2e:	82 e0       	ldi	r24, 0x02	; 2
    5d30:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    5d32:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d34:	28 2f       	mov	r18, r24
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	3f 87       	std	Y+15, r19	; 0x0f
    5d3a:	2e 87       	std	Y+14, r18	; 0x0e
    5d3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d40:	82 30       	cpi	r24, 0x02	; 2
    5d42:	91 05       	cpc	r25, r1
    5d44:	59 f1       	breq	.+86     	; 0x5d9c <xTaskGenericNotify+0xd6>
    5d46:	2e 85       	ldd	r18, Y+14	; 0x0e
    5d48:	3f 85       	ldd	r19, Y+15	; 0x0f
    5d4a:	23 30       	cpi	r18, 0x03	; 3
    5d4c:	31 05       	cpc	r19, r1
    5d4e:	34 f4       	brge	.+12     	; 0x5d5c <xTaskGenericNotify+0x96>
    5d50:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d52:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d54:	81 30       	cpi	r24, 0x01	; 1
    5d56:	91 05       	cpc	r25, r1
    5d58:	61 f0       	breq	.+24     	; 0x5d72 <xTaskGenericNotify+0xac>
    5d5a:	4a c0       	rjmp	.+148    	; 0x5df0 <xTaskGenericNotify+0x12a>
    5d5c:	2e 85       	ldd	r18, Y+14	; 0x0e
    5d5e:	3f 85       	ldd	r19, Y+15	; 0x0f
    5d60:	23 30       	cpi	r18, 0x03	; 3
    5d62:	31 05       	cpc	r19, r1
    5d64:	59 f1       	breq	.+86     	; 0x5dbc <xTaskGenericNotify+0xf6>
    5d66:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d68:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d6a:	84 30       	cpi	r24, 0x04	; 4
    5d6c:	91 05       	cpc	r25, r1
    5d6e:	89 f1       	breq	.+98     	; 0x5dd2 <xTaskGenericNotify+0x10c>
    5d70:	3f c0       	rjmp	.+126    	; 0x5df0 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5d72:	eb 81       	ldd	r30, Y+3	; 0x03
    5d74:	fc 81       	ldd	r31, Y+4	; 0x04
    5d76:	21 a1       	ldd	r18, Z+33	; 0x21
    5d78:	32 a1       	ldd	r19, Z+34	; 0x22
    5d7a:	43 a1       	ldd	r20, Z+35	; 0x23
    5d7c:	54 a1       	ldd	r21, Z+36	; 0x24
    5d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    5d80:	98 85       	ldd	r25, Y+8	; 0x08
    5d82:	a9 85       	ldd	r26, Y+9	; 0x09
    5d84:	ba 85       	ldd	r27, Y+10	; 0x0a
    5d86:	82 2b       	or	r24, r18
    5d88:	93 2b       	or	r25, r19
    5d8a:	a4 2b       	or	r26, r20
    5d8c:	b5 2b       	or	r27, r21
    5d8e:	eb 81       	ldd	r30, Y+3	; 0x03
    5d90:	fc 81       	ldd	r31, Y+4	; 0x04
    5d92:	81 a3       	std	Z+33, r24	; 0x21
    5d94:	92 a3       	std	Z+34, r25	; 0x22
    5d96:	a3 a3       	std	Z+35, r26	; 0x23
    5d98:	b4 a3       	std	Z+36, r27	; 0x24
    5d9a:	2a c0       	rjmp	.+84     	; 0x5df0 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    5d9c:	eb 81       	ldd	r30, Y+3	; 0x03
    5d9e:	fc 81       	ldd	r31, Y+4	; 0x04
    5da0:	81 a1       	ldd	r24, Z+33	; 0x21
    5da2:	92 a1       	ldd	r25, Z+34	; 0x22
    5da4:	a3 a1       	ldd	r26, Z+35	; 0x23
    5da6:	b4 a1       	ldd	r27, Z+36	; 0x24
    5da8:	01 96       	adiw	r24, 0x01	; 1
    5daa:	a1 1d       	adc	r26, r1
    5dac:	b1 1d       	adc	r27, r1
    5dae:	eb 81       	ldd	r30, Y+3	; 0x03
    5db0:	fc 81       	ldd	r31, Y+4	; 0x04
    5db2:	81 a3       	std	Z+33, r24	; 0x21
    5db4:	92 a3       	std	Z+34, r25	; 0x22
    5db6:	a3 a3       	std	Z+35, r26	; 0x23
    5db8:	b4 a3       	std	Z+36, r27	; 0x24
    5dba:	1a c0       	rjmp	.+52     	; 0x5df0 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    5dbc:	eb 81       	ldd	r30, Y+3	; 0x03
    5dbe:	fc 81       	ldd	r31, Y+4	; 0x04
    5dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    5dc2:	98 85       	ldd	r25, Y+8	; 0x08
    5dc4:	a9 85       	ldd	r26, Y+9	; 0x09
    5dc6:	ba 85       	ldd	r27, Y+10	; 0x0a
    5dc8:	81 a3       	std	Z+33, r24	; 0x21
    5dca:	92 a3       	std	Z+34, r25	; 0x22
    5dcc:	a3 a3       	std	Z+35, r26	; 0x23
    5dce:	b4 a3       	std	Z+36, r27	; 0x24
    5dd0:	0f c0       	rjmp	.+30     	; 0x5df0 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    5dd2:	89 81       	ldd	r24, Y+1	; 0x01
    5dd4:	82 30       	cpi	r24, 0x02	; 2
    5dd6:	59 f0       	breq	.+22     	; 0x5dee <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    5dd8:	eb 81       	ldd	r30, Y+3	; 0x03
    5dda:	fc 81       	ldd	r31, Y+4	; 0x04
    5ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    5dde:	98 85       	ldd	r25, Y+8	; 0x08
    5de0:	a9 85       	ldd	r26, Y+9	; 0x09
    5de2:	ba 85       	ldd	r27, Y+10	; 0x0a
    5de4:	81 a3       	std	Z+33, r24	; 0x21
    5de6:	92 a3       	std	Z+34, r25	; 0x22
    5de8:	a3 a3       	std	Z+35, r26	; 0x23
    5dea:	b4 a3       	std	Z+36, r27	; 0x24
    5dec:	01 c0       	rjmp	.+2      	; 0x5df0 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    5dee:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    5df0:	89 81       	ldd	r24, Y+1	; 0x01
    5df2:	81 30       	cpi	r24, 0x01	; 1
    5df4:	b9 f5       	brne	.+110    	; 0x5e64 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5df6:	8b 81       	ldd	r24, Y+3	; 0x03
    5df8:	9c 81       	ldd	r25, Y+4	; 0x04
    5dfa:	02 96       	adiw	r24, 0x02	; 2
    5dfc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    5e00:	eb 81       	ldd	r30, Y+3	; 0x03
    5e02:	fc 81       	ldd	r31, Y+4	; 0x04
    5e04:	96 89       	ldd	r25, Z+22	; 0x16
    5e06:	80 91 6b 06 	lds	r24, 0x066B
    5e0a:	89 17       	cp	r24, r25
    5e0c:	28 f4       	brcc	.+10     	; 0x5e18 <xTaskGenericNotify+0x152>
    5e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    5e10:	fc 81       	ldd	r31, Y+4	; 0x04
    5e12:	86 89       	ldd	r24, Z+22	; 0x16
    5e14:	80 93 6b 06 	sts	0x066B, r24
    5e18:	eb 81       	ldd	r30, Y+3	; 0x03
    5e1a:	fc 81       	ldd	r31, Y+4	; 0x04
    5e1c:	86 89       	ldd	r24, Z+22	; 0x16
    5e1e:	28 2f       	mov	r18, r24
    5e20:	30 e0       	ldi	r19, 0x00	; 0
    5e22:	c9 01       	movw	r24, r18
    5e24:	88 0f       	add	r24, r24
    5e26:	99 1f       	adc	r25, r25
    5e28:	88 0f       	add	r24, r24
    5e2a:	99 1f       	adc	r25, r25
    5e2c:	88 0f       	add	r24, r24
    5e2e:	99 1f       	adc	r25, r25
    5e30:	82 0f       	add	r24, r18
    5e32:	93 1f       	adc	r25, r19
    5e34:	ac 01       	movw	r20, r24
    5e36:	4a 58       	subi	r20, 0x8A	; 138
    5e38:	59 4f       	sbci	r21, 0xF9	; 249
    5e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    5e3e:	9c 01       	movw	r18, r24
    5e40:	2e 5f       	subi	r18, 0xFE	; 254
    5e42:	3f 4f       	sbci	r19, 0xFF	; 255
    5e44:	ca 01       	movw	r24, r20
    5e46:	b9 01       	movw	r22, r18
    5e48:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    5e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    5e50:	96 89       	ldd	r25, Z+22	; 0x16
    5e52:	e0 91 65 06 	lds	r30, 0x0665
    5e56:	f0 91 66 06 	lds	r31, 0x0666
    5e5a:	86 89       	ldd	r24, Z+22	; 0x16
    5e5c:	89 17       	cp	r24, r25
    5e5e:	10 f4       	brcc	.+4      	; 0x5e64 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    5e60:	0e 94 90 14 	call	0x2920	; 0x2920 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    5e64:	0f 90       	pop	r0
    5e66:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5e68:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    5e6a:	2f 96       	adiw	r28, 0x0f	; 15
    5e6c:	0f b6       	in	r0, 0x3f	; 63
    5e6e:	f8 94       	cli
    5e70:	de bf       	out	0x3e, r29	; 62
    5e72:	0f be       	out	0x3f, r0	; 63
    5e74:	cd bf       	out	0x3d, r28	; 61
    5e76:	cf 91       	pop	r28
    5e78:	df 91       	pop	r29
    5e7a:	1f 91       	pop	r17
    5e7c:	0f 91       	pop	r16
    5e7e:	08 95       	ret

00005e80 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    5e80:	ef 92       	push	r14
    5e82:	ff 92       	push	r15
    5e84:	0f 93       	push	r16
    5e86:	1f 93       	push	r17
    5e88:	df 93       	push	r29
    5e8a:	cf 93       	push	r28
    5e8c:	cd b7       	in	r28, 0x3d	; 61
    5e8e:	de b7       	in	r29, 0x3e	; 62
    5e90:	62 97       	sbiw	r28, 0x12	; 18
    5e92:	0f b6       	in	r0, 0x3f	; 63
    5e94:	f8 94       	cli
    5e96:	de bf       	out	0x3e, r29	; 62
    5e98:	0f be       	out	0x3f, r0	; 63
    5e9a:	cd bf       	out	0x3d, r28	; 61
    5e9c:	9f 83       	std	Y+7, r25	; 0x07
    5e9e:	8e 83       	std	Y+6, r24	; 0x06
    5ea0:	48 87       	std	Y+8, r20	; 0x08
    5ea2:	59 87       	std	Y+9, r21	; 0x09
    5ea4:	6a 87       	std	Y+10, r22	; 0x0a
    5ea6:	7b 87       	std	Y+11, r23	; 0x0b
    5ea8:	2c 87       	std	Y+12, r18	; 0x0c
    5eaa:	1e 87       	std	Y+14, r17	; 0x0e
    5eac:	0d 87       	std	Y+13, r16	; 0x0d
    5eae:	f8 8a       	std	Y+16, r15	; 0x10
    5eb0:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    5eb2:	81 e0       	ldi	r24, 0x01	; 1
    5eb4:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    5eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    5eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    5eba:	9d 83       	std	Y+5, r25	; 0x05
    5ebc:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5ebe:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    5ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ec4:	00 97       	sbiw	r24, 0x00	; 0
    5ec6:	61 f0       	breq	.+24     	; 0x5ee0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5ec8:	ec 81       	ldd	r30, Y+4	; 0x04
    5eca:	fd 81       	ldd	r31, Y+5	; 0x05
    5ecc:	81 a1       	ldd	r24, Z+33	; 0x21
    5ece:	92 a1       	ldd	r25, Z+34	; 0x22
    5ed0:	a3 a1       	ldd	r26, Z+35	; 0x23
    5ed2:	b4 a1       	ldd	r27, Z+36	; 0x24
    5ed4:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ed6:	fe 85       	ldd	r31, Y+14	; 0x0e
    5ed8:	80 83       	st	Z, r24
    5eda:	91 83       	std	Z+1, r25	; 0x01
    5edc:	a2 83       	std	Z+2, r26	; 0x02
    5ede:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5ee0:	ec 81       	ldd	r30, Y+4	; 0x04
    5ee2:	fd 81       	ldd	r31, Y+5	; 0x05
    5ee4:	85 a1       	ldd	r24, Z+37	; 0x25
    5ee6:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5ee8:	ec 81       	ldd	r30, Y+4	; 0x04
    5eea:	fd 81       	ldd	r31, Y+5	; 0x05
    5eec:	82 e0       	ldi	r24, 0x02	; 2
    5eee:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    5ef0:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ef2:	28 2f       	mov	r18, r24
    5ef4:	30 e0       	ldi	r19, 0x00	; 0
    5ef6:	3a 8b       	std	Y+18, r19	; 0x12
    5ef8:	29 8b       	std	Y+17, r18	; 0x11
    5efa:	89 89       	ldd	r24, Y+17	; 0x11
    5efc:	9a 89       	ldd	r25, Y+18	; 0x12
    5efe:	82 30       	cpi	r24, 0x02	; 2
    5f00:	91 05       	cpc	r25, r1
    5f02:	59 f1       	breq	.+86     	; 0x5f5a <xTaskGenericNotifyFromISR+0xda>
    5f04:	29 89       	ldd	r18, Y+17	; 0x11
    5f06:	3a 89       	ldd	r19, Y+18	; 0x12
    5f08:	23 30       	cpi	r18, 0x03	; 3
    5f0a:	31 05       	cpc	r19, r1
    5f0c:	34 f4       	brge	.+12     	; 0x5f1a <xTaskGenericNotifyFromISR+0x9a>
    5f0e:	89 89       	ldd	r24, Y+17	; 0x11
    5f10:	9a 89       	ldd	r25, Y+18	; 0x12
    5f12:	81 30       	cpi	r24, 0x01	; 1
    5f14:	91 05       	cpc	r25, r1
    5f16:	61 f0       	breq	.+24     	; 0x5f30 <xTaskGenericNotifyFromISR+0xb0>
    5f18:	4a c0       	rjmp	.+148    	; 0x5fae <xTaskGenericNotifyFromISR+0x12e>
    5f1a:	29 89       	ldd	r18, Y+17	; 0x11
    5f1c:	3a 89       	ldd	r19, Y+18	; 0x12
    5f1e:	23 30       	cpi	r18, 0x03	; 3
    5f20:	31 05       	cpc	r19, r1
    5f22:	59 f1       	breq	.+86     	; 0x5f7a <xTaskGenericNotifyFromISR+0xfa>
    5f24:	89 89       	ldd	r24, Y+17	; 0x11
    5f26:	9a 89       	ldd	r25, Y+18	; 0x12
    5f28:	84 30       	cpi	r24, 0x04	; 4
    5f2a:	91 05       	cpc	r25, r1
    5f2c:	89 f1       	breq	.+98     	; 0x5f90 <xTaskGenericNotifyFromISR+0x110>
    5f2e:	3f c0       	rjmp	.+126    	; 0x5fae <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5f30:	ec 81       	ldd	r30, Y+4	; 0x04
    5f32:	fd 81       	ldd	r31, Y+5	; 0x05
    5f34:	21 a1       	ldd	r18, Z+33	; 0x21
    5f36:	32 a1       	ldd	r19, Z+34	; 0x22
    5f38:	43 a1       	ldd	r20, Z+35	; 0x23
    5f3a:	54 a1       	ldd	r21, Z+36	; 0x24
    5f3c:	88 85       	ldd	r24, Y+8	; 0x08
    5f3e:	99 85       	ldd	r25, Y+9	; 0x09
    5f40:	aa 85       	ldd	r26, Y+10	; 0x0a
    5f42:	bb 85       	ldd	r27, Y+11	; 0x0b
    5f44:	82 2b       	or	r24, r18
    5f46:	93 2b       	or	r25, r19
    5f48:	a4 2b       	or	r26, r20
    5f4a:	b5 2b       	or	r27, r21
    5f4c:	ec 81       	ldd	r30, Y+4	; 0x04
    5f4e:	fd 81       	ldd	r31, Y+5	; 0x05
    5f50:	81 a3       	std	Z+33, r24	; 0x21
    5f52:	92 a3       	std	Z+34, r25	; 0x22
    5f54:	a3 a3       	std	Z+35, r26	; 0x23
    5f56:	b4 a3       	std	Z+36, r27	; 0x24
    5f58:	2a c0       	rjmp	.+84     	; 0x5fae <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    5f5a:	ec 81       	ldd	r30, Y+4	; 0x04
    5f5c:	fd 81       	ldd	r31, Y+5	; 0x05
    5f5e:	81 a1       	ldd	r24, Z+33	; 0x21
    5f60:	92 a1       	ldd	r25, Z+34	; 0x22
    5f62:	a3 a1       	ldd	r26, Z+35	; 0x23
    5f64:	b4 a1       	ldd	r27, Z+36	; 0x24
    5f66:	01 96       	adiw	r24, 0x01	; 1
    5f68:	a1 1d       	adc	r26, r1
    5f6a:	b1 1d       	adc	r27, r1
    5f6c:	ec 81       	ldd	r30, Y+4	; 0x04
    5f6e:	fd 81       	ldd	r31, Y+5	; 0x05
    5f70:	81 a3       	std	Z+33, r24	; 0x21
    5f72:	92 a3       	std	Z+34, r25	; 0x22
    5f74:	a3 a3       	std	Z+35, r26	; 0x23
    5f76:	b4 a3       	std	Z+36, r27	; 0x24
    5f78:	1a c0       	rjmp	.+52     	; 0x5fae <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    5f7a:	ec 81       	ldd	r30, Y+4	; 0x04
    5f7c:	fd 81       	ldd	r31, Y+5	; 0x05
    5f7e:	88 85       	ldd	r24, Y+8	; 0x08
    5f80:	99 85       	ldd	r25, Y+9	; 0x09
    5f82:	aa 85       	ldd	r26, Y+10	; 0x0a
    5f84:	bb 85       	ldd	r27, Y+11	; 0x0b
    5f86:	81 a3       	std	Z+33, r24	; 0x21
    5f88:	92 a3       	std	Z+34, r25	; 0x22
    5f8a:	a3 a3       	std	Z+35, r26	; 0x23
    5f8c:	b4 a3       	std	Z+36, r27	; 0x24
    5f8e:	0f c0       	rjmp	.+30     	; 0x5fae <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    5f90:	8b 81       	ldd	r24, Y+3	; 0x03
    5f92:	82 30       	cpi	r24, 0x02	; 2
    5f94:	59 f0       	breq	.+22     	; 0x5fac <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    5f96:	ec 81       	ldd	r30, Y+4	; 0x04
    5f98:	fd 81       	ldd	r31, Y+5	; 0x05
    5f9a:	88 85       	ldd	r24, Y+8	; 0x08
    5f9c:	99 85       	ldd	r25, Y+9	; 0x09
    5f9e:	aa 85       	ldd	r26, Y+10	; 0x0a
    5fa0:	bb 85       	ldd	r27, Y+11	; 0x0b
    5fa2:	81 a3       	std	Z+33, r24	; 0x21
    5fa4:	92 a3       	std	Z+34, r25	; 0x22
    5fa6:	a3 a3       	std	Z+35, r26	; 0x23
    5fa8:	b4 a3       	std	Z+36, r27	; 0x24
    5faa:	01 c0       	rjmp	.+2      	; 0x5fae <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    5fac:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    5fae:	8b 81       	ldd	r24, Y+3	; 0x03
    5fb0:	81 30       	cpi	r24, 0x01	; 1
    5fb2:	09 f0       	breq	.+2      	; 0x5fb6 <xTaskGenericNotifyFromISR+0x136>
    5fb4:	4f c0       	rjmp	.+158    	; 0x6054 <xTaskGenericNotifyFromISR+0x1d4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5fb6:	80 91 75 06 	lds	r24, 0x0675
    5fba:	88 23       	and	r24, r24
    5fbc:	61 f5       	brne	.+88     	; 0x6016 <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    5fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    5fc2:	02 96       	adiw	r24, 0x02	; 2
    5fc4:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5fc8:	ec 81       	ldd	r30, Y+4	; 0x04
    5fca:	fd 81       	ldd	r31, Y+5	; 0x05
    5fcc:	96 89       	ldd	r25, Z+22	; 0x16
    5fce:	80 91 6b 06 	lds	r24, 0x066B
    5fd2:	89 17       	cp	r24, r25
    5fd4:	28 f4       	brcc	.+10     	; 0x5fe0 <xTaskGenericNotifyFromISR+0x160>
    5fd6:	ec 81       	ldd	r30, Y+4	; 0x04
    5fd8:	fd 81       	ldd	r31, Y+5	; 0x05
    5fda:	86 89       	ldd	r24, Z+22	; 0x16
    5fdc:	80 93 6b 06 	sts	0x066B, r24
    5fe0:	ec 81       	ldd	r30, Y+4	; 0x04
    5fe2:	fd 81       	ldd	r31, Y+5	; 0x05
    5fe4:	86 89       	ldd	r24, Z+22	; 0x16
    5fe6:	28 2f       	mov	r18, r24
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	c9 01       	movw	r24, r18
    5fec:	88 0f       	add	r24, r24
    5fee:	99 1f       	adc	r25, r25
    5ff0:	88 0f       	add	r24, r24
    5ff2:	99 1f       	adc	r25, r25
    5ff4:	88 0f       	add	r24, r24
    5ff6:	99 1f       	adc	r25, r25
    5ff8:	82 0f       	add	r24, r18
    5ffa:	93 1f       	adc	r25, r19
    5ffc:	ac 01       	movw	r20, r24
    5ffe:	4a 58       	subi	r20, 0x8A	; 138
    6000:	59 4f       	sbci	r21, 0xF9	; 249
    6002:	8c 81       	ldd	r24, Y+4	; 0x04
    6004:	9d 81       	ldd	r25, Y+5	; 0x05
    6006:	9c 01       	movw	r18, r24
    6008:	2e 5f       	subi	r18, 0xFE	; 254
    600a:	3f 4f       	sbci	r19, 0xFF	; 255
    600c:	ca 01       	movw	r24, r20
    600e:	b9 01       	movw	r22, r18
    6010:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
    6014:	0a c0       	rjmp	.+20     	; 0x602a <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    6016:	8c 81       	ldd	r24, Y+4	; 0x04
    6018:	9d 81       	ldd	r25, Y+5	; 0x05
    601a:	9c 01       	movw	r18, r24
    601c:	24 5f       	subi	r18, 0xF4	; 244
    601e:	3f 4f       	sbci	r19, 0xFF	; 255
    6020:	80 eb       	ldi	r24, 0xB0	; 176
    6022:	96 e0       	ldi	r25, 0x06	; 6
    6024:	b9 01       	movw	r22, r18
    6026:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    602a:	ec 81       	ldd	r30, Y+4	; 0x04
    602c:	fd 81       	ldd	r31, Y+5	; 0x05
    602e:	96 89       	ldd	r25, Z+22	; 0x16
    6030:	e0 91 65 06 	lds	r30, 0x0665
    6034:	f0 91 66 06 	lds	r31, 0x0666
    6038:	86 89       	ldd	r24, Z+22	; 0x16
    603a:	89 17       	cp	r24, r25
    603c:	58 f4       	brcc	.+22     	; 0x6054 <xTaskGenericNotifyFromISR+0x1d4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    603e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6040:	98 89       	ldd	r25, Y+16	; 0x10
    6042:	00 97       	sbiw	r24, 0x00	; 0
    6044:	21 f0       	breq	.+8      	; 0x604e <xTaskGenericNotifyFromISR+0x1ce>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    6046:	ef 85       	ldd	r30, Y+15	; 0x0f
    6048:	f8 89       	ldd	r31, Y+16	; 0x10
    604a:	81 e0       	ldi	r24, 0x01	; 1
    604c:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    604e:	81 e0       	ldi	r24, 0x01	; 1
    6050:	80 93 6e 06 	sts	0x066E, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    6054:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    6056:	62 96       	adiw	r28, 0x12	; 18
    6058:	0f b6       	in	r0, 0x3f	; 63
    605a:	f8 94       	cli
    605c:	de bf       	out	0x3e, r29	; 62
    605e:	0f be       	out	0x3f, r0	; 63
    6060:	cd bf       	out	0x3d, r28	; 61
    6062:	cf 91       	pop	r28
    6064:	df 91       	pop	r29
    6066:	1f 91       	pop	r17
    6068:	0f 91       	pop	r16
    606a:	ff 90       	pop	r15
    606c:	ef 90       	pop	r14
    606e:	08 95       	ret

00006070 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    6070:	df 93       	push	r29
    6072:	cf 93       	push	r28
    6074:	cd b7       	in	r28, 0x3d	; 61
    6076:	de b7       	in	r29, 0x3e	; 62
    6078:	28 97       	sbiw	r28, 0x08	; 8
    607a:	0f b6       	in	r0, 0x3f	; 63
    607c:	f8 94       	cli
    607e:	de bf       	out	0x3e, r29	; 62
    6080:	0f be       	out	0x3f, r0	; 63
    6082:	cd bf       	out	0x3d, r28	; 61
    6084:	9e 83       	std	Y+6, r25	; 0x06
    6086:	8d 83       	std	Y+5, r24	; 0x05
    6088:	78 87       	std	Y+8, r23	; 0x08
    608a:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    608c:	8d 81       	ldd	r24, Y+5	; 0x05
    608e:	9e 81       	ldd	r25, Y+6	; 0x06
    6090:	9c 83       	std	Y+4, r25	; 0x04
    6092:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6094:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    6096:	eb 81       	ldd	r30, Y+3	; 0x03
    6098:	fc 81       	ldd	r31, Y+4	; 0x04
    609a:	85 a1       	ldd	r24, Z+37	; 0x25
    609c:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    609e:	eb 81       	ldd	r30, Y+3	; 0x03
    60a0:	fc 81       	ldd	r31, Y+4	; 0x04
    60a2:	82 e0       	ldi	r24, 0x02	; 2
    60a4:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    60a6:	eb 81       	ldd	r30, Y+3	; 0x03
    60a8:	fc 81       	ldd	r31, Y+4	; 0x04
    60aa:	81 a1       	ldd	r24, Z+33	; 0x21
    60ac:	92 a1       	ldd	r25, Z+34	; 0x22
    60ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    60b0:	b4 a1       	ldd	r27, Z+36	; 0x24
    60b2:	01 96       	adiw	r24, 0x01	; 1
    60b4:	a1 1d       	adc	r26, r1
    60b6:	b1 1d       	adc	r27, r1
    60b8:	eb 81       	ldd	r30, Y+3	; 0x03
    60ba:	fc 81       	ldd	r31, Y+4	; 0x04
    60bc:	81 a3       	std	Z+33, r24	; 0x21
    60be:	92 a3       	std	Z+34, r25	; 0x22
    60c0:	a3 a3       	std	Z+35, r26	; 0x23
    60c2:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    60c4:	8a 81       	ldd	r24, Y+2	; 0x02
    60c6:	81 30       	cpi	r24, 0x01	; 1
    60c8:	09 f0       	breq	.+2      	; 0x60cc <vTaskNotifyGiveFromISR+0x5c>
    60ca:	4f c0       	rjmp	.+158    	; 0x616a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    60cc:	80 91 75 06 	lds	r24, 0x0675
    60d0:	88 23       	and	r24, r24
    60d2:	61 f5       	brne	.+88     	; 0x612c <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    60d4:	8b 81       	ldd	r24, Y+3	; 0x03
    60d6:	9c 81       	ldd	r25, Y+4	; 0x04
    60d8:	02 96       	adiw	r24, 0x02	; 2
    60da:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    60de:	eb 81       	ldd	r30, Y+3	; 0x03
    60e0:	fc 81       	ldd	r31, Y+4	; 0x04
    60e2:	96 89       	ldd	r25, Z+22	; 0x16
    60e4:	80 91 6b 06 	lds	r24, 0x066B
    60e8:	89 17       	cp	r24, r25
    60ea:	28 f4       	brcc	.+10     	; 0x60f6 <vTaskNotifyGiveFromISR+0x86>
    60ec:	eb 81       	ldd	r30, Y+3	; 0x03
    60ee:	fc 81       	ldd	r31, Y+4	; 0x04
    60f0:	86 89       	ldd	r24, Z+22	; 0x16
    60f2:	80 93 6b 06 	sts	0x066B, r24
    60f6:	eb 81       	ldd	r30, Y+3	; 0x03
    60f8:	fc 81       	ldd	r31, Y+4	; 0x04
    60fa:	86 89       	ldd	r24, Z+22	; 0x16
    60fc:	28 2f       	mov	r18, r24
    60fe:	30 e0       	ldi	r19, 0x00	; 0
    6100:	c9 01       	movw	r24, r18
    6102:	88 0f       	add	r24, r24
    6104:	99 1f       	adc	r25, r25
    6106:	88 0f       	add	r24, r24
    6108:	99 1f       	adc	r25, r25
    610a:	88 0f       	add	r24, r24
    610c:	99 1f       	adc	r25, r25
    610e:	82 0f       	add	r24, r18
    6110:	93 1f       	adc	r25, r19
    6112:	ac 01       	movw	r20, r24
    6114:	4a 58       	subi	r20, 0x8A	; 138
    6116:	59 4f       	sbci	r21, 0xF9	; 249
    6118:	8b 81       	ldd	r24, Y+3	; 0x03
    611a:	9c 81       	ldd	r25, Y+4	; 0x04
    611c:	9c 01       	movw	r18, r24
    611e:	2e 5f       	subi	r18, 0xFE	; 254
    6120:	3f 4f       	sbci	r19, 0xFF	; 255
    6122:	ca 01       	movw	r24, r20
    6124:	b9 01       	movw	r22, r18
    6126:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
    612a:	0a c0       	rjmp	.+20     	; 0x6140 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    612c:	8b 81       	ldd	r24, Y+3	; 0x03
    612e:	9c 81       	ldd	r25, Y+4	; 0x04
    6130:	9c 01       	movw	r18, r24
    6132:	24 5f       	subi	r18, 0xF4	; 244
    6134:	3f 4f       	sbci	r19, 0xFF	; 255
    6136:	80 eb       	ldi	r24, 0xB0	; 176
    6138:	96 e0       	ldi	r25, 0x06	; 6
    613a:	b9 01       	movw	r22, r18
    613c:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    6140:	eb 81       	ldd	r30, Y+3	; 0x03
    6142:	fc 81       	ldd	r31, Y+4	; 0x04
    6144:	96 89       	ldd	r25, Z+22	; 0x16
    6146:	e0 91 65 06 	lds	r30, 0x0665
    614a:	f0 91 66 06 	lds	r31, 0x0666
    614e:	86 89       	ldd	r24, Z+22	; 0x16
    6150:	89 17       	cp	r24, r25
    6152:	58 f4       	brcc	.+22     	; 0x616a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    6154:	8f 81       	ldd	r24, Y+7	; 0x07
    6156:	98 85       	ldd	r25, Y+8	; 0x08
    6158:	00 97       	sbiw	r24, 0x00	; 0
    615a:	21 f0       	breq	.+8      	; 0x6164 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    615c:	ef 81       	ldd	r30, Y+7	; 0x07
    615e:	f8 85       	ldd	r31, Y+8	; 0x08
    6160:	81 e0       	ldi	r24, 0x01	; 1
    6162:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    6164:	81 e0       	ldi	r24, 0x01	; 1
    6166:	80 93 6e 06 	sts	0x066E, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    616a:	28 96       	adiw	r28, 0x08	; 8
    616c:	0f b6       	in	r0, 0x3f	; 63
    616e:	f8 94       	cli
    6170:	de bf       	out	0x3e, r29	; 62
    6172:	0f be       	out	0x3f, r0	; 63
    6174:	cd bf       	out	0x3d, r28	; 61
    6176:	cf 91       	pop	r28
    6178:	df 91       	pop	r29
    617a:	08 95       	ret

0000617c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    617c:	df 93       	push	r29
    617e:	cf 93       	push	r28
    6180:	cd b7       	in	r28, 0x3d	; 61
    6182:	de b7       	in	r29, 0x3e	; 62
    6184:	27 97       	sbiw	r28, 0x07	; 7
    6186:	0f b6       	in	r0, 0x3f	; 63
    6188:	f8 94       	cli
    618a:	de bf       	out	0x3e, r29	; 62
    618c:	0f be       	out	0x3f, r0	; 63
    618e:	cd bf       	out	0x3d, r28	; 61
    6190:	9d 83       	std	Y+5, r25	; 0x05
    6192:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    6194:	8c 81       	ldd	r24, Y+4	; 0x04
    6196:	9d 81       	ldd	r25, Y+5	; 0x05
    6198:	00 97       	sbiw	r24, 0x00	; 0
    619a:	39 f4       	brne	.+14     	; 0x61aa <xTaskNotifyStateClear+0x2e>
    619c:	80 91 65 06 	lds	r24, 0x0665
    61a0:	90 91 66 06 	lds	r25, 0x0666
    61a4:	9f 83       	std	Y+7, r25	; 0x07
    61a6:	8e 83       	std	Y+6, r24	; 0x06
    61a8:	04 c0       	rjmp	.+8      	; 0x61b2 <xTaskNotifyStateClear+0x36>
    61aa:	8c 81       	ldd	r24, Y+4	; 0x04
    61ac:	9d 81       	ldd	r25, Y+5	; 0x05
    61ae:	9f 83       	std	Y+7, r25	; 0x07
    61b0:	8e 83       	std	Y+6, r24	; 0x06
    61b2:	8e 81       	ldd	r24, Y+6	; 0x06
    61b4:	9f 81       	ldd	r25, Y+7	; 0x07
    61b6:	9b 83       	std	Y+3, r25	; 0x03
    61b8:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    61ba:	0f b6       	in	r0, 0x3f	; 63
    61bc:	f8 94       	cli
    61be:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    61c0:	ea 81       	ldd	r30, Y+2	; 0x02
    61c2:	fb 81       	ldd	r31, Y+3	; 0x03
    61c4:	85 a1       	ldd	r24, Z+37	; 0x25
    61c6:	82 30       	cpi	r24, 0x02	; 2
    61c8:	31 f4       	brne	.+12     	; 0x61d6 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    61ca:	ea 81       	ldd	r30, Y+2	; 0x02
    61cc:	fb 81       	ldd	r31, Y+3	; 0x03
    61ce:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    61d0:	81 e0       	ldi	r24, 0x01	; 1
    61d2:	89 83       	std	Y+1, r24	; 0x01
    61d4:	01 c0       	rjmp	.+2      	; 0x61d8 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    61d6:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    61d8:	0f 90       	pop	r0
    61da:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    61dc:	89 81       	ldd	r24, Y+1	; 0x01
	}
    61de:	27 96       	adiw	r28, 0x07	; 7
    61e0:	0f b6       	in	r0, 0x3f	; 63
    61e2:	f8 94       	cli
    61e4:	de bf       	out	0x3e, r29	; 62
    61e6:	0f be       	out	0x3f, r0	; 63
    61e8:	cd bf       	out	0x3d, r28	; 61
    61ea:	cf 91       	pop	r28
    61ec:	df 91       	pop	r29
    61ee:	08 95       	ret

000061f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    61f0:	df 93       	push	r29
    61f2:	cf 93       	push	r28
    61f4:	cd b7       	in	r28, 0x3d	; 61
    61f6:	de b7       	in	r29, 0x3e	; 62
    61f8:	27 97       	sbiw	r28, 0x07	; 7
    61fa:	0f b6       	in	r0, 0x3f	; 63
    61fc:	f8 94       	cli
    61fe:	de bf       	out	0x3e, r29	; 62
    6200:	0f be       	out	0x3f, r0	; 63
    6202:	cd bf       	out	0x3d, r28	; 61
    6204:	9e 83       	std	Y+6, r25	; 0x06
    6206:	8d 83       	std	Y+5, r24	; 0x05
    6208:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    620a:	80 91 69 06 	lds	r24, 0x0669
    620e:	90 91 6a 06 	lds	r25, 0x066A
    6212:	9a 83       	std	Y+2, r25	; 0x02
    6214:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    6216:	80 91 65 06 	lds	r24, 0x0665
    621a:	90 91 66 06 	lds	r25, 0x0666
    621e:	02 96       	adiw	r24, 0x02	; 2
    6220:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    6224:	8d 81       	ldd	r24, Y+5	; 0x05
    6226:	9e 81       	ldd	r25, Y+6	; 0x06
    6228:	2f ef       	ldi	r18, 0xFF	; 255
    622a:	8f 3f       	cpi	r24, 0xFF	; 255
    622c:	92 07       	cpc	r25, r18
    622e:	81 f4       	brne	.+32     	; 0x6250 <prvAddCurrentTaskToDelayedList+0x60>
    6230:	8f 81       	ldd	r24, Y+7	; 0x07
    6232:	88 23       	and	r24, r24
    6234:	69 f0       	breq	.+26     	; 0x6250 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    6236:	80 91 65 06 	lds	r24, 0x0665
    623a:	90 91 66 06 	lds	r25, 0x0666
    623e:	9c 01       	movw	r18, r24
    6240:	2e 5f       	subi	r18, 0xFE	; 254
    6242:	3f 4f       	sbci	r19, 0xFF	; 255
    6244:	82 ec       	ldi	r24, 0xC2	; 194
    6246:	96 e0       	ldi	r25, 0x06	; 6
    6248:	b9 01       	movw	r22, r18
    624a:	0e 94 23 11 	call	0x2246	; 0x2246 <vListInsertEnd>
    624e:	43 c0       	rjmp	.+134    	; 0x62d6 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    6250:	29 81       	ldd	r18, Y+1	; 0x01
    6252:	3a 81       	ldd	r19, Y+2	; 0x02
    6254:	8d 81       	ldd	r24, Y+5	; 0x05
    6256:	9e 81       	ldd	r25, Y+6	; 0x06
    6258:	82 0f       	add	r24, r18
    625a:	93 1f       	adc	r25, r19
    625c:	9c 83       	std	Y+4, r25	; 0x04
    625e:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    6260:	e0 91 65 06 	lds	r30, 0x0665
    6264:	f0 91 66 06 	lds	r31, 0x0666
    6268:	8b 81       	ldd	r24, Y+3	; 0x03
    626a:	9c 81       	ldd	r25, Y+4	; 0x04
    626c:	93 83       	std	Z+3, r25	; 0x03
    626e:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    6270:	2b 81       	ldd	r18, Y+3	; 0x03
    6272:	3c 81       	ldd	r19, Y+4	; 0x04
    6274:	89 81       	ldd	r24, Y+1	; 0x01
    6276:	9a 81       	ldd	r25, Y+2	; 0x02
    6278:	28 17       	cp	r18, r24
    627a:	39 07       	cpc	r19, r25
    627c:	70 f4       	brcc	.+28     	; 0x629a <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    627e:	80 91 ae 06 	lds	r24, 0x06AE
    6282:	90 91 af 06 	lds	r25, 0x06AF
    6286:	20 91 65 06 	lds	r18, 0x0665
    628a:	30 91 66 06 	lds	r19, 0x0666
    628e:	2e 5f       	subi	r18, 0xFE	; 254
    6290:	3f 4f       	sbci	r19, 0xFF	; 255
    6292:	b9 01       	movw	r22, r18
    6294:	0e 94 67 11 	call	0x22ce	; 0x22ce <vListInsert>
    6298:	1e c0       	rjmp	.+60     	; 0x62d6 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    629a:	40 91 ac 06 	lds	r20, 0x06AC
    629e:	50 91 ad 06 	lds	r21, 0x06AD
    62a2:	80 91 65 06 	lds	r24, 0x0665
    62a6:	90 91 66 06 	lds	r25, 0x0666
    62aa:	9c 01       	movw	r18, r24
    62ac:	2e 5f       	subi	r18, 0xFE	; 254
    62ae:	3f 4f       	sbci	r19, 0xFF	; 255
    62b0:	ca 01       	movw	r24, r20
    62b2:	b9 01       	movw	r22, r18
    62b4:	0e 94 67 11 	call	0x22ce	; 0x22ce <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    62b8:	20 91 71 06 	lds	r18, 0x0671
    62bc:	30 91 72 06 	lds	r19, 0x0672
    62c0:	8b 81       	ldd	r24, Y+3	; 0x03
    62c2:	9c 81       	ldd	r25, Y+4	; 0x04
    62c4:	82 17       	cp	r24, r18
    62c6:	93 07       	cpc	r25, r19
    62c8:	30 f4       	brcc	.+12     	; 0x62d6 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    62ca:	8b 81       	ldd	r24, Y+3	; 0x03
    62cc:	9c 81       	ldd	r25, Y+4	; 0x04
    62ce:	90 93 72 06 	sts	0x0672, r25
    62d2:	80 93 71 06 	sts	0x0671, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    62d6:	27 96       	adiw	r28, 0x07	; 7
    62d8:	0f b6       	in	r0, 0x3f	; 63
    62da:	f8 94       	cli
    62dc:	de bf       	out	0x3e, r29	; 62
    62de:	0f be       	out	0x3f, r0	; 63
    62e0:	cd bf       	out	0x3d, r28	; 61
    62e2:	cf 91       	pop	r28
    62e4:	df 91       	pop	r29
    62e6:	08 95       	ret

000062e8 <__prologue_saves__>:
    62e8:	2f 92       	push	r2
    62ea:	3f 92       	push	r3
    62ec:	4f 92       	push	r4
    62ee:	5f 92       	push	r5
    62f0:	6f 92       	push	r6
    62f2:	7f 92       	push	r7
    62f4:	8f 92       	push	r8
    62f6:	9f 92       	push	r9
    62f8:	af 92       	push	r10
    62fa:	bf 92       	push	r11
    62fc:	cf 92       	push	r12
    62fe:	df 92       	push	r13
    6300:	ef 92       	push	r14
    6302:	ff 92       	push	r15
    6304:	0f 93       	push	r16
    6306:	1f 93       	push	r17
    6308:	cf 93       	push	r28
    630a:	df 93       	push	r29
    630c:	cd b7       	in	r28, 0x3d	; 61
    630e:	de b7       	in	r29, 0x3e	; 62
    6310:	ca 1b       	sub	r28, r26
    6312:	db 0b       	sbc	r29, r27
    6314:	0f b6       	in	r0, 0x3f	; 63
    6316:	f8 94       	cli
    6318:	de bf       	out	0x3e, r29	; 62
    631a:	0f be       	out	0x3f, r0	; 63
    631c:	cd bf       	out	0x3d, r28	; 61
    631e:	09 94       	ijmp

00006320 <__epilogue_restores__>:
    6320:	2a 88       	ldd	r2, Y+18	; 0x12
    6322:	39 88       	ldd	r3, Y+17	; 0x11
    6324:	48 88       	ldd	r4, Y+16	; 0x10
    6326:	5f 84       	ldd	r5, Y+15	; 0x0f
    6328:	6e 84       	ldd	r6, Y+14	; 0x0e
    632a:	7d 84       	ldd	r7, Y+13	; 0x0d
    632c:	8c 84       	ldd	r8, Y+12	; 0x0c
    632e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6330:	aa 84       	ldd	r10, Y+10	; 0x0a
    6332:	b9 84       	ldd	r11, Y+9	; 0x09
    6334:	c8 84       	ldd	r12, Y+8	; 0x08
    6336:	df 80       	ldd	r13, Y+7	; 0x07
    6338:	ee 80       	ldd	r14, Y+6	; 0x06
    633a:	fd 80       	ldd	r15, Y+5	; 0x05
    633c:	0c 81       	ldd	r16, Y+4	; 0x04
    633e:	1b 81       	ldd	r17, Y+3	; 0x03
    6340:	aa 81       	ldd	r26, Y+2	; 0x02
    6342:	b9 81       	ldd	r27, Y+1	; 0x01
    6344:	ce 0f       	add	r28, r30
    6346:	d1 1d       	adc	r29, r1
    6348:	0f b6       	in	r0, 0x3f	; 63
    634a:	f8 94       	cli
    634c:	de bf       	out	0x3e, r29	; 62
    634e:	0f be       	out	0x3f, r0	; 63
    6350:	cd bf       	out	0x3d, r28	; 61
    6352:	ed 01       	movw	r28, r26
    6354:	08 95       	ret

00006356 <memcpy>:
    6356:	fb 01       	movw	r30, r22
    6358:	dc 01       	movw	r26, r24
    635a:	02 c0       	rjmp	.+4      	; 0x6360 <memcpy+0xa>
    635c:	01 90       	ld	r0, Z+
    635e:	0d 92       	st	X+, r0
    6360:	41 50       	subi	r20, 0x01	; 1
    6362:	50 40       	sbci	r21, 0x00	; 0
    6364:	d8 f7       	brcc	.-10     	; 0x635c <memcpy+0x6>
    6366:	08 95       	ret

00006368 <memset>:
    6368:	dc 01       	movw	r26, r24
    636a:	01 c0       	rjmp	.+2      	; 0x636e <memset+0x6>
    636c:	6d 93       	st	X+, r22
    636e:	41 50       	subi	r20, 0x01	; 1
    6370:	50 40       	sbci	r21, 0x00	; 0
    6372:	e0 f7       	brcc	.-8      	; 0x636c <memset+0x4>
    6374:	08 95       	ret

00006376 <itoa>:
    6376:	fb 01       	movw	r30, r22
    6378:	9f 01       	movw	r18, r30
    637a:	e8 94       	clt
    637c:	42 30       	cpi	r20, 0x02	; 2
    637e:	c4 f0       	brlt	.+48     	; 0x63b0 <itoa+0x3a>
    6380:	45 32       	cpi	r20, 0x25	; 37
    6382:	b4 f4       	brge	.+44     	; 0x63b0 <itoa+0x3a>
    6384:	4a 30       	cpi	r20, 0x0A	; 10
    6386:	29 f4       	brne	.+10     	; 0x6392 <itoa+0x1c>
    6388:	97 fb       	bst	r25, 7
    638a:	1e f4       	brtc	.+6      	; 0x6392 <itoa+0x1c>
    638c:	90 95       	com	r25
    638e:	81 95       	neg	r24
    6390:	9f 4f       	sbci	r25, 0xFF	; 255
    6392:	64 2f       	mov	r22, r20
    6394:	77 27       	eor	r23, r23
    6396:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__udivmodhi4>
    639a:	80 5d       	subi	r24, 0xD0	; 208
    639c:	8a 33       	cpi	r24, 0x3A	; 58
    639e:	0c f0       	brlt	.+2      	; 0x63a2 <itoa+0x2c>
    63a0:	89 5d       	subi	r24, 0xD9	; 217
    63a2:	81 93       	st	Z+, r24
    63a4:	cb 01       	movw	r24, r22
    63a6:	00 97       	sbiw	r24, 0x00	; 0
    63a8:	a1 f7       	brne	.-24     	; 0x6392 <itoa+0x1c>
    63aa:	16 f4       	brtc	.+4      	; 0x63b0 <itoa+0x3a>
    63ac:	5d e2       	ldi	r21, 0x2D	; 45
    63ae:	51 93       	st	Z+, r21
    63b0:	10 82       	st	Z, r1
    63b2:	c9 01       	movw	r24, r18
    63b4:	0c 94 dc 31 	jmp	0x63b8	; 0x63b8 <strrev>

000063b8 <strrev>:
    63b8:	dc 01       	movw	r26, r24
    63ba:	fc 01       	movw	r30, r24
    63bc:	67 2f       	mov	r22, r23
    63be:	71 91       	ld	r23, Z+
    63c0:	77 23       	and	r23, r23
    63c2:	e1 f7       	brne	.-8      	; 0x63bc <strrev+0x4>
    63c4:	32 97       	sbiw	r30, 0x02	; 2
    63c6:	04 c0       	rjmp	.+8      	; 0x63d0 <strrev+0x18>
    63c8:	7c 91       	ld	r23, X
    63ca:	6d 93       	st	X+, r22
    63cc:	70 83       	st	Z, r23
    63ce:	62 91       	ld	r22, -Z
    63d0:	ae 17       	cp	r26, r30
    63d2:	bf 07       	cpc	r27, r31
    63d4:	c8 f3       	brcs	.-14     	; 0x63c8 <strrev+0x10>
    63d6:	08 95       	ret

000063d8 <__udivmodhi4>:
    63d8:	aa 1b       	sub	r26, r26
    63da:	bb 1b       	sub	r27, r27
    63dc:	51 e1       	ldi	r21, 0x11	; 17
    63de:	07 c0       	rjmp	.+14     	; 0x63ee <__udivmodhi4_ep>

000063e0 <__udivmodhi4_loop>:
    63e0:	aa 1f       	adc	r26, r26
    63e2:	bb 1f       	adc	r27, r27
    63e4:	a6 17       	cp	r26, r22
    63e6:	b7 07       	cpc	r27, r23
    63e8:	10 f0       	brcs	.+4      	; 0x63ee <__udivmodhi4_ep>
    63ea:	a6 1b       	sub	r26, r22
    63ec:	b7 0b       	sbc	r27, r23

000063ee <__udivmodhi4_ep>:
    63ee:	88 1f       	adc	r24, r24
    63f0:	99 1f       	adc	r25, r25
    63f2:	5a 95       	dec	r21
    63f4:	a9 f7       	brne	.-22     	; 0x63e0 <__udivmodhi4_loop>
    63f6:	80 95       	com	r24
    63f8:	90 95       	com	r25
    63fa:	bc 01       	movw	r22, r24
    63fc:	cd 01       	movw	r24, r26
    63fe:	08 95       	ret

00006400 <_exit>:
    6400:	f8 94       	cli

00006402 <__stop_program>:
    6402:	ff cf       	rjmp	.-2      	; 0x6402 <__stop_program>
